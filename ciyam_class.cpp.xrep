`{`;Usage: xrep @ciyam_class.cpp.xrep user_vars=model_class.vars.xrep`}
`{`}
`{`#$user_vars @`}
`{`}
`{`;(mandatory)$class_id='cid'`}
`{`;(mandatory)$class_name='cname'`}
`{`;(mandatory)$plural_name='pname'`}
`{`;(mandatory)$class_version='1'`}
`{`;(mandatory)$module_id='mid'`}
`{`;(mandatory)$module_name='mname'`}
`{`;(mandatory)$year_created='2002'`}
`{`}
`{`;$all_fields='name1,type1,id1 name2,type2,id2 name3,type3,id3 name4,type4,id4 name5,type5,id5...'`}
`{`;$basic_fields='name1 ...'`}
`{`;$complex_fields='name2 ...'`}
`{`;$parent_fields='name4 ...'`}
`{`;$text_search_fields='name1 ...'`}
`{`}
`{`;$transient_fields='id2,name2 ...'`}
`{`}
`{`;$commandable_fields='name3,type3 ...'`}
`{`}
`{`;$mandatory_parent_fields='name4 ...'`}
`{`}
`{`;$base_fields='name2,id2 ...'`}
`{`}
`{`;$base_related_types='type5 ...'`}
`{`}
`{`;$child_info='name5,type5,fk_name,fk_id,cascade_op ...'`}
`{`}
`{`;$child_types='type5 ...'`}
`{`;$parent_types='type4 ...'`}
`{`}
`{`;$customised_types='...'(such as numeric and date_time that need includes)`}
`{`}
`{`;$fixed_key='val'`}
`{`}
`{`;$parent_class='...'`}
`{`}
`{`;$all_indexes='name1,name3;bool,string ...'`}
`{`;$all_unique_indexes='name1,name3 ...'`}
`{`}
`{`;$sql_columns='C_Key_ VARCHAR(32), C_Ver_ INTEGER NOT NULL, ...'`}
`{`;$sql_numeric_fields='name1 ...'`}
`{`}
`{`;$all_sql_indexes='C_name1,C_name3 ...'`}
`{`;$all_sql_unique_indexes='C_name1,C_name3 ...'`}
`{`}
`{`;$all_procedures='procedure1 ...'`}
`{`}
`{`;$procedure1_all_args='arg1,type1 arg2,type2 arg3,type3 ...'`}
`{`;$procedure1_all_inputs='arg1,type1 arg2,type2 ...'`}
`{`;$procedure1_all_outputs='arg3,type3 ...'`}
`{`;(mandatory if any procedure args)$procedure1_all_simple_inputs='arg1 ...'`}
`{`;(mandatory if any procedure args)$procedure1_all_complex_inputs='arg2 ...'`}
`{`}
`{`;$all_specifications='spec1,type1 spec2,type1 ...'`}
`{`;$all_specification_types='type1 ...'`}
`{`}
`{`;The variables above need to be provided whereas the following variables are derived here.`}
`{`}
`{`(`!`@eq`(`$class_version`,`'1`'`)`)`$use_transform`=`'`'`}
`{`}
`{`$full_class_name`=`$module_name`}
`{`$full_class_name`^`'_`'`}
`{`$full_class_name`^`$class_name`}
`{`}
`{`(`?`$all_fields`)`|`(`?`$base_fields`)`$all_and_base_fields`=`'`'`}
`{`(`?`$base_fields`)`[`$base_fields`%,`,\
`{`$all_and_base_fields`=`$all_and_base_fields`+`'\0`'`}\
`{`$all_and_base_fields`^`',\1`'`}`]`}
`{`(`?`$all_fields`)`[`$all_fields`%,`,\
`{`$all_and_base_fields`=`$all_and_base_fields`+`'\0`'`}\
`{`$all_and_base_fields`^`',\2`'`}`]`}
`{`}
`{`(`?`$all_fields`)`$all_field_ids`=`'`'`}
`{`(`?`$all_fields`)`$all_field_names`=`'`'`}
`{`(`?`$all_fields`)`[`$all_fields`%,`,\
`{`$all_field_ids`=`$all_field_ids`+`'\2`'`}`{`$all_field_names`=`$all_field_names`+`'\0`'`}`]`}
`{`}
`{`(`?`$all_field_ids`)`$all_sorted_field_ids`=`@sort`(`$all_field_ids`)`}
`{`(`?`$all_field_names`)`$all_sorted_field_names`=`@sort`(`$all_field_names`)`}
`{`}
`{`(`?`$base_related_types`|`?`$child_types`|`?`$parent_types`)`$related_types`=`'`'`}
`{`(`?`$base_related_types`)`$related_types`=`$related_types`+`$base_related_types`}
`{`(`?`$child_types`)`$related_types`=`$related_types`+`$child_types`}
`{`(`?`$parent_types`)`$related_types`=`$related_types`+`$parent_types`}
`{`}
`{`(`?`$parent_fields`)`$any_commandable_fields`=`'`'`}
`{`(`?`$commandable_fields`)`$any_commandable_fields`=`'`'`}
`{`}
`{`(`!`?`$parent_fields`)`$parent_fields`=`'`'`}
`{`}
`{`(`?`$basic_fields`|`?`$complex_fields`)`$standard_fields`=`'`'`}
`{`(`?`$basic_fields`)`$standard_fields`=`$standard_fields`+`$basic_fields`}
`{`(`?`$complex_fields`)`$standard_fields`=`$standard_fields`+`$complex_fields`}
`{`}
`{`(`?`$transient_fields`)`$transient_field_ids`=`'`'`}
`{`(`?`$transient_fields`)`$transient_field_names`=`'`'`}
`{`(`?`$transient_fields`)`[`$transient_fields`%,`,\
`{`$transient_field_ids`=`$transient_field_ids`+`'\0`'`}\
`{`$transient_field_names`=`$transient_field_names`+`'\1`'`}\
`]`}
`{`(`?`$transient_field_ids`)`$transient_sorted_field_ids`=`@sort`(`$transient_field_ids`)`}
`{`(`?`$transient_field_names`)`$transient_sorted_field_names`=`@sort`(`$transient_field_names`)`}
`{`}
`{`(`?`$all_fields`)`$non_transient_fields`=`'`'`}
`{`?`$all_fields`[`$all_fields`%,`,\
`{`!`?`$transient_field_names`|`!`@in`(`'\0`'`,`$transient_field_names`)\
`{`$non_transient_fields`=`$non_transient_fields`+`'\0`'`}\
`}`]`}
`{`}
`{`?`$all_procedures`[`$all_procedures`,`{`?`$\$_all_args`$\$_all_non_inputs`=`'`'`}`]`}
`{`?`$all_procedures`[`$all_procedures`,`{`?`$\$_all_outputs`[`$\$_all_outputs`%,`,`{`$\$_all_non_inputs`=`$\$_all_non_inputs`+`'\\0`'`}`]`}`]`}
`{`}
`{`$all_includes_specifications`=`'`'`}
`{`$all_to_store_specifications`=`'`'`}
`{`$all_validate_specifications`=`'`'`}
`{`$all_anonymous_specifications`=`'`'`}
`{`$all_at_create_specifications`=`'`'`}
`{`$all_for_store_specifications`=`'`'`}
`{`$all_get_state_specifications`=`'`'`}
`{`$all_procedure_specifications`=`'`'`}
`{`$all_transform_specifications`=`'`'`}
`{`$all_after_fetch_specifications`=`'`'`}
`{`$all_after_store_specifications`=`'`'`}
`{`$all_can_destroy_specifications`=`'`'`}
`{`$all_for_destroy_specifications`=`'`'`}
`{`$all_is_filtered_specifications`=`'`'`}
`{`$all_after_destroy_specifications`=`'`'`}
`{`$all_finalise_fetch_specifications`=`'`'`}
`{`$all_static_class_init_specifications`=`'`'`}
`{`$all_static_class_term_specifications`=`'`'`}
`{`$all_value_will_be_provided_specifications`=`'`'`}
`{`$all_get_required_field_names_specifications`=`'`'`}
`{`$all_get_always_required_field_names_specifications`=`'`'`}
`{`$all_get_transient_replacement_field_names_specifications`=`'`'`}
`{`?`$all_specifications`[`$all_specifications`%,`,\
`{`(`?`$specification_\0_sections`)`[`$specification_\0_sections`,\
`{`$all_\\$_specifications`=`$all_\\$_specifications`+`'\0,\1`'`}`]`}\
`]`}
`{`;NOTE: These specific procedure checks can be removed when modeller.exe is no longer used.`}
`{`?`$all_specifications`[`$all_specifications`%,`,\
`{`(`?`$specification_\0_proc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_fetch`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_pggen`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_chkproc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_conproc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_genproc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_remproc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_dn_proc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_up_proc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_inc_proc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_mark_read`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_mark_proc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_send_proc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_procedure`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_move_trash`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_delete_proc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_empty_trash`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_recover_proc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_gen_procedure`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_calc_procedure`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_accept_procedure`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_reject_procedure`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_confirm_procedure`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_forward_procedure`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_mark_as_read_proc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_move_to_junk_proc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_complete_procedure`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_move_to_trash_proc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_fetch_messages_proc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`{`(`?`$specification_\0_move_to_parent_folder_proc`)`$all_procedure_specifications`=`$all_procedure_specifications`+`'\0,\1`'`}\
`]`}
`{`?`$all_specifications`[`$all_specifications`%,`,\
`{`(`!`?`$specification_\0_sections`)`$all_includes_specifications`=`$all_includes_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_to_store_specifications`=`$all_to_store_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_validate_specifications`=`$all_validate_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_anonymous_specifications`=`$all_anonymous_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_at_create_specifications`=`$all_at_create_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_for_store_specifications`=`$all_for_store_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_get_state_specifications`=`$all_get_state_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_transform_specifications`=`$all_transform_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_after_fetch_specifications`=`$all_after_fetch_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_after_store_specifications`=`$all_after_store_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_can_destroy_specifications`=`$all_can_destroy_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_for_destroy_specifications`=`$all_for_destroy_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_is_filtered_specifications`=`$all_is_filtered_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_after_destroy_specifications`=`$all_after_destroy_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_finalise_fetch_specifications`=`$all_finalise_fetch_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_static_class_init_specifications`=`$all_static_class_init_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_static_class_term_specifications`=`$all_static_class_term_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_value_will_be_provided_specifications`=`$all_value_will_be_provided_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_get_required_field_names_specifications`=`$all_get_required_field_names_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_get_always_required_field_names_specifications`=`$all_get_always_required_field_names_specifications`+`'\0,\1`'`}\
`{`(`!`?`$specification_\0_sections`)`$all_get_transient_replacement_field_names_specifications`=`$all_get_transient_replacement_field_names_specifications`+`'\0,\1`'`}\
`]`}
`{`}
// Copyright (c) `{`$year_created`}
//
// CIYAM Pty. Ltd.
// ACN 093 704 539
//
// ALL RIGHTS RESERVED
//
// Permission to use this software for non-commercial purposes is hereby granted. Permission to
// distribute this software privately is granted provided that the source code is unaltered and
// complete or that any alterations and omissions have been first approved by CIYAM. Commercial
// usage of this software is not permitted without first obtaining a license for such a purpose
// from CIYAM. This software may not be publicly distributed unless written permission to do so
// has been obtained from CIYAM.

#ifdef __BORLANDC__
#  include "precompile.h"
#endif
#pragma hdrstop

#ifndef HAS_PRECOMPILED_STD_HEADERS
#  include <cstring>
#  include <fstream>
#  include <iostream>
#  include <algorithm>
#  include <stdexcept>
#endif

#define CIYAM_BASE_LIB
#define MODULE_`{`@upper`(`$module_name`)`}_IMPL

// [<start macros>]
`{`(`?`$user_source`)`#$user_source section=macros`}
// [<finish macros>]

#include "`{`$full_class_name`}.h"
`{`?`$related_types`[`$related_types`,
#include "\$.h"\
`]`}
`{`?`$customised_types`[`$customised_types`,
#include "\$_helper.h"\
`]`}

#include "ciyam_base.h"
#include "class_domains.h"
#include "module_strings.h"
#include "class_utilities.h"
#include "command_handler.h"
#include "module_interface.h"

`{`?`$all_includes_specifications`[`$all_includes_specifications`%,`,\
`{`@eq`(`'\1`'`,`'copy_child_links_from_fk`'`)\
`{`#copy_child_links_from_fk.spec.xrep section=includes module_name=$module_name arg_fkcclass=$specification_\0_fkcclass`}
`,\
`@eq`(`'\1`'`,`'clone_children_for_create`'`)\
`{`#clone_children_for_create.spec.xrep section=includes module_name=$module_name\
 arg_class=$specification_\0_class arg_cclass=$specification_\0_cclass arg_gclass=$specification_\0_gclass`}
`,\
`@eq`(`'\1`'`,`'for_cms_gen`'`)\
`{`#for_cms_gen.spec.xrep section=includes module_name=$module_name arg_frclass=$specification_\0_frclass`}
`,\
`@eq`(`'\1`'`,`'prior_version_filter`'`)\
`{`#prior_version_filter.spec.xrep section=includes module_name=$module_name arg_sfclass=$specification_\0_sfclass`}
`,\
`@eq`(`'\1`'`,`'meta_relationship_field`'`)\
`{`#meta_relationship_field.spec.xrep section=includes module_name=$module_name\
 arg_fclass=$specification_\0_fclass arg_gclass=$specification_\0_gclass`}
`}`]`}
// [<start includes>]
`{`(`?`$user_source`)`#$user_source section=includes`}
// [<finish includes>]

using namespace std;

// [<start namespaces>]
`{`(`?`$user_source`)`#$user_source section=namespaces`}
// [<finish namespaces>]
`{`?`$parent_types`[`$parent_types`,
template< > inline string to_string( const \$& c )
{
   return ::to_string( static_cast< const class_base& >( c ) );
}\
`+\n`]`}
`{`?`$parent_types`[`$parent_types`,
inline void from_string( \$& c, const string& s )
{
   ::from_string( static_cast< class_base& >( c ), s );
}\
`+\n`]`}

inline int system( const string& cmd ) { return exec_system( cmd ); }

namespace
{

#include "`{`$full_class_name`}.cmh"

const int32_t c_version = `{`$class_version`};

const char* const c_okay = "okay";
`{`?`$base_fields`[`$base_fields`%,`,
const char* const c_field_id_\0 = "\1";\
`]`}
`{`?`$all_fields`[`$all_fields`%,`,
const char* const c_field_id_\0 = "\2";\
`]`}
`{`?`$base_fields`[`$base_fields`%,`,
const char* const c_field_name_\0 = "\0";\
`]`}
`{`?`$all_fields`[`$all_fields`%,`,
const char* const c_field_name_\0 = "\0";\
`]`}
`{`?`$base_fields`[`$base_fields`%,`,
const char* const c_field_display_name_\0 = "field_`{`@lower`(`'\2`'`)`}_`{`@lower`(`'\0`'`)`}";\
`]`}
`{`?`$all_fields`[`$all_fields`%,`,
const char* const c_field_display_name_\0 = "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`'\0`'`)`}";\
`]`}
`{`!`(`?`$all_fields`)
const int c_num_fields = 0;`,
const int c_num_fields = `{`@count`(`$all_fields`)`};`}
`{`?`$all_sorted_field_ids`[`$all_sorted_field_ids`'
const char* const c_all_sorted_field_ids[ ] =
{`'
   "\$"\
`+,`]
};`}
`{`?`$all_sorted_field_names`[`$all_sorted_field_names`'
const char* const c_all_sorted_field_names[ ] =
{`'
   "\$"\
`+,`]
};`}
`{`(`?`$all_sorted_field_ids`)
inline bool compare( const char* p_s1, const char* p_s2 ) { return strcmp( p_s1, p_s2 ) < 0; }

inline bool has_field( const string& field )
{
   return binary_search( c_all_sorted_field_ids, c_all_sorted_field_ids + c_num_fields, field.c_str( ), compare )
    || binary_search( c_all_sorted_field_names, c_all_sorted_field_names + c_num_fields, field.c_str( ), compare );
}\
`,
bool has_field( const string& ) { static bool false_value( false ); return false_value; }\
`}
`{`!`(`?`$transient_fields`)
const int c_num_transient_fields = 0;`,
const int c_num_transient_fields = `{`@count`(`$transient_fields`)`};`}
`{`?`$transient_sorted_field_ids`[`$transient_sorted_field_ids`'
const char* const c_transient_sorted_field_ids[ ] =
{`'
   "\$"\
`+,`]
};`}
`{`?`$transient_sorted_field_names`[`$transient_sorted_field_names`'
const char* const c_transient_sorted_field_names[ ] =
{`'
   "\$"\
`+,`]
};`}
`{`(`?`$transient_fields`)
inline bool transient_compare( const char* p_s1, const char* p_s2 ) { return strcmp( p_s1, p_s2 ) < 0; }

inline bool is_transient_field( const string& field )
{
   return binary_search( c_transient_sorted_field_ids,
    c_transient_sorted_field_ids + c_num_transient_fields, field.c_str( ), transient_compare )
    || binary_search( c_transient_sorted_field_names,
    c_transient_sorted_field_names + c_num_transient_fields, field.c_str( ), transient_compare );
}\
`,
bool is_transient_field( const string& ) { static bool false_value( false ); return false_value; }\
`}
`{`?`$all_procedure_info`[`$all_procedure_info`%,`,
const char* const c_procedure_id_\1 = "\0";\
`]`}
`{`?`$all_modifiers`[`$all_modifiers`%,`,
const uint64_t c_modifier_\0 = UINT64_C( 0x\1 );\
`]`}
`{`(`?`$fixed_key`)
const string c_fixed_key_value( "`{`$fixed_key`}" );\
`}
`{`?`$domain_fields`[`$domain_fields`,
`{`$domain_type_\$`} g_\$_domain;\
`]`}

set< string > g_derivations;

typedef map< string, `{`$full_class_name`}* > external_aliases_container;
typedef external_aliases_container::const_iterator external_aliases_const_iterator;
typedef external_aliases_container::value_type external_aliases_value_type;

typedef map< size_t, `{`$full_class_name`}* > external_aliases_lookup_container;
typedef external_aliases_lookup_container::const_iterator external_aliases_lookup_const_iterator;

external_aliases_container g_external_aliases;
external_aliases_lookup_container g_external_aliases_lookup;

`{`?`$all_fields`[`$all_fields`%,`,\
`{`?`$standard_fields`&`@in`(`'\0`'`,`$standard_fields`)\
\1 gv_default_\0 = \1(`{`(`?`$field_default_\0`) `{`$field_default_\0`}`} );
`}`]`}
`{`(`?`$all_enums`)`[`$all_enums`%,`,\
set< \1 > g_\0_enum;
`]`}
`{`(`?`$all_enums`)`[`$all_enums`%,`,\
`{`[`$enum_\0`%=`,const \1 c_enum_\0_\\1( `{`@eq`(`'\2`'`,`'numlit`'`)\\0`,"\\0"`} );`+\n`]`}

string get_enum_string_\0( \1 val )
{
   string string_name;

   if( to_string( val ) == "" )
      throw runtime_error( "unexpected empty enum value for \0" );
`{`[`$enum_\0`%=`,\
   else if( to_string( val ) == to_string( "\\0" ) )
      string_name = "enum_\0_\\1";\
`+\n`]`}
   else
      throw runtime_error( "unexpected enum value '" + to_string( val ) + "' for \0" );

   return get_module_string( lower( string_name ) );
}
`+\n`]`}
`{`?`$all_anonymous_specifications`[`$all_anonymous_specifications`%,`,\
`{`@eq`(`'\1`'`,`'for_cms_gen`'`)\
`{`#for_cms_gen.spec.xrep section=anonymous module_name=$module_name full_class_name=$full_class_name\
 arg_frclass=$specification_\0_frclass arg_frcode=$specification_\0_frcode arg_frgroup=$specification_\0_frgroup\
 arg_frmeta=$specification_\0_frmeta arg_gbase=$specification_\0_gbase arg_gclass=$specification_\0_gclass\
 arg_gextra=$specification_\0_gextra arg_gname=$specification_\0_gname arg_pfclass=$specification_\0_pfclass\
 arg_pffile=$specification_\0_pffile arg_pfname=$specification_\0_pfname arg_pgchild=$specification_\0_pgchild\
 arg_pgchildgen=$specification_\0_pgchildgen arg_pgclass=$specification_\0_pgclass arg_pgcode=$specification_\0_pgcode\
 arg_pgfname=$specification_\0_pgfname arg_pgfnamegen=$specification_\0_pgfnamegen\
 arg_pggen=$specification_\0_pggen arg_pggenout=$specification_\0_pggenout\
 arg_pghyper=$specification_\0_pghyper arg_pglink=$specification_\0_pglink arg_pgmeta=$specification_\0_pgmeta\
 arg_pgparent=$specification_\0_pgparent arg_pgstitle=$specification_\0_pgstitle arg_pgtext=$specification_\0_pgtext\
 arg_pgtitle=$specification_\0_pgtitle arg_plchild=$specification_\0_plchild arg_plclass=$specification_\0_plclass\
 arg_plorder=$specification_\0_plorder arg_plpage=$specification_\0_plpage arg_vclass=$specification_\0_vclass\
 arg_vname=$specification_\0_vname arg_vvalue=$specification_\0_vvalue`}
`,\
`@eq`(`'\1`'`,`'for_user_account_invitation`'`)\
`{`#for_user_account_invitation.spec.xrep section=anonymous module_name=$module_name\
 arg_uclass=$specification_\0_uclass arg_dfield=$specification_\0_dfield arg_idfield=$specification_\0_idfield`}
`}`]`}
// [<start anonymous>]
`{`(`?`$user_source`)`#$user_source section=anonymous`}
// [<finish anonymous>]

}

registration< `{`$full_class_name`} > `{`$class_name`}_registration( get_class_registry( ), "`{`$class_id`}" );

class `{`$full_class_name`}_command_functor;

`{`[`$full_class_name`,\
class \$_command_handler : public command_handler
{
   friend class \$_command_functor;

   public:
   \$_command_handler( ) : p_\$( 0 ) { }

   void set_\$( \$* p_new_\$ ) { p_\$ = p_new_\$; }

   void handle_unknown_command( const string& command )
   {
`{`(`?`$parent_class`)\
      ( void )command;

      retval = p_\$->`{`$parent_class`}::execute( get_cmd_and_args( ) );\
`,\
      throw runtime_error( "unknown command '" + command + "'" );\
`}
   }

   void handle_invalid_command( const command_parser& parser, const string& cmd_and_args )
   {
      throw runtime_error( "invalid command usage '" + cmd_and_args + "'" );
   }

   private:
   \$* p_\$;

   protected:
   string retval;
`{`(`?`$parent_class`)\
   string cmd_and_args;
`}\
};`]`}

class `{`$full_class_name`}_command_functor : public command_functor
{
   public:
   `{`$full_class_name`}_command_functor( `{`$full_class_name`}_command_handler& handler )
    : command_functor( handler ),
    cmd_handler( handler )
   {
   }

   void operator ( )( const string& command, const parameter_info& parameters );

   private:
   `{`$full_class_name`}_command_handler& cmd_handler;
};

command_functor* `{`$full_class_name`}_command_functor_factory( const string& /*name*/, command_handler& handler )
{
   return new `{`$full_class_name`}_command_functor( dynamic_cast< `{`$full_class_name`}_command_handler& >( handler ) );
}

void `{`$full_class_name`}_command_functor::operator ( )( const string& command, const parameter_info& parameters )
{
   if( command == c_cmd_`{`$full_class_name`}_key )
   {
      bool want_fixed( has_parm_val( parameters, c_cmd_parm_`{`$full_class_name`}_key_fixed ) );

      if( !want_fixed )
         cmd_handler.retval = cmd_handler.p_`{`$full_class_name`}->get_key( );
      else
         cmd_handler.retval = cmd_handler.p_`{`$full_class_name`}->get_fixed_key( );
   }
   else if( command == c_cmd_`{`$full_class_name`}_ver )
   {
      string ver_rev( to_string( cmd_handler.p_`{`$full_class_name`}->get_version( ) ) );
      ver_rev += "." + to_string( cmd_handler.p_`{`$full_class_name`}->get_revision( ) );

      cmd_handler.retval = ver_rev;
   }
   else if( command == c_cmd_`{`$full_class_name`}_get )
   {
      string field_name( get_parm_val( parameters, c_cmd_parm_`{`$full_class_name`}_get_field_name ) );

      if( field_name.empty( ) )
         throw runtime_error( "field name must not be empty for getter call" );
`{`?`$all_fields`[`$all_fields`%,`,\
      else if( field_name == c_field_id_\0 || field_name == c_field_name_\0 )
         string_getter< \1 >( cmd_handler.p_`{`$full_class_name`}->\0( ), cmd_handler.retval );\
`+\n`]`}
      else
`{`(`?`$parent_class`)\
         cmd_handler.retval = cmd_handler.p_`{`$full_class_name`}->`{`$parent_class`}::execute( cmd_handler.cmd_and_args );\
`,\
         throw runtime_error( "unknown field name '" + field_name + "' for getter call" );\
`}
   }
   else if( command == c_cmd_`{`$full_class_name`}_set )
   {
      string field_name( get_parm_val( parameters, c_cmd_parm_`{`$full_class_name`}_set_field_name ) );
      string field_value( get_parm_val( parameters, c_cmd_parm_`{`$full_class_name`}_set_field_value ) );

      if( field_name.empty( ) )
         throw runtime_error( "field name must not be empty for setter call" );
`{`?`$all_fields`[`$all_fields`%,`,\
      else if( field_name == c_field_id_\0 || field_name == c_field_name_\0 )
         func_string_setter< `{`$full_class_name`}, \1 >(
          *cmd_handler.p_`{`$full_class_name`}, &`{`$full_class_name`}::\0, field_value );\
`+\n`]`}
      else
`{`(`?`$parent_class`)\
         cmd_handler.p_`{`$full_class_name`}->`{`$parent_class`}::execute( cmd_handler.cmd_and_args );\
`,\
         throw runtime_error( "unknown field name '" + field_name + "' for setter call" );\
`}

      cmd_handler.retval = c_okay;
   }
   else if( command == c_cmd_`{`$full_class_name`}_cmd )
   {
      string field_name( get_parm_val( parameters, c_cmd_parm_`{`$full_class_name`}_cmd_field_name ) );
      string cmd_and_args( get_parm_val( parameters, c_cmd_parm_`{`$full_class_name`}_cmd_cmd_and_args ) );

      cmd_handler.retval.erase( );

      if( field_name.empty( ) )
         throw runtime_error( "field name must not be empty for command call" );
`{`?`$commandable_fields`[`$commandable_fields`%,`,\
      else if( field_name == c_field_id_\0 || field_name == c_field_name_\0 )
      {
         \1 \0( cmd_handler.p_`{`$full_class_name`}->\0( ) );
         execute_command( \0, cmd_and_args, cmd_handler.retval );
         cmd_handler.p_`{`$full_class_name`}->\0( \0 );
      }\
`+\n`]`}
`{`[`$parent_fields`,\
      else if( field_name == c_field_id_\$ || field_name == c_field_name_\$ )
         cmd_handler.retval = cmd_handler.p_`{`$full_class_name`}->\$( ).execute( cmd_and_args );\
`+\n`]`}
      else
`{`(`?`$parent_class`)\
         cmd_handler.retval = cmd_handler.p_`{`$full_class_name`}->`{`$parent_class`}::execute( cmd_handler.cmd_and_args );\
`,\
         throw runtime_error( "unknown field name '" + field_name + "' for command call" );\
`}
   }
`{`?`$all_procedures`[`$all_procedures`,\
   else if( command == c_cmd_`{`$full_class_name`}_\$ )
   {
`{`?`$\$_all_inputs`[`$\$_all_inputs`%,`,\
      \\1 \\0( get_parm_val_from_string< \\1 >( parameters, c_cmd_parm_`{`$full_class_name`}_\$_\\0 ) );
`]`}\
`{`?`$\$_all_outputs`[`$\$_all_outputs`%,`,\
      \\1 \\0;
`]`}\
      cmd_handler.p_`{`$full_class_name`}->\$(`{`?`$\$_all_args`[`$\$_all_args`%,`' `'\\0`+, `]`} );

      cmd_handler.retval.erase( );
`{`?`$\$_all_outputs`[`$\$_all_outputs`%,`,\
      append_value( cmd_handler.retval, \\0 );
`+\\n`]`}\
   }\
`+\n`]`}
}

`{`[`$full_class_name`,\
struct \$::impl : public \$_command_handler
{
   impl( \$& o )`]`}
    :
    cp_obj( &o ),
    total_child_relationships( 0 )
   {
      p_obj = &o;
      set_`{`$full_class_name`}( &o );

      add_commands( 0, `{`$full_class_name`}_command_functor_factory,
       ARRAY_PTR_AND_SIZE( `{`$full_class_name`}_command_definitions ) );
   }

   `{`$full_class_name`}& get_obj( ) const
   {
      return *cp_obj;
   }
`{`?`$all_fields`[`$all_fields`%,`,\
`{`?`$basic_fields`&`@in`(`'\0`'`,`$basic_fields`)\

   \1 impl_\0( ) const { return lazy_fetch( p_obj ), v_\0; }
   void impl_\0( \1 \0 ) { v_\0 = \0; }
`}\
`{`?`$complex_fields`&`@in`(`'\0`'`,`$complex_fields`)\

   const \1& impl_\0( ) const { return lazy_fetch( p_obj ), v_\0; }
   void impl_\0( const \1& \0 ) { v_\0 = \0; }
`}\
`]`}`{`?`$all_fields`[`$all_fields`%,`,\
`{`@in`(`'\0`'`,`$parent_fields`)\

   \1& impl_\0( )
   {
      if( !cp_\0 )
      {
         cp_\0.init( );

         p_obj->setup_graph_parent( *cp_\0, c_field_id_\0, v_\0 );
      }
      return *cp_\0;
   }

   const \1& impl_\0( ) const
   {
      lazy_fetch( p_obj );

      if( !cp_\0 )
      {
         cp_\0.init( );

         p_obj->setup_graph_parent( *cp_\0, c_field_id_\0, v_\0 );
      }
      return *cp_\0;
   }

   void impl_\0( const string& key )
   {
      class_base_accessor cba( impl_\0( ) );
      cba.set_key( key );
   }
`}`]`}`{`?`$child_info`[`$child_info`%,`,\

   \1& impl_\0( )
   {
      if( !cp_\0 )
      {
         cp_\0.init( );

         p_obj->setup_graph_parent( *cp_\0, "\3" );
      }
      return *cp_\0;
   }

   const \1& impl_\0( ) const
   {
      if( !cp_\0 )
      {
         cp_\0.init( );

         p_obj->setup_graph_parent( *cp_\0, "\3" );
      }
      return *cp_\0;
   }
`]`}
`{`?`$all_procedures`[`$all_procedures`,\
   void impl_\$(`{`?`$\$_all_args`[`$\$_all_args`%,`' `'\
`{`@in`(`'\\0`'`,`$\$_all_simple_inputs`)\\1 \\0`}\
`{`@in`(`'\\0`'`,`$\$_all_complex_inputs`)const \\1& \\0`}\
`{`@in`(`'\\0`'`,`$\$_all_non_inputs`)\\1& \\0`}\
`+, `] `});
`+\n`]`}
   string get_field_value( int field ) const;
   void set_field_value( int field, const string& value );

   uint64_t get_state( ) const;

   const string& execute( const string& cmd_and_args );

   void clear_foreign_key( const string& field );

   void set_foreign_key_value( const string& field, const string& value );

   const string& get_foreign_key_value( const string& field );

   void get_foreign_key_values( foreign_key_data_container& foreign_key_values ) const;

   void clear( );

   bool value_will_be_provided( const string& field_name );

   void validate( unsigned state, bool is_internal, validation_error_container* p_validation_errors );

   void after_fetch( );
   void finalise_fetch( );

   void at_create( );

   void to_store( bool is_create, bool is_internal );
   void for_store( bool is_create, bool is_internal );
   void after_store( bool is_create, bool is_internal );

   bool can_destroy( bool is_internal );
   void for_destroy( bool is_internal );
   void after_destroy( bool is_internal );

   void set_default_values( );

   bool is_filtered( const set< string >& filters ) const;

`{`(`?`$use_transform`)
   void transform( read_stream& rs, int32_t version );
`}
   `{`$full_class_name`}* p_obj;
   class_pointer< `{`$full_class_name`} > cp_obj;

   // [<start members>]
`{`(`?`$user_source`)`#$user_source section=members`}
   // [<finish members>]

   size_t total_child_relationships;
`{`?`$standard_fields`}
`{`?`$all_fields`[`$all_fields`%,`,\
`{`?`$standard_fields`&`@in`(`'\0`'`,`$standard_fields`)\
   \1 v_\0;
`}\
`]`}`{`?`$all_fields`[`$all_fields`%,`,\
`{`@in`(`'\0`'`,`$parent_fields`)
   string v_\0;
   mutable class_pointer< \1 > cp_\0;
`}\
`]`}`{`?`$child_info`[`$child_info`%,`'\n`'\
   mutable class_pointer< \1 > cp_\0;
`]`}};

`{`?`$all_procedures`[`$all_procedures`,\
void `{`$full_class_name`}::impl::impl_\$(`{`?`$\$_all_args`[`$\$_all_args`%,`,\
`{`@in`(`'\\0`'`,`$\$_all_simple_inputs`) \\1 \\0`}\
`{`@in`(`'\\0`'`,`$\$_all_complex_inputs`) const \\1& \\0`}\
`{`@in`(`'\\0`'`,`$\$_all_non_inputs`) \\1& \\0`}\
`+,`] `})
{`{`?`$all_procedure_specifications`[`$all_procedure_specifications`%,`,\
`{`@eq`(`'\\1`'`,`'interest`'`)`&`@eq`(`'\$`'`,`$specification_\\0_calc_procedure`)
`{`#interest.spec.xrep section=calculate class_name=$class_name\
 arg_rate=$specification_\\0_rate arg_balance=$specification_\\0_balance\
 arg_calc_start=$specification_\\0_calc_start arg_calc_finish=$specification_\\0_calc_finish`}\
`,\
`@eq`(`'\\1`'`,`'field_inc_in_proc`'`)`&`@eq`(`'\$`'`,`$specification_\\0_proc`)
`{`#field_inc_in_proc.spec.xrep section=proc class_name=$class_name full_class_name=$full_class_name\
 arg_field=$specification_\\0_field arg_value=$specification_\\0_value`}\
`,\
`@eq`(`'\\1`'`,`'for_clone`'`)`&`@eq`(`'\$`'`,`$specification_\\0_procedure`)
`{`#for_clone.spec.xrep section=procedure module_name=$module_name class_name=$class_name full_class_name=$full_class_name\
 arg_field=$specification_\\0_field arg_value=$specification_\\0_value arg_spfield=$specification_\\0_spfield\
 arg_scfield=$specification_\\0_scfield arg_output_arg=$specification_\\0_output_arg arg_tfield=$specification_\\0_tfield`}\
`,\
`@eq`(`'\\1`'`,`'for_cms_gen`'`)`&`@eq`(`'\$`'`,`$specification_\\0_pgcopy`)
`{`#for_cms_gen.spec.xrep section=copy_procedure module_name=$module_name class_name=$class_name\
 arg_pgparent=$specification_\\0_pgparent arg_pgchild=$specification_\\0_pgchild arg_pgfname=$specification_\\0_pgfname\
 arg_pgcode=$specification_\\0_pgcode arg_pgtitle=$specification_\\0_pgtitle arg_pghyper=$specification_\\0_pghyper\
 arg_pgnext=$specification_\\0_pgnext arg_pgcopyout=$specification_\\0_pgcopyout`}\
`,\
`@eq`(`'\\1`'`,`'for_cms_gen`'`)`&`@eq`(`'\$`'`,`$specification_\\0_pggen`)
`{`#for_cms_gen.spec.xrep section=gen_procedure module_name=$module_name class_name=$class_name full_class_name=$full_class_name\
 arg_frclass=$specification_\\0_frclass arg_frcode=$specification_\\0_frcode arg_frgroup=$specification_\\0_frgroup\
 arg_frmeta=$specification_\\0_frmeta arg_gbase=$specification_\\0_gbase arg_gclass=$specification_\\0_gclass\
 arg_gextra=$specification_\\0_gextra arg_gname=$specification_\\0_gname arg_pfclass=$specification_\\0_pfclass\
 arg_pffile=$specification_\\0_pffile arg_pfname=$specification_\\0_pfname arg_pfnamegen=$specification_\\0_pfnamegen\
 arg_pgchild=$specification_\\0_pgchild arg_pgchildgen=$specification_\\0_pgchildgen arg_pgclass=$specification_\\0_pgclass\
 arg_pgcode=$specification_\\0_pgcode arg_pgcanclone=$specification_\\0_pgcanclone\
 arg_pgfname=$specification_\\0_pgfname arg_pgfnamegen=$specification_\\0_pgfnamegen\
 arg_pggen=$specification_\\0_pggen arg_pggenout=$specification_\\0_pggenout\
 arg_pggroup=$specification_\\0_pggroup arg_pgolinks=$specification_\\0_pgolinks arg_pglchild=$specification_\\0_pglchild\
 arg_pghyper=$specification_\\0_pghyper arg_pglink=$specification_\\0_pglink arg_pgmeta=$specification_\\0_pgmeta\
 arg_pgparent=$specification_\\0_pgparent arg_pgstitle=$specification_\\0_pgstitle arg_pgtext=$specification_\\0_pgtext\
 arg_pgtitle=$specification_\\0_pgtitle arg_plchild=$specification_\\0_plchild arg_plclass=$specification_\\0_plclass\
 arg_plorder=$specification_\\0_plorder arg_plpage=$specification_\\0_plpage arg_lclass=$specification_\\0_lclass\
 arg_lname=$specification_\\0_lname arg_lgroup=$specification_\\0_lgroup arg_vclass=$specification_\\0_vclass\
 arg_vname=$specification_\\0_vname arg_vvalue=$specification_\\0_vvalue arg_pgctype=$specification_\\0_pgctype`}\
`,\
`@eq`(`'\\1`'`,`'key_generator`'`)`&`@eq`(`'\$`'`,`$specification_\\0_procedure`)
`{`#key_generator.spec.xrep section=procedure class_name=$class_name\
 arg_field=$specification_\\0_field arg_procedure_arg=$specification_\\0_procedure_arg`}\
`,\
`@eq`(`'\\1`'`,`'meta_trait_val_proc`'`)`&`@eq`(`'\$`'`,`$specification_\\0_procedure`)
`{`#meta_trait_val_proc.spec.xrep section=procedure class_name=$class_name\
 arg_field=$specification_\\0_field arg_procedure=$specification_\\0_procedure\
 arg_primitive_arg=$specification_\\0_primitive_arg arg_class_arg=$specification_\\0_class_arg\
 arg_parent_arg=$specification_\\0_parent_arg arg_error_arg=$specification_\\0_error_arg\
 arg_test_value_arg=$specification_\\0_test_value_arg\
 arg_proc_arg_class_arg=$specification_\\0_proc_arg_class_arg\
 arg_proc_arg_type_arg=$specification_\\0_proc_arg_type_arg`}\
`,\
`@eq`(`'\\1`'`,`'move_up_and_down`'`)`&`@eq`(`'\$`'`,`$specification_\\0_up_proc`)
`{`#move_up_and_down.spec.xrep section=up_procedure\
 class_name=$class_name module_name=$module_name arg_field=$specification_\\0_field\
 arg_pclass=$specification_\\0_pclass arg_efield=$specification_\\0_efield arg_pfield=$specification_\\0_pfield\
 arg_up_fields=$specification_\\0_up_fields arg_up_values=$specification_\\0_up_values`}\
`,\
`@eq`(`'\\1`'`,`'move_up_and_down`'`)`&`@eq`(`'\$`'`,`$specification_\\0_dn_proc`)
`{`#move_up_and_down.spec.xrep section=down_procedure\
 class_name=$class_name module_name=$module_name arg_field=$specification_\\0_field\
 arg_pclass=$specification_\\0_pclass arg_efield=$specification_\\0_efield arg_pfield=$specification_\\0_pfield\
 arg_dn_fields=$specification_\\0_dn_fields arg_dn_values=$specification_\\0_dn_values`}\
`,\
`@eq`(`'\\1`'`,`'for_user_account_invitation`'`)`&`@eq`(`'\$`'`,`$specification_\\0_act_proc`)
`{`#for_user_account_invitation.spec.xrep section=act_procedure module_name=$module_name class_name=$class_name\
 arg_ufield=$specification_\\0_ufield arg_afield=$specification_\\0_afield`}\
`,\
`@eq`(`'\\1`'`,`'for_user_account_invitation`'`)`&`@eq`(`'\$`'`,`$specification_\\0_send_proc`)
`{`#for_user_account_invitation.spec.xrep section=send_procedure module_name=$module_name class_name=$class_name full_class_name=$full_class_name\
 arg_sfield=$specification_\\0_sfield arg_enum=$specification_\\0_enum arg_inactive=$specification_\\0_inactive\
 arg_needs_invitation=$specification_\\0_needs_invitation arg_sending_invitation=$specification_\\0_sending_invitation\
 arg_ufield=$specification_\\0_ufield arg_ofield=$specification_\\0_ofield arg_dfield=$specification_\\0_dfield\
 arg_actfield=$specification_\\0_actfield arg_mfield=$specification_\\0_mfield arg_efield=$specification_\\0_efield\
 arg_send_proc=$specification_\\0_send_proc`}\
`,\
`@eq`(`'\\1`'`,`'for_user_account_mark`'`)`&`@eq`(`'\$`'`,`$specification_\\0_mark_proc`)
`{`#for_user_account_mark.spec.xrep section=mark_procedure module_name=$module_name class_name=$class_name\
 arg_actions=$specification_\\0_actions arg_lsfield=$specification_\\0_lsfield arg_mark_proc=$specification_\\0_mark_proc\
 arg_mfield=$specification_\\0_mfield arg_owner=$specification_\\0_owner arg_pfield=$specification_\\0_pfield\
 arg_rfield=$specification_\\0_rfield arg_ufield=$specification_\\0_ufield arg_umchild=$specification_\\0_umchild arg_umclass=$specification_\\0_umclass`}\
`}`]`}
   // [<start \$_impl>]
`{`(`?`$user_source`)`#$user_source section=\$_impl`}\
   // [<finish \$_impl>]
}
`+\n`]`}
string `{`$full_class_name`}::impl::get_field_value( int field ) const
{
   string retval;

   switch( field )
   {
`{`?`$all_fields`[`$all_fields`%,`,\
      case \#:
      retval = to_string( impl_\0( ) );
      break;
`+\n`]`}
      default:
      throw runtime_error( "field #" + to_string( field ) + " is out of range" );
   }

   return retval;
}

void `{`$full_class_name`}::impl::set_field_value( int field, const string& value )
{
   switch( field )
   {
`{`?`$all_fields`[`$all_fields`%,`,\
      case \#:
      func_string_setter< `{`$full_class_name`}::impl, \1 >( *this, &`{`$full_class_name`}::impl::impl_\0, value );
      break;
`+\n`]`}
      default:
      throw runtime_error( "field #" + to_string( field ) + " is out of range" );
   }
}

uint64_t `{`$full_class_name`}::impl::get_state( ) const
{
   uint64_t state = 0;
`{`?`$all_get_state_specifications`[`$all_get_state_specifications`%,`,\
`{`@eq`(`'\1`'`,`'folder`'`)
`{`#folder.spec.xrep section=get_state name=\0`}\
`,\
`@eq`(`'\1`'`,`'modifier_date_notification`'`)
`{`#modifier_date_notification.spec.xrep section=get_state\
 arg_field=$specification_\0_field arg_modifier=$specification_\0_modifier\
 arg_period=$specification_\0_period arg_type=$specification_\0_type arg_annual=$specification_\0_annual`}\
`,\
`@eq`(`'\1`'`,`'modifier_field_null`'`)
`{`#modifier_field_null.spec.xrep section=get_state\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield arg_modifier=$specification_\0_modifier\
 arg_is_neg=$specification_\0_is_neg arg_not_dflt=$specification_\0_not_dflt\
 arg_tfield=$specification_\0_tfield arg_tpfield=$specification_\0_tpfield arg_tvalue=$specification_\0_tvalue`}\
`,\
`@eq`(`'\1`'`,`'modifier_field_value`'`)
`{`#modifier_field_value.spec.xrep section=get_state\
 arg_field=$specification_\0_field\
 arg_pfield=$specification_\0_pfield\
 arg_tfield=$specification_\0_tfield\
 arg_tpfield=$specification_\0_tpfield\
 arg_tvalue=$specification_\0_tvalue\
 arg_value=$specification_\0_value\
 arg_evalue=$specification_\0_evalue\
 arg_modifier=$specification_\0_modifier\
 arg_not_eq=$specification_\0_not_eq\
 arg_not_dflt=$specification_\0_not_dflt\
 arg_cvt_func=$specification_\0_cvt_func`}\
`,\
`@eq`(`'\1`'`,`'modifier_key_value`'`)
`{`#modifier_key_value.spec.xrep section=get_state\
 arg_modifier=$specification_\0_modifier arg_value=$specification_\0_value\
 arg_extra=$specification_\0_extra arg_not_eq=$specification_\0_not_eq`}\
`,\
`@eq`(`'\1`'`,`'modifier_past_date_time`'`)
`{`#modifier_past_date_time.spec.xrep section=get_state\
 arg_dfield=$specification_\0_dfield\
 arg_dfprim=$specification_\0_dfprim\
 arg_tfield=$specification_\0_tfield\
 arg_tvalue=$specification_\0_tvalue\
 arg_value=$specification_\0_value\
 arg_future=$specification_\0_future\
 arg_modifier=$specification_\0_modifier`}\
`,\
`@eq`(`'\1`'`,`'protect_equal`'`)
`{`#protect_equal.spec.xrep section=get_state\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield arg_label=$specification_\0_label\
 arg_value=$specification_\0_value arg_scope=$specification_\0_scope arg_changing=$specification_\0_changing`}\
`,\
`@eq`(`'\1`'`,`'protect_not_equal`'`)
`{`#protect_not_equal.spec.xrep section=get_state\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield arg_label=$specification_\0_label\
 arg_value=$specification_\0_value arg_scope=$specification_\0_scope arg_changing=$specification_\0_changing`}\
`,\
`@eq`(`'\1`'`,`'state_protect`'`)`{`;NOTE: This can be removed when modeller.exe is no longer used.`}
`{`#$specification_\0_spec_file section=get_state name=\0\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield arg_label=$specification_\0_label\
 arg_value=$specification_\0_spec_value arg_scope=$specification_\0_spec_scope arg_changing=$specification_\0_changing`}\
`,\
`@eq`(`'\1`'`,`'unactionable_field_value`'`)
`{`#unactionable_field_value.spec.xrep section=get_state\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield\
 arg_value=$specification_\0_value arg_evalue=$specification_\0_evalue arg_not_eq=$specification_\0_not_eq`}\
`}`]`}

   // [<start get_state>]
`{`(`?`$user_source`)`#$user_source section=get_state`}
   // [<finish get_state>]

   return state;
}

const string& `{`$full_class_name`}::impl::execute( const string& cmd_and_args )
{
`{`(`?`$parent_class`)\
   this->cmd_and_args = cmd_and_args;\
`}
   execute_command( cmd_and_args );
   return retval;
}

void `{`$full_class_name`}::impl::clear_foreign_key( const string& field )
{
   if( field.empty( ) )
      throw runtime_error( "unexpected empty field name/id" );
`{`[`$parent_fields`,\
   else if( field == c_field_id_\$ || field == c_field_name_\$ )
      impl_\$( "" );\
`+\n`]`}
`{`(`?`$parent_class`)\
   else
      p_obj->parent_class_type::clear_foreign_key( field );\
`,\
   else
      throw runtime_error( "unknown foreign key field '" + field + "'" );\
`}
}

void `{`$full_class_name`}::impl::set_foreign_key_value( const string& field, const string& value )
{
   if( field.empty( ) )
      throw runtime_error( "unexpected empty field name/id for value: " + value );
`{`[`$parent_fields`,\
   else if( field == c_field_id_\$ || field == c_field_name_\$ )
      v_\$ = value;\
`+\n`]`}
`{`(`?`$parent_class`)\
   else
      p_obj->parent_class_type::set_foreign_key_value( field, value );\
`,\
   else
      throw runtime_error( "unknown foreign key field '" + field + "'" );\
`}
}

const string& `{`$full_class_name`}::impl::get_foreign_key_value( const string& field )
{
   if( field.empty( ) )
      throw runtime_error( "unexpected empty field name/id" );
`{`[`$parent_fields`,\
   else if( field == c_field_id_\0 || field == c_field_name_\0 )
      return v_\0;\
`+\n`]`}
`{`(`?`$parent_class`)\
   else
      return p_obj->parent_class_type::get_foreign_key_value( field );\
`,\
   else
      throw runtime_error( "unknown foreign key field '" + field + "'" );\
`}
}

void `{`$full_class_name`}::impl::get_foreign_key_values( foreign_key_data_container& foreign_key_values ) const
{
`{`@eq`(`$parent_fields`,`'`'`)\
   ( void )foreign_key_values;\
`}
`{`[`$parent_fields`,\
   foreign_key_values.insert( foreign_key_data_value_type( c_field_id_\0, v_\0 ) );\
`+\n`]`}
}

void `{`$full_class_name`}::impl::clear( )
{`{`?`$all_fields`[`$all_fields`%,`,\
`{`?`$standard_fields`&`@in`(`'\0`'`,`$standard_fields`)
   v_\0 = gv_default_\0;\
`}`]`}
`{`?`$parent_fields`[`$parent_fields`,
   v_\$ = string( );
   if( cp_\$ )
      p_obj->setup_foreign_key( *cp_\$, v_\$ );\
`+\n`]`}
}

bool `{`$full_class_name`}::impl::value_will_be_provided( const string& field_name )
{
   ( void )field_name;
`{`?`$all_value_will_be_provided_specifications`[`$all_value_will_be_provided_specifications`%,`,\
`{`@eq`(`'\1`'`,`'audit_fields`'`)
`{`#audit_fields.spec.xrep section=value_will_be_provided module_name=$module_name\
 arg_cusrfield=$specification_\0_cusrfield arg_cdtmfield=$specification_\0_cdtmfield\
 arg_musrfield=$specification_\0_musrfield arg_mdtmfield=$specification_\0_mdtmfield`}\
`,\
`@eq`(`'\1`'`,`'default_from_key`'`)`&`@eq`(`$specification_\0_fmandatory`,`'1`'`)`&`@eq`(`$specification_\0_for_store`,`'true`'`)
`{`#default_from_key.spec.xrep section=value_will_be_provided class_name=$class_name arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'default_to_dtm`'`)
`{`#default_to_dtm.spec.xrep section=value_will_be_provided class_name=$class_name arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'default_to_field`'`)`&`@eq`(`$specification_\0_fmandatory`,`'1`'`)`&`@eq`(`$specification_\0_for_store`,`'true`'`)
`{`#default_to_field.spec.xrep section=value_will_be_provided class_name=$class_name arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'default_to_uid`'`)`&`@eq`(`$specification_\0_fmandatory`,`'1`'`)`&`@eq`(`$specification_\0_for_store`,`'true`'`)
`{`#default_to_uid.spec.xrep section=value_will_be_provided class_name=$class_name arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'field_from_field_addition`'`)`&`@eq`(`$specification_\0_fmandatory`,`'1`'`)`&`@eq`(`$specification_\0_for_store`,`'true`'`)
`{`#field_from_field_addition.spec.xrep section=value_will_be_provided class_name=$class_name\
 arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'parent_auto_int_inc`'`)`&`@eq`(`$specification_\0_fmandatory`,`'1`'`)
`{`#parent_auto_int_inc.spec.xrep section=value_will_be_provided module_name=$module_name\
 arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'for_user_account`'`)
`{`#for_user_account.spec.xrep section=value_will_be_provided class_name=$class_name\
 arg_ufield=$specification_\0_ufield arg_create_user=$specification_\0_create_user`}\
`}`]`}

   // [<start value_will_be_provided>]
`{`(`?`$user_source`)`#$user_source section=value_will_be_provided`}
   // [<finish value_will_be_provided>]

   return false;
}

void `{`$full_class_name`}::impl::validate( unsigned state, bool is_internal, validation_error_container* p_validation_errors )
{
   ( void )state;
   ( void )is_internal;

   if( !p_validation_errors )
      throw runtime_error( "unexpected null validation_errors container" );
`{`?`$mandatory_normal_fields`[`$mandatory_normal_fields`,
   if( is_null( v_\$ ) && !value_will_be_provided( c_field_name_\$ ) )
      p_validation_errors->insert( validation_error_value_type( c_field_name_\$,
       get_string_message( GS( c_str_field_must_not_be_empty ), make_pair(
       c_str_parm_field_must_not_be_empty_field, get_module_string( c_field_display_name_\$ ) ) ) ) );\
`+\n`]`}
`{`?`$mandatory_parent_fields`[`$mandatory_parent_fields`,
   if( v_\$.empty( ) && !value_will_be_provided( c_field_name_\$ ) )
      p_validation_errors->insert( validation_error_value_type( c_field_name_\$,
       get_string_message( GS( c_str_field_must_not_be_empty ), make_pair(
       c_str_parm_field_must_not_be_empty_field, get_module_string( c_field_display_name_\$ ) ) ) ) );\
`+\n`]`}
`{`(`?`$domain_fields`)
   string error_message;\
`}
`{`?`$domain_fields`[`$domain_fields`,\
   if( !is_null( v_\$ )
    && ( v_\$ != gv_default_\$
    || !value_will_be_provided( c_field_name_\$ ) )
    && !g_\$_domain.is_valid( v_\$, error_message = "`{`(`?`$domain_mask_\$`)`$domain_mask_\$`}" ) )
      p_validation_errors->insert( validation_error_value_type( c_field_name_\$,
       get_module_string( c_field_display_name_\$ ) + " " + error_message ) );\
`+\n\n`]`}
`{`?`$enum_fields`[`$enum_fields`%,`,
   if( !g_\1_enum.count( v_\0 ) )
      p_validation_errors->insert( validation_error_value_type( c_field_name_\0,
       get_string_message( GS( c_str_field_has_invalid_value ), make_pair(
       c_str_parm_field_has_invalid_value_field, get_module_string( c_field_display_name_\0 ) ) ) ) );\
`+\n`]`}
`{`?`$all_validate_specifications`[`$all_validate_specifications`%,`,\
`{`@eq`(`'\1`'`,`'acyclic`'`)
`{`#acyclic.spec.xrep section=validate class_name=$class_name full_class_name=$full_class_name arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'check_child_match_with_original`'`)
`{`#check_child_match_with_original.spec.xrep section=validate full_class_name=$full_class_name\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield arg_cfield=$specification_\0_cfield`}\
`,\
`@eq`(`'\1`'`,`'check_compare_fields`'`)
`{`#check_compare_fields.spec.xrep section=validate class_name=$class_name\
 arg_field=$specification_\0_field arg_tfield=$specification_\0_tfield\
 arg_tpfield=$specification_\0_tpfield arg_testop=$specification_\0_testop\
 arg_not_null=$specification_\0_not_null arg_not_pedit=$specification_\0_not_pedit`}\
`,\
`@eq`(`'\1`'`,`'check_cond_non_null`'`)
`{`#check_cond_non_null.spec.xrep section=validate class_name=$class_name\
 arg_field=$specification_\0_field arg_cfield=$specification_\0_cfield arg_pfield=$specification_\0_pfield\
 arg_tfield=$specification_\0_tfield arg_tpfield=$specification_\0_tpfield arg_tvalue=$specification_\0_tvalue\
 arg_is_neg=$specification_\0_is_neg arg_test_neq=$specification_\0_test_neq`}\
`,\
`@eq`(`'\1`'`,`'check_parent_fk_match`'`)
`{`#check_parent_fk_match.spec.xrep section=validate class_name=$class_name\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield arg_cfield=$specification_\0_cfield`}\
`,\
`@eq`(`'\1`'`,`'check_no_repeats`'`)
`{`#check_no_repeats.spec.xrep section=validate class_name=$class_name\
 arg_field_list=$specification_\0_field_list arg_skip_nulls=$specification_\0_skip_nulls`}\
`,\
`@eq`(`'\1`'`,`'check_null_match`'`)
`{`#check_null_match.spec.xrep section=validate class_name=$class_name\
 arg_field1=$specification_\0_field1 arg_field2=$specification_\0_field2`}\
`,\
`@eq`(`'\1`'`,`'check_null_or_gteq`'`)
`{`#check_null_or_gteq.spec.xrep section=validate class_name=$class_name\
 arg_field=$specification_\0_field arg_field2=$specification_\0_field2`}\
`,\
`@eq`(`'\1`'`,`'folder`'`)
`{`#folder.spec.xrep section=validate class_name=$class_name arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'meta_spec_field_type`'`)
`{`#meta_spec_field_type.spec.xrep section=validate class_name=$class_name\
 arg_mclass=$specification_\0_mclass arg_fclass=$specification_\0_fclass\
 arg_field=$specification_\0_field arg_cfield=$specification_\0_cfield\
 arg_mfield=$specification_\0_mfield arg_pfield=$specification_\0_pfield\
 arg_mpfield=$specification_\0_mpfield arg_mcrfield=$specification_\0_mcrfield\
 arg_mcrcfield=$specification_\0_mcrcfield arg_crmfield=$specification_\0_crmfield\
 arg_crpmfield=$specification_\0_crpmfield arg_crgpmfield=$specification_\0_crgpmfield\
 arg_prfield=$specification_\0_prfield arg_tvfield=$specification_\0_tvfield\
 arg_tpfield=$specification_\0_tpfield arg_tcfield=$specification_\0_tcfield\
 arg_sfield=$specification_\0_sfield arg_mtsfield=$specification_\0_mtsfield\
 arg_tfield=$specification_\0_tfield arg_mttfield=$specification_\0_mttfield\
 arg_spfield=$specification_\0_spfield arg_scfield=$specification_\0_scfield\
 arg_sftfield=$specification_\0_sftfield arg_efield=$specification_\0_efield\
 arg_procedure=$specification_\0_procedure arg_pafield=$specification_\0_pafield\
 arg_patfield=$specification_\0_patfield arg_pacfield=$specification_\0_pacfield\
 arg_uikey=$specification_\0_uikey arg_pwname=$specification_\0_pwname arg_pwname2=$specification_\0_pwname2\
 arg_pwvalue=$specification_\0_pwvalue arg_pwvalue2=$specification_\0_pwvalue2\
 arg_ugname=$specification_\0_ugname arg_ugvalue=$specification_\0_ugvalue`}\
`,\
`@eq`(`'\1`'`,`'modifier_field_required`'`)
`{`#modifier_field_required.spec.xrep section=validate class_name=$class_name\
 arg_field=$specification_\0_field arg_modifier=$specification_\0_modifier`}\
`}`]`}

   // [<start validate>]
`{`(`?`$user_source`)`#$user_source section=validate`}
   // [<finish validate>]
}

void `{`$full_class_name`}::impl::after_fetch( )
{
   set< string > required_transients;

   p_obj->get_required_field_names( required_transients, true );
`{`[`$parent_fields`,
   if( cp_\$ )
      p_obj->setup_foreign_key( *cp_\$, v_\$ );\
`+\n`]`}
`{`?`$all_after_fetch_specifications`[`$all_after_fetch_specifications`%,`,\
`{`@eq`(`'\1`'`,`'append_opts_for_iter`'`)
`{`#append_opts_for_iter.spec.xrep section=after_fetch class_name=$class_name module_name=$module_name\
 arg_cclass=$specification_\0_cclass arg_child=$specification_\0_child arg_field=$specification_\0_field\
 arg_ofield=$specification_\0_ofield arg_cfield=$specification_\0_cfield arg_separator=$specification_\0_separator`}\
`,\
`@eq`(`'\1`'`,`'default_for_clone`'`)
`{`#default_for_clone.spec.xrep section=after_fetch class_name=$class_name arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'field_from_acyclic_path`'`)
`{`#field_from_acyclic_path.spec.xrep section=after_fetch full_class_name=$full_class_name\
 arg_pfield=$specification_\0_pfield arg_src_field=$specification_\0_src_field\
 arg_dest_field=$specification_\0_dest_field arg_separator=$specification_\0_separator\
 arg_embed_links=$specification_\0_embed_links`}\
`,\
`@eq`(`'\1`'`,`'field_from_other_field`'`)`&`?`$transient_field_names`&`@in`(`$specification_\0_dfield`,`$transient_field_names`)
`{`#field_from_other_field.spec.xrep section=after_fetch class_name=$class_name module_name=$module_name\
 arg_sfield=$specification_\0_sfield arg_pfield=$specification_\0_pfield arg_dfield=$specification_\0_dfield\
 arg_tfield=$specification_\0_tfield arg_tpfield=$specification_\0_tpfield arg_tvalue=$specification_\0_tvalue\
 arg_chk_null=$specification_\0_chk_null arg_func=$specification_\0_func arg_create_only=$specification_\0_create_only\
 arg_mfunc=$specification_\0_mfunc arg_nvalue=$specification_\0_nvalue`}\
`,\
`@eq`(`'\1`'`,`'field_from_search_replace`'`)`&`@eq`(`$specification_\0_transient`,`'true`'`)
`{`#field_from_search_replace.spec.xrep section=after_fetch class_name=$class_name module_name=$module_name\
 arg_dfield=$specification_\0_dfield arg_sfield=$specification_\0_sfield\
 arg_cfield=$specification_\0_cfield arg_field_list=$specification_\0_field_list\
 arg_keyrep=$specification_\0_keyrep arg_separator=$specification_\0_separator arg_opt_prefix=$specification_\0_opt_prefix\
 arg_ofield=$specification_\0_ofield arg_oleftb=$specification_\0_oleftb arg_orightb=$specification_\0_orightb`}\
`,\
`@eq`(`'\1`'`,`'for_cms_gen`'`)
`{`#for_cms_gen.spec.xrep section=after_fetch full_class_name=$full_class_name\
 arg_pgcopy=$specification_\0_pgcopy arg_pgcanclone=$specification_\0_pgcanclone arg_pgctype=$specification_\0_pgctype`}\
`,\
`@eq`(`'\1`'`,`'meta_relationship_child_name`'`)
`{`#meta_relationship_child_name.spec.xrep section=after_fetch full_class_name=$full_class_name\
 arg_field=$specification_\0_field arg_sfield=$specification_\0_sfield\
 arg_pfield1=$specification_\0_pfield1 arg_pfield2=$specification_\0_pfield2\
 arg_pcfield1=$specification_\0_pcfield1 arg_pcfield2=$specification_\0_pcfield2`}\
`,\
`@eq`(`'\1`'`,`'transient_add_action_child_create_for_uid`'`)
`{`#transient_add_action_child_create_for_uid.spec.xrep section=after_fetch\
 arg_field=$specification_\0_field arg_sfield=$specification_\0_sfield\
 arg_child=$specification_\0_child arg_procedure=$specification_\0_procedure`}\
`,\
`@eq`(`'\1`'`,`'transient_event_overlap`'`)
`{`#transient_event_overlap.spec.xrep section=after_fetch full_class_name=$full_class_name\
 arg_class=$specification_\0_class arg_user=$specification_\0_user arg_group=$specification_\0_group\
 arg_field=$specification_\0_field arg_when=$specification_\0_when arg_duration=$specification_\0_duration\
 arg_finish=$specification_\0_finish`}\
`,\
`@eq`(`'\1`'`,`'transient_field_alias`'`)
`{`#transient_field_alias.spec.xrep section=after_fetch class_name=$class_name\
 arg_field=$specification_\0_field arg_sfield=$specification_\0_sfield\
 arg_scfield=$specification_\0_scfield arg_not_dflt=$specification_\0_not_dflt arg_def_value=$specification_\0_def_value`}\
`,\
`@eq`(`'\1`'`,`'transient_field_concat`'`)
`{`#transient_field_concat.spec.xrep section=after_fetch class_name=$class_name\
 arg_dfield=$specification_\0_dfield arg_field1=$specification_\0_field1 arg_field2=$specification_\0_field2\
 arg_cfield=$specification_\0_cfield arg_separator=$specification_\0_separator\
 arg_rfield=$specification_\0_rfield arg_reverse=$specification_\0_reverse arg_non_empty=$specification_\0_non_empty`}\
`,\
`@eq`(`'\1`'`,`'transient_field_from_field_addition`'`)
`{`#transient_field_from_field_addition.spec.xrep section=after_fetch class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field arg_sfield1=$specification_\0_sfield1 arg_sfield2=$specification_\0_sfield2`}\
`,\
`@eq`(`'\1`'`,`'transient_field_from_file`'`)
`{`#transient_field_from_file.spec.xrep section=after_fetch class_name=$class_name\
 arg_field=$specification_\0_field arg_sfield=$specification_\0_sfield arg_suffix=$specification_\0_suffix`}\
`,\
`@eq`(`'\1`'`,`'transient_fk_field`'`)
`{`#transient_fk_field.spec.xrep section=after_fetch class_name=$class_name\
 arg_dfield=$specification_\0_dfield arg_pfield=$specification_\0_pfield arg_cfield=$specification_\0_cfield`}\
`,\
`@eq`(`'\1`'`,`'transient_has_child`'`)
`{`#transient_has_child.spec.xrep section=after_fetch class_name=$class_name\
 arg_field=$specification_\0_field arg_value=$specification_\0_value arg_child=$specification_\0_child`}\
`,\
`@eq`(`'\1`'`,`'transient_permission_concat`'`)
`{`#transient_permission_concat.spec.xrep section=after_fetch class_name=$class_name\
 arg_field=$specification_\0_field arg_tfield=$specification_\0_tfield\
 arg_tvalue=$specification_\0_tvalue arg_perm=$specification_\0_perm`}\
`,\
`@eq`(`'\1`'`,`'transient_search_rep_from_child_vars`'`)
`{`#transient_search_rep_from_child_vars.spec.xrep section=after_fetch class_name=$class_name\
 arg_field=$specification_\0_field arg_varchild=$specification_\0_varchild arg_varname=$specification_\0_varname\
 arg_varvalue=$specification_\0_varvalue arg_lb=$specification_\0_lb arg_rb=$specification_\0_rb`}\
`,\
`@eq`(`'\1`'`,`'for_user_account`'`)
`{`#for_user_account.spec.xrep section=after_fetch class_name=$class_name\
 arg_owner=$specification_\0_owner arg_dfield=$specification_\0_dfield\
 arg_ufield=$specification_\0_ufield arg_display_name=$specification_\0_display_name`}\
`,\
`@eq`(`'\1`'`,`'for_user_account_invitation`'`)
`{`#for_user_account_invitation.spec.xrep section=after_fetch class_name=$class_name\
 arg_sfield=$specification_\0_sfield arg_actfield=$specification_\0_actfield arg_send_procedure=$specification_\0_send_proc\
 arg_act_procedure=$specification_\0_act_proc arg_enum=$specification_\0_enum arg_needs_invitation=$specification_\0_needs_invitation`}\
`,\
`@eq`(`'\1`'`,`'for_user_account_mark`'`)
`{`#for_user_account_mark.spec.xrep section=after_fetch module_name=$module_name class_name=$class_name\
 arg_actions=$specification_\0_actions arg_lsfield=$specification_\0_lsfield arg_mark_proc=$specification_\0_mark_proc\
 arg_mfield=$specification_\0_mfield arg_owner=$specification_\0_owner arg_pfield=$specification_\0_pfield\
 arg_rfield=$specification_\0_rfield arg_ufield=$specification_\0_ufield arg_umchild=$specification_\0_umchild arg_umclass=$specification_\0_umclass`}\
`}`]`}

   // [<start after_fetch>]
`{`(`?`$user_source`)`#$user_source section=after_fetch`}
   // [<finish after_fetch>]
}

void `{`$full_class_name`}::impl::finalise_fetch( )
{
   set< string > required_transients;

   p_obj->get_required_field_names( required_transients, true );
`{`?`$all_finalise_fetch_specifications`[`$all_finalise_fetch_specifications`%,`,\
`{`@eq`(`'\1`'`,`'field_from_procedure_call`'`)`&`@eq`(`$specification_\0_transient`,`'true`'`)
`{`#field_from_procedure_call.spec.xrep section=finalise_fetch class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field arg_procedure=$specification_\0_procedure arg_value=$specification_\0_value`}\
`}`]`}

   // [<start finalise_fetch>]
`{`(`?`$user_source`)`#$user_source section=finalise_fetch`}
   // [<finish finalise_fetch>]
}

void `{`$full_class_name`}::impl::at_create( )
{
`{`?`$all_at_create_specifications`[`$all_at_create_specifications`%,`,\
`{`@eq`(`'\1`'`,`'default_group_fk_for_user`'`)\
`{`#default_group_fk_for_user.spec.xrep section=at_create class_name=$class_name\
 arg_pfield=$specification_\0_pfield arg_ufield=$specification_\0_ufield arg_gfield=$specification_\0_gfield`}
`,\
`@eq`(`'\1`'`,`'file_attachment`'`)\
`{`#file_attachment.spec.xrep section=at_create arg_field=$specification_\0_field`}
`,\
`@eq`(`'\1`'`,`'fk_default`'`)\
`{`#fk_default.spec.xrep section=at_create arg_field=$specification_\0_field arg_value=$specification_\0_value`}
`}`]`}
   // [<start at_create>]
`{`(`?`$user_source`)`#$user_source section=at_create`}
   // [<finish at_create>]
}

void `{`$full_class_name`}::impl::to_store( bool is_create, bool is_internal )
{
   ( void )is_create;
   ( void )is_internal;

   uint64_t state = p_obj->get_state( );
   ( void )state;
`{`?`$all_to_store_specifications`[`$all_to_store_specifications`%,`,\
`{`@eq`(`'\1`'`,`'default_from_key`'`)`&`@eq`(`$specification_\0_for_store`,`'`'`)
`{`#default_from_key.spec.xrep section=to_or_for_store class_name=$class_name\
 arg_field=$specification_\0_field arg_func=$specification_\0_func\
 arg_chk_null=$specification_\0_chk_null arg_not_dflt=$specification_\0_not_dflt arg_append=$specification_\0_append\
 arg_inc_clones=$specification_\0_inc_clones arg_skip_fk_handling=$specification_\0_skip_fk_handling`}\
`,\
`@eq`(`'\1`'`,`'default_to_field`'`)`&`@eq`(`$specification_\0_for_store`,`'`'`)
`{`#default_to_field.spec.xrep section=to_or_for_store class_name=$class_name\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield arg_sfield=$specification_\0_sfield\
 arg_tpfield=$specification_\0_tpfield arg_tfield=$specification_\0_tfield arg_tvalue=$specification_\0_tvalue\
 arg_append=$specification_\0_append arg_not_dflt=$specification_\0_not_dflt arg_cvt_func=$specification_\0_cvt_func\
 arg_fistexttype=$specification_\0_fistexttype arg_inc_clones=$specification_\0_inc_clones`}\
`,\
`@eq`(`'\1`'`,`'default_to_uid`'`)`&`@eq`(`$specification_\0_for_store`,`'`'`)
`{`#default_to_uid.spec.xrep section=to_or_for_store class_name=$class_name arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'default_to_global`'`)
`{`#default_to_global.spec.xrep section=to_store\
 arg_field=$specification_\0_field arg_cfield=$specification_\0_cfield\
 arg_dflt_only=$specification_\0_dflt_only arg_value=$specification_\0_value\
 arg_tpfield=$specification_\0_tpfield arg_tfield=$specification_\0_tfield arg_tvalue=$specification_\0_tvalue`}\
`,\
`@eq`(`'\1`'`,`'field_clear`'`)`&`@eq`(`$specification_\0_for_store`,`'`'`)
`{`#field_clear.spec.xrep section=to_or_for_store class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field arg_sfield=$specification_\0_sfield arg_spfield=$specification_\0_spfield\
 arg_tfield=$specification_\0_tfield arg_is_neg=$specification_\0_is_neg`}\
`,\
`@eq`(`'\1`'`,`'field_clear_on_changed_fk`'`)
`{`#field_clear_on_changed_fk.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_pfield=$specification_\0_pfield arg_dfield=$specification_\0_dfield\
 arg_tfield=$specification_\0_tfield arg_tpfield=$specification_\0_tpfield arg_tvalue=$specification_\0_tvalue\
 arg_not_dflt=$specification_\0_not_dflt arg_not_create=$specification_\0_not_create`}\
`,\
`@eq`(`'\1`'`,`'field_cond_concatenate`'`)
`{`#field_cond_concatenate.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_src_field=$specification_\0_src_field arg_tvalue=$specification_\0_tvalue\
 arg_dest_field=$specification_\0_dest_field arg_dvalue=$specification_\0_dvalue`}\
`,\
`@eq`(`'\1`'`,`'field_empty_action`'`)
`{`#field_empty_action.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field arg_act_field=$specification_\0_act_field\
 arg_pfield=$specification_\0_pfield arg_nvalue=$specification_\0_nvalue arg_value=$specification_\0_value\
 arg_is_neg=$specification_\0_is_neg arg_create_only=$specification_\0_create_only arg_is_testval=$specification_\0_is_testval`}\
`,\
`@eq`(`'\1`'`,`'field_from_addition`'`)
`{`#field_from_addition.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_sfield=$specification_\0_sfield arg_dfield=$specification_\0_dfield\
 arg_dtype=$specification_\0_dtype arg_value=$specification_\0_value arg_not_dflt=$specification_\0_not_dflt`}\
`,\
`@eq`(`'\1`'`,`'field_from_changed_fk`'`)
`{`#field_from_changed_fk.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_pfield=$specification_\0_pfield arg_dfield=$specification_\0_dfield\
 arg_sfield=$specification_\0_sfield arg_new_only=$specification_\0_new_only arg_inc_dflt=$specification_\0_inc_dflt`}\
`,\
`@eq`(`'\1`'`,`'field_from_concatenation`'`)
`{`#field_from_concatenation.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_dfield=$specification_\0_dfield arg_field_list=$specification_\0_field_list arg_separator=$specification_\0_separator`}\
`,\
`@eq`(`'\1`'`,`'field_from_field_addition`'`)`&`@eq`(`$specification_\0_for_store`,`'`'`)
`{`#field_from_field_addition.spec.xrep section=to_or_for_store class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field arg_type=$specification_\0_type\
 arg_sfield1=$specification_\0_sfield1 arg_sfield2=$specification_\0_sfield2`}\
`,\
`@eq`(`'\1`'`,`'field_from_other_field`'`)`&`(`!`?`$transient_field_names`|`!`@in`(`$specification_\0_dfield`,`$transient_field_names`)`)
`{`#field_from_other_field.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_sfield=$specification_\0_sfield arg_pfield=$specification_\0_pfield arg_dfield=$specification_\0_dfield\
 arg_tfield=$specification_\0_tfield arg_tpfield=$specification_\0_tpfield arg_tvalue=$specification_\0_tvalue\
 arg_chk_null=$specification_\0_chk_null arg_func=$specification_\0_func arg_create_only=$specification_\0_create_only\
 arg_mfunc=$specification_\0_mfunc arg_nvalue=$specification_\0_nvalue`}\
`,\
`@eq`(`'\1`'`,`'field_from_procedure_call`'`)`&`@eq`(`$specification_\0_transient`,`'`'`)
`{`#field_from_procedure_call.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field arg_procedure=$specification_\0_procedure arg_value=$specification_\0_value`}\
`,\
`@eq`(`'\1`'`,`'field_from_search_replace`'`)`&`@eq`(`$specification_\0_transient`,`'`'`)
`{`#field_from_search_replace.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_dfield=$specification_\0_dfield arg_sfield=$specification_\0_sfield\
 arg_cfield=$specification_\0_cfield arg_field_list=$specification_\0_field_list\
 arg_keyrep=$specification_\0_keyrep arg_separator=$specification_\0_separator arg_opt_prefix=$specification_\0_opt_prefix\
 arg_ofield=$specification_\0_ofield arg_oleftb=$specification_\0_oleftb arg_orightb=$specification_\0_orightb`}\
`,\
`@eq`(`'\1`'`,`'field_values_from_graph_parent`'`)
`{`#field_values_from_graph_parent.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_pclass=$specification_\0_pclass arg_psfield=$specification_\0_psfield arg_field_info=$specification_\0_field_info`}\
`,\
`@eq`(`'\1`'`,`'fk_empty_action`'`)
`{`#fk_empty_action.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_act_field=$specification_\0_act_field\
 arg_fk_field=$specification_\0_fk_field arg_value=$specification_\0_value`}\
`,\
`@eq`(`'\1`'`,`'fk_link_first_child`'`)
`{`#fk_link_first_child.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield\
 arg_child_class=$specification_\0_child_class arg_child_field=$specification_\0_child_field\
 arg_order_field=$specification_\0_order_field arg_status_field=$specification_\0_status_field\
 arg_status_value=$specification_\0_status_value arg_new_only=$specification_\0_new_only\
 arg_reverse=$specification_\0_reverse arg_not_create=$specification_\0_not_create`}\
`,\
`@eq`(`'\1`'`,`'for_cms_gen`'`)
`{`#for_cms_gen.spec.xrep section=to_store class_name=$class_name\
 arg_pgctype=$specification_\0_pgctype arg_pgfname=$specification_\0_pgfname arg_pgparent=$specification_\0_pgparent\
 arg_pgactions=$specification_\0_pgactions arg_pgcopy=$specification_\0_pgcopy arg_pgcopyid=$specification_\0_pgcopyid`}\
`,\
`@eq`(`'\1`'`,`'meta_spec_field_type`'`)
`{`#meta_spec_field_type.spec.xrep section=to_store class_name=$class_name\
 arg_mclass=$specification_\0_mclass arg_fclass=$specification_\0_fclass\
 arg_field=$specification_\0_field arg_cfield=$specification_\0_cfield\
 arg_mfield=$specification_\0_mfield arg_pfield=$specification_\0_pfield\
 arg_tpfield=$specification_\0_tpfield arg_tvfield=$specification_\0_tvfield\
 arg_sfield=$specification_\0_sfield arg_mtsfield=$specification_\0_mtsfield\
 arg_tfield=$specification_\0_tfield arg_mttfield=$specification_\0_mttfield\
 arg_spfield=$specification_\0_spfield arg_scfield=$specification_\0_scfield\
 arg_sftfield=$specification_\0_sftfield arg_efield=$specification_\0_efield\
 arg_procedure=$specification_\0_procedure arg_pafield=$specification_\0_pafield\
 arg_patfield=$specification_\0_patfield arg_pacfield=$specification_\0_pacfield\
 arg_uikey=$specification_\0_uikey arg_pwname=$specification_\0_pwname arg_pwvalue=$specification_\0_pwvalue\
 arg_ugname=$specification_\0_ugname arg_ugvalue=$specification_\0_ugvalue`}\
`,\
`@eq`(`'\1`'`,`'meta_spec_field_pairs`'`)
`{`#meta_spec_field_pairs.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field arg_ofield=$specification_\0_ofield arg_child=$specification_\0_child\
 arg_sfield=$specification_\0_sfield arg_tvalue=$specification_\0_tvalue`}\
`,\
`@eq`(`'\1`'`,`'meta_spec_field_values`'`)
`{`#meta_spec_field_values.spec.xrep section=to_store class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field arg_rfield=$specification_\0_rfield arg_ofield=$specification_\0_ofield\
 arg_child=$specification_\0_child arg_sfield=$specification_\0_sfield arg_fkfield=$specification_\0_fkfield arg_tvalue=$specification_\0_tvalue`}\
`,\
`@eq`(`'\1`'`,`'modifier_set_field`'`)
`{`#modifier_set_field.spec.xrep section=to_store class_name=$class_name\
 arg_modifier=$specification_\0_modifier arg_field=$specification_\0_field\
 arg_value=$specification_\0_value arg_evalue=$specification_\0_evalue`}\
`}`]`}

   // [<start to_store>]
`{`(`?`$user_source`)`#$user_source section=to_store`}
   // [<finish to_store>]
}

void `{`$full_class_name`}::impl::for_store( bool is_create, bool is_internal )
{
   ( void )is_create;
   ( void )is_internal;
`{`?`$all_for_store_specifications`[`$all_for_store_specifications`%,`,\
`{`@eq`(`'\1`'`,`'audit_fields`'`)
`{`#audit_fields.spec.xrep section=for_store class_name=$class_name module_name=$module_name\
 arg_cusrfield=$specification_\0_cusrfield arg_cdtmfield=$specification_\0_cdtmfield\
 arg_musrfield=$specification_\0_musrfield arg_mdtmfield=$specification_\0_mdtmfield`}\
`,\
`@eq`(`'\1`'`,`'child_field_cascade`'`)
`{`#child_field_cascade.spec.xrep section=for_store class_name=$class_name module_name=$module_name\
 arg_child=$specification_\0_child arg_field_list=$specification_\0_field_list arg_testop=$specification_\0_testop\
 arg_tfield=$specification_\0_tfield arg_ctfield=$specification_\0_ctfield arg_check_orig=$specification_\0_check_orig`}\
`,\
`@eq`(`'\1`'`,`'child_field_change_cascade`'`)
`{`#child_field_change_cascade.spec.xrep section=for_store full_class_name=$full_class_name\
 arg_child=$specification_\0_child arg_field=$specification_\0_field\
 arg_cfield=$specification_\0_cfield arg_exact_match=$specification_\0_exact_match`}\
`,\
`@eq`(`'\1`'`,`'child_status_cascade`'`)
`{`#child_status_cascade.spec.xrep section=for_store class_name=$class_name module_name=$module_name\
 arg_status_value=$specification_\0_status_value\
 arg_child_class=$specification_\0_child_class arg_child_field=$specification_\0_child_field\
 arg_order_field=$specification_\0_order_field arg_special_field=$specification_\0_special_field\
 arg_special_cfield=$specification_\0_special_cfield arg_special_value=$specification_\0_special_value\
 arg_neq_status_field=$specification_\0_neq_status_field arg_neq_status_value=$specification_\0_neq_status_value`}\
`,\
`@eq`(`'\1`'`,`'default_from_key`'`)`&`@eq`(`$specification_\0_for_store`,`'true`'`)
`{`#default_from_key.spec.xrep section=to_or_for_store class_name=$class_name\
 arg_field=$specification_\0_field arg_func=$specification_\0_func\
 arg_chk_null=$specification_\0_chk_null arg_not_dflt=$specification_\0_not_dflt arg_append=$specification_\0_append\
 arg_inc_clones=$specification_\0_inc_clones arg_skip_fk_handling=$specification_\0_skip_fk_handling`}\
`,\
`@eq`(`'\1`'`,`'default_to_dtm`'`)
`{`#default_to_dtm.spec.xrep section=for_store class_name=$class_name arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'default_to_field`'`)`&`@eq`(`$specification_\0_for_store`,`'true`'`)
`{`#default_to_field.spec.xrep section=to_or_for_store class_name=$class_name\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield arg_sfield=$specification_\0_sfield\
 arg_tpfield=$specification_\0_tpfield arg_tfield=$specification_\0_tfield arg_tvalue=$specification_\0_tvalue\
 arg_append=$specification_\0_append arg_not_dflt=$specification_\0_not_dflt arg_cvt_func=$specification_\0_cvt_func\
 arg_fistexttype=$specification_\0_fistexttype arg_inc_clones=$specification_\0_inc_clones`}\
`,\
`@eq`(`'\1`'`,`'default_to_uid`'`)`&`@eq`(`$specification_\0_for_store`,`'true`'`)
`{`#default_to_uid.spec.xrep section=to_or_for_store class_name=$class_name arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'field_clear`'`)`&`@eq`(`$specification_\0_for_store`,`'true`'`)
`{`#field_clear.spec.xrep section=to_or_for_store class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field arg_sfield=$specification_\0_sfield arg_spfield=$specification_\0_spfield\
 arg_tfield=$specification_\0_tfield arg_is_neg=$specification_\0_is_neg`}\
`,\
`@eq`(`'\1`'`,`'field_from_field_addition`'`)`&`@eq`(`$specification_\0_for_store`,`'true`'`)
`{`#field_from_field_addition.spec.xrep section=to_or_for_store class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field arg_type=$specification_\0_type\
 arg_sfield1=$specification_\0_sfield1 arg_sfield2=$specification_\0_sfield2`}\
`,\
`@eq`(`'\1`'`,`'file_attachment`'`)`&`?`$specification_\0_sfield`&`!`@eq`(`$specification_\0_sfield`,`'`'`)
`{`#file_attachment.spec.xrep section=for_store arg_field=$specification_\0_field arg_sfield=$specification_\0_sfield`}\
`,\
`@eq`(`'\1`'`,`'file_content`'`)
`{`#file_content.spec.xrep section=for_store class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field arg_sfield=$specification_\0_sfield`}\
`,\
`@eq`(`'\1`'`,`'file_link`'`)
`{`#file_link.spec.xrep section=for_store class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field arg_field1=$specification_\0_field1\
 arg_field2=$specification_\0_field2 arg_pfield2=$specification_\0_pfield2 arg_ext=$specification_\0_ext`}\
`,\
`@eq`(`'\1`'`,`'for_cms_gen`'`)
`{`#for_cms_gen.spec.xrep section=for_store class_name=$class_name module_name=$module_name full_class_name=$full_class_name\
 arg_pgctype=$specification_\0_pgctype arg_pgfname=$specification_\0_pgfname arg_pgparent=$specification_\0_pgparent\
 arg_pgmeta=$specification_\0_pgmeta arg_pglink=$specification_\0_pglink arg_pggroup=$specification_\0_pggroup\
 arg_pglchild=$specification_\0_pglchild arg_plpage=$specification_\0_plpage arg_lclass=$specification_\0_lclass\
 arg_lgroup=$specification_\0_lgroup arg_lname=$specification_\0_lname`}\
`,\
`@eq`(`'\1`'`,`'meta_relationship_field`'`)
`{`#meta_relationship_field.spec.xrep section=for_store module_name=$module_name\
 arg_fclass=$specification_\0_fclass arg_mclass=$specification_\0_mclass arg_gclass=$specification_\0_gclass\
 arg_field_list=$specification_\0_field_list arg_tfield=$specification_\0_tfield\
 arg_xfield=$specification_\0_xfield arg_xsfield=$specification_\0_xsfield arg_ifield=$specification_\0_ifield\
 arg_idfield=$specification_\0_idfield arg_fidfield=$specification_\0_fidfield arg_keyfield=$specification_\0_keyfield`}\
`,\
`@eq`(`'\1`'`,`'parent_auto_int_inc`'`)
`{`#parent_auto_int_inc.spec.xrep section=for_store module_name=$module_name\
 arg_field=$specification_\0_field arg_pclass=$specification_\0_pclass arg_pfield=$specification_\0_pfield\
 arg_cfield=$specification_\0_cfield arg_static=$specification_\0_static arg_fmandatory=$specification_\0_fmandatory`}\
`,\
`@eq`(`'\1`'`,`'parent_field_from_other`'`)
`{`#parent_field_from_other.spec.xrep section=for_store module_name=$module_name\
 arg_pclass=$specification_\0_pclass arg_pfield=$specification_\0_pfield arg_dfield=$specification_\0_dfield\
 arg_sfield=$specification_\0_sfield arg_spfield=$specification_\0_spfield\
 arg_tfield=$specification_\0_tfield arg_test_value=$specification_\0_test_value`}\
`,\
`@eq`(`'\1`'`,`'prior_version`'`)
`{`#prior_version.spec.xrep section=for_store\
 class_name=$class_name full_class_name=$full_class_name module_name=$module_name\
 arg_pv_class=$specification_\0_pvclass\
 arg_ver_field=$specification_\0_ver_field\
 arg_field_list=$specification_\0_field_list\
 arg_major_only=$specification_\0_major_only\
 arg_dtm_field=$specification_\0_dtm_field\
 arg_dtm2_field=$specification_\0_dtm2_field\
 arg_uid_field=$specification_\0_uid_field\
 arg_uid2_field=$specification_\0_uid2_field\
 arg_file_field=$specification_\0_file_field\
 arg_test_field=$specification_\0_test_field\
 arg_test_value=$specification_\0_test_value\
 arg_test2_field=$specification_\0_test2_field\
 arg_test2_value=$specification_\0_test2_value\
 arg_task_class=$specification_\0_task_class\
 arg_task_pv_field=$specification_\0_task_pv_field\
 arg_parent_pv_field=$specification_\0_parent_pv_field`}\
`,\
`@eq`(`'\1`'`,`'total_child_field_in_parent`'`)`&`@eq`(`$specification_\0_after_self`,`'`'`)
`{`#total_child_field_in_parent.spec.xrep section=for_or_after_store class_name=$class_name module_name=$module_name\
 arg_nfield=$specification_\0_nfield arg_pfield=$specification_\0_pfield\
 arg_pnfield=$specification_\0_pnfield arg_pfkfield=$specification_\0_pfkfield`}\
`,\
`@eq`(`'\1`'`,`'update_parent`'`)`&`@eq`(`$specification_\0_after_store`,`'`'`)
`{`#update_parent.spec.xrep section=for_or_after_store class_name=$class_name module_name=$module_name\
 arg_fkfield=$specification_\0_fkfield arg_spfield=$specification_\0_spfield arg_value=$specification_\0_value`}\
`,\
`@eq`(`'\1`'`,`'for_user_account`'`)
`{`#for_user_account.spec.xrep section=for_store class_name=$class_name\
 arg_ufield=$specification_\0_ufield arg_create_user=$specification_\0_create_user\
 arg_user_template=$specification_\0_user_template arg_field_list=$specification_\0_field_list`}\
`,\
`@eq`(`'\1`'`,`'for_user_account_invitation`'`)
`{`#for_user_account_invitation.spec.xrep section=for_store class_name=$class_name\
 arg_cfield=$specification_\0_cfield arg_sfield=$specification_\0_sfield arg_ufield=$specification_\0_ufield\
 arg_afield=$specification_\0_afield arg_enum=$specification_\0_enum arg_inactive=$specification_\0_inactive\
 arg_needs_invitation=$specification_\0_needs_invitation`}\
`,\
`@eq`(`'\1`'`,`'for_user_account_user`'`)
`{`#for_user_account_user.spec.xrep section=for_store class_name=$class_name\
 arg_field=$specification_\0_field arg_child=$specification_\0_child arg_sfield=$specification_\0_sfield arg_active=$specification_\0_active\
 arg_active_label=$specification_\0_active_label arg_inactive=$specification_\0_inactive arg_inactive_label=$specification_\0_inactive_label`}\
`}`]`}

   // [<start for_store>]
`{`(`?`$user_source`)`#$user_source section=for_store`}
   // [<finish for_store>]
}

void `{`$full_class_name`}::impl::after_store( bool is_create, bool is_internal )
{
   ( void )is_create;
   ( void )is_internal;
`{`?`$all_after_store_specifications`[`$all_after_store_specifications`%,`,\
`{`@eq`(`'\1`'`,`'clone_children`'`)
`{`#clone_children.spec.xrep section=after_store full_class_name=$full_class_name\
 arg_cclass=$specification_\0_cclass arg_pfield=$specification_\0_pfield arg_ffield=$specification_\0_ffield\
 arg_tfield=$specification_\0_tfield arg_tvalue=$specification_\0_tvalue arg_not_eq=$specification_\0_not_eq`}\
`,\
`@eq`(`'\1`'`,`'clone_children_for_create`'`)
`{`#clone_children_for_create.spec.xrep section=after_store full_class_name=$full_class_name\
 arg_class=$specification_\0_class arg_pfield=$specification_\0_pfield arg_sfield=$specification_\0_sfield\
 arg_child=$specification_\0_child arg_gclass=$specification_\0_gclass arg_gchild=$specification_\0_gchild\
 arg_gpfield=$specification_\0_gpfield arg_vsfield=$specification_\0_vsfield arg_vdfield=$specification_\0_vdfield\
 arg_combine_keys=$specification_\0_combine_keys`}\
`,\
`@eq`(`'\1`'`,`'clone_children_for_update`'`)
`{`#clone_children_for_update.spec.xrep section=after_store full_class_name=$full_class_name\
 arg_pfield=$specification_\0_pfield arg_sfield=$specification_\0_sfield\
 arg_child=$specification_\0_child arg_xfield=$specification_\0_xfield`}\
`,\
`@eq`(`'\1`'`,`'clone_children_from_fk`'`)
`{`#clone_children_from_fk.spec.xrep section=after_store full_class_name=$full_class_name\
 arg_cclass=$specification_\0_cclass arg_pfield=$specification_\0_pfield\
 arg_fkfield=$specification_\0_fkfield arg_cpfield=$specification_\0_cpfield`}\
`,\
`@eq`(`'\1`'`,`'clone_default_for_group`'`)
`{`#clone_default_for_group.spec.xrep section=after_store full_class_name=$full_class_name\
 arg_cclass=$specification_\0_cclass arg_gfield=$specification_\0_gfield`}\
`,\
`@eq`(`'\1`'`,`'clone_default_group_children`'`)
`{`#clone_default_group_children.spec.xrep section=after_store module_name=$module_name full_class_name=$full_class_name\
 arg_cclass=$specification_\0_cclass arg_gfield=$specification_\0_gfield`}\
`,\
`@eq`(`'\1`'`,`'copy_child_links_from_fk`'`)
`{`#copy_child_links_from_fk.spec.xrep section=after_store class_name=$class_name\
 arg_cclass=$specification_\0_cclass arg_fkclass=$specification_\0_fkclass\
 arg_fkcclass=$specification_\0_fkcclass arg_fkcfield=$specification_\0_fkcfield\
 arg_field_list=$specification_\0_field_list arg_combine_keys=$specification_\0_combine_keys\
 arg_cfield=$specification_\0_cfield arg_cpfield=$specification_\0_cpfield\
 arg_cffield=$specification_\0_cffield arg_fkcffield=$specification_\0_fkcffield\
 arg_fk_from_child=$specification_\0_fk_from_child`}\
`,\
`@eq`(`'\1`'`,`'create_child`'`)
`{`#create_child.spec.xrep section=after_store full_class_name=$full_class_name\
 arg_cclass=$specification_\0_cclass arg_pfield=$specification_\0_pfield\
 arg_field=$specification_\0_field arg_value=$specification_\0_value\
 arg_nfield=$specification_\0_nfield arg_field_list=$specification_\0_field_list\
 arg_clone_field=$specification_\0_clone_field arg_create_only=$specification_\0_create_only\
 arg_key_suffix=$specification_\0_key_suffix`}\
`,\
`@eq`(`'\1`'`,`'create_children_for_fk_children`'`)
`{`#create_children_for_fk_children.spec.xrep section=after_store full_class_name=$full_class_name\
 arg_fkfield=$specification_\0_fkfield arg_fkcfield=$specification_\0_fkcfield\
 arg_cname=$specification_\0_cname arg_cfield=$specification_\0_cfield\
 arg_field_list=$specification_\0_field_list`}\
`,\
`@eq`(`'\1`'`,`'total_child_field_in_parent`'`)`&`@eq`(`$specification_\0_after_self`,`'true`'`)
`{`#total_child_field_in_parent.spec.xrep section=for_or_after_store class_name=$class_name module_name=$module_name\
 arg_nfield=$specification_\0_nfield arg_pfield=$specification_\0_pfield\
 arg_pnfield=$specification_\0_pnfield arg_pfkfield=$specification_\0_pfkfield`}\
`,\
`@eq`(`'\1`'`,`'trigger_clone_default_user_children`'`)
`{`#trigger_clone_default_user_children.spec.xrep section=after_store module_name=$module_name class_name=$class_name\
 arg_child=$specification_\0_child arg_ufield=$specification_\0_ufield arg_skip_clones=$specification_\0_skip_clones`}\
`,\
`@eq`(`'\1`'`,`'update_children`'`)
`{`#update_children.spec.xrep section=after_store full_class_name=$full_class_name\
 arg_child=$specification_\0_child arg_tfield=$specification_\0_tfield`}\
`,\
`@eq`(`'\1`'`,`'update_parent`'`)`&`@eq`(`$specification_\0_after_store`,`'true`'`)
`{`#update_parent.spec.xrep section=for_or_after_store class_name=$class_name module_name=$module_name\
 arg_fkfield=$specification_\0_fkfield arg_spfield=$specification_\0_spfield arg_value=$specification_\0_value`}\
`,\
`@eq`(`'\1`'`,`'update_parent_cascade`'`)
`{`#update_parent_cascade.spec.xrep section=after_store module_name=$module_name full_class_name=$full_class_name\
 arg_pclass=$specification_\0_pclass arg_pfield=$specification_\0_pfield arg_fkfield=$specification_\0_fkfield\
 arg_tvalue=$specification_\0_tvalue arg_grand_parent=$specification_\0_grand_parent`}\
`,\
`@eq`(`'\1`'`,`'for_user_account`'`)
`{`#for_user_account.spec.xrep section=after_store class_name=$class_name\
 arg_ufield=$specification_\0_ufield arg_user_account=$specification_\0_user_account`}\
`,\
`@eq`(`'\1`'`,`'for_user_account_mark`'`)
`{`#for_user_account_mark.spec.xrep section=after_store module_name=$module_name class_name=$class_name\
 arg_actions=$specification_\0_actions arg_lsfield=$specification_\0_lsfield arg_mark_proc=$specification_\0_mark_proc\
 arg_mfield=$specification_\0_mfield arg_owner=$specification_\0_owner arg_pfield=$specification_\0_pfield\
 arg_rfield=$specification_\0_rfield arg_ufield=$specification_\0_ufield arg_umchild=$specification_\0_umchild arg_umclass=$specification_\0_umclass`}\
`}`]`}

   // [<start after_store>]
`{`(`?`$user_source`)`#$user_source section=after_store`}
   // [<finish after_store>]
}

bool `{`$full_class_name`}::impl::can_destroy( bool is_internal )
{
   bool retval = is_internal || !( get_state( ) & c_state_undeletable );
`{`?`$all_can_destroy_specifications`[`$all_can_destroy_specifications`%,`,`{`@eq`(`'\1`'`,`'destroy_restrict`'`)
`{`#destroy_restrict.spec.xrep section=can_destroy\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield\
 arg_value=$specification_\0_value arg_allow_internal=$specification_\0_allow_internal`}`}\
`]`}

   // [<start can_destroy>]
`{`(`?`$user_source`)`#$user_source section=can_destroy`}
   // [<finish can_destroy>]

   return retval;
}

void `{`$full_class_name`}::impl::for_destroy( bool is_internal )
{
   ( void )is_internal;
`{`?`$all_for_destroy_specifications`[`$all_for_destroy_specifications`%,`,\
`{`@eq`(`'\1`'`,`'file_attachment`'`)
`{`#file_attachment.spec.xrep section=for_destroy arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'file_link`'`)
`{`#file_link.spec.xrep section=for_destroy class_name=$class_name module_name=$module_name\
 arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'for_cms_gen`'`)
`{`#for_cms_gen.spec.xrep section=for_destroy class_name=$class_name module_name=$module_name full_class_name=$full_class_name\
 arg_gbase=$specification_\0_gbase arg_gclass=$specification_\0_gclass\
 arg_pgfnamegen=$specification_\0_pgfnamegen arg_pfclass=$specification_\0_pfclass\
 arg_pfnamegen=$specification_\0_pfnamegen arg_pgparent=$specification_\0_pgparent\
 arg_pgctype=$specification_\0_pgctype arg_pglink=$specification_\0_pglink arg_pgolinks=$specification_\0_pgolinks`}\
`,\
`@eq`(`'\1`'`,`'meta_relationship_field`'`)
`{`#meta_relationship_field.spec.xrep section=for_destroy module_name=$module_name arg_fclass=$specification_\0_fclass`}\
`,\
`@eq`(`'\1`'`,`'total_child_field_in_parent`'`)`&`@eq`(`$specification_\0_after_self`,`'`'`)
`{`#total_child_field_in_parent.spec.xrep section=for_or_after_destroy class_name=$class_name module_name=$module_name\
 arg_nfield=$specification_\0_nfield arg_pfield=$specification_\0_pfield\
 arg_pnfield=$specification_\0_pnfield arg_pfkfield=$specification_\0_pfkfield`}\
`}`]`}

   // [<start for_destroy>]
`{`(`?`$user_source`)`#$user_source section=for_destroy`}
   // [<finish for_destroy>]
}

void `{`$full_class_name`}::impl::after_destroy( bool is_internal )
{
   ( void )is_internal;
`{`?`$all_after_destroy_specifications`[`$all_after_destroy_specifications`%,`,\
`{`@eq`(`'\1`'`,`'for_cms_gen`'`)
`{`#for_cms_gen.spec.xrep section=after_destroy class_name=$class_name module_name=$module_name\
 arg_pglink=$specification_\0_pglink arg_pgolinks=$specification_\0_pgolinks`}\
`,\
`@eq`(`'\1`'`,`'total_child_field_in_parent`'`)`&`@eq`(`$specification_\0_after_self`,`'true`'`)
`{`#total_child_field_in_parent.spec.xrep section=for_or_after_destroy class_name=$class_name module_name=$module_name\
 arg_nfield=$specification_\0_nfield arg_pfield=$specification_\0_pfield\
 arg_pnfield=$specification_\0_pnfield arg_pfkfield=$specification_\0_pfkfield`}\
`,\
`@eq`(`'\1`'`,`'update_parent_cascade`'`)
`{`#update_parent_cascade.spec.xrep section=after_destroy module_name=$module_name full_class_name=$full_class_name\
 arg_pclass=$specification_\0_pclass arg_pfield=$specification_\0_pfield arg_fkfield=$specification_\0_fkfield\
 arg_tvalue=$specification_\0_tvalue arg_grand_parent=$specification_\0_grand_parent`}\
`}`]`}

   // [<start after_destroy>]
`{`(`?`$user_source`)`#$user_source section=after_destroy`}
   // [<finish after_destroy>]
}

void `{`$full_class_name`}::impl::set_default_values( )
{
   clear( );
}

bool `{`$full_class_name`}::impl::is_filtered( const set< string >& filters ) const
{
   ( void )filters;
`{`?`$all_is_filtered_specifications`[`$all_is_filtered_specifications`%,`,\
`{`@eq`(`'\1`'`,`'filter`'`)
`{`#$specification_\0_spec_file section=is_filtered arg_name=\0 arg_id=$specification_\0_id\
 arg_field=$specification_\0_field arg_value=$specification_\0_spec_value`}\
`,\
`@eq`(`'\1`'`,`'non_uid_filter`'`)
`{`#non_uid_filter.spec.xrep section=is_filtered\
 class_name=$class_name module_name=$module_name\
 arg_pclass=$specification_\0_pclass arg_cfield=$specification_\0_cfield`}\
`,\
`@eq`(`'\1`'`,`'prior_version_filter`'`)
`{`#prior_version_filter.spec.xrep section=is_filtered\
 class_name=$class_name module_name=$module_name arg_id=$specification_\0_id\
 arg_ver_field=$specification_\0_ver_field arg_sclass=$specification_\0_sclass\
 arg_sfclass=$specification_\0_sfclass arg_sfvalue=$specification_\0_sfvalue`}\
`}`]`}

   // [<start is_filtered>]
`{`(`?`$user_source`)`#$user_source section=is_filtered`}
   // [<finish is_filtered>]

   return false;
}

`{`(`?`$use_transform`)
void `{`$full_class_name`}::impl::transform( read_stream& rs, int32_t version )
{
   if( version <= 0 || version > c_version )
      throw runtime_error( "unexpected version number #" + to_string( version ) );

   // [<start transform>]
`{`(`?`$user_source`)`#$user_source section=transform`}
   // [<finish transform>]

   p_obj->set_version( c_version );
}
`}
#undef MODULE_TRACE
#define MODULE_TRACE( x ) trace( x )

`{`$full_class_name`}::`{`$full_class_name`}( )
{
   set_version( c_version );

   p_impl = new impl( *this );
}

`{`$full_class_name`}::~`{`$full_class_name`}( )
{
`{`(`!`?`$parent_class`)\
   cleanup( );\
`}
   delete p_impl;
}
`{`?`$all_fields`[`$all_fields`%,`,\
`{`?`$basic_fields`&`@in`(`'\0`'`,`$basic_fields`)
\1 `{`$full_class_name`}::\0( ) const
{
   return p_impl->impl_\0( );
}

void `{`$full_class_name`}::\0( \1 \0 )
{
   p_impl->impl_\0( \0 );
}
`}\
`{`?`$complex_fields`&`@in`(`'\0`'`,`$complex_fields`)
const \1& `{`$full_class_name`}::\0( ) const
{
   return p_impl->impl_\0( );
}

void `{`$full_class_name`}::\0( const \1& \0 )
{
   p_impl->impl_\0( \0 );
}
`}\
`]`}`{`?`$all_fields`[`$all_fields`%,`,\
`{`@in`(`'\0`'`,`$parent_fields`)\

\1& `{`$full_class_name`}::\0( )
{
   return p_impl->impl_\0( );
}

const \1& `{`$full_class_name`}::\0( ) const
{
   return p_impl->impl_\0( );
}

void `{`$full_class_name`}::\0( const string& key )
{
   p_impl->impl_\0( key );
}
`}`]`}
`{`?`$child_info`[`$child_info`,\
\1& `{`$full_class_name`}::\0( )
{
   return p_impl->impl_\0( );
}

const \1& `{`$full_class_name`}::\0( ) const
{
   return p_impl->impl_\0( );
}`+\n\n`]
`}
`{`?`$all_procedures`[`$all_procedures`,\
void `{`$full_class_name`}::\$( \
`{`?`$\$_all_args`[`$\$_all_args`%,`,\
`{`@in`(`'\\0`'`,`$\$_all_simple_inputs`)\\1 \\0`}\
`{`@in`(`'\\0`'`,`$\$_all_complex_inputs`)const \\1& \\0`}\
`{`@in`(`'\\0`'`,`$\$_all_non_inputs`)\\1& \\0`}\
`+, `] `})
{
   p_impl->impl_\$( `{`?`$\$_all_args`[`$\$_all_args`%,`,\\0`+, `] `});
}`+\n\n`]
`}
string `{`$full_class_name`}::get_field_value( int field ) const
{
`{`!`(`?`$parent_class`)\
   return p_impl->get_field_value( field );\
`,\
   int num_parent_fields( parent_class_type::get_num_fields( ) );

   if( field < num_parent_fields )
      return parent_class_type::get_field_value( field );
   else
      return p_impl->get_field_value( field - num_parent_fields );\
`}
}

void `{`$full_class_name`}::set_field_value( int field, const string& value )
{
`{`!`(`?`$parent_class`)\
   p_impl->set_field_value( field, value );\
`,\
   int num_parent_fields( parent_class_type::get_num_fields( ) );

   if( field < num_parent_fields )
      parent_class_type::set_field_value( field, value );
   else
      p_impl->set_field_value( field - num_parent_fields, value );\
`}
}

bool `{`$full_class_name`}::is_field_transient( int field ) const
{
`{`!`(`?`$parent_class`)\
   return static_is_field_transient( ( field_id )( field + 1 ) );\
`,\
   int num_parent_fields( parent_class_type::get_num_fields( ) );

   if( field < num_parent_fields )
      return parent_class_type::is_field_transient( field );
   else
      return static_is_field_transient( ( field_id )( field - num_parent_fields + 1 ) );\
`}
}

string `{`$full_class_name`}::get_field_name( int field ) const
{
`{`!`(`?`$parent_class`)\
   return static_get_field_name( ( field_id )( field + 1 ) );\
`,\
   int num_parent_fields( parent_class_type::get_num_fields( ) );

   if( field < num_parent_fields )
      return parent_class_type::get_field_name( field );
   else
      return static_get_field_name( ( field_id )( field - num_parent_fields + 1 ) );\
`}
}

int `{`$full_class_name`}::get_field_num( const string& field ) const
{
   int rc = static_get_field_num( field );

   if( rc < 0 )
      throw runtime_error( "unknown field name/id '" + field + "' in get_field_num( )" );

   return rc;
}

bool `{`$full_class_name`}::has_field_changed( const string& field ) const
{
   return class_base::has_field_changed( get_field_num( field ) );
}

uint64_t `{`$full_class_name`}::get_state( ) const
{
   uint64_t state = 0;

`{`(`?`$parent_class`)\
   state |= parent_class_type::get_state( );\
`}
   state |= p_impl->get_state( );

   return state;
}

const string& `{`$full_class_name`}::execute( const string& cmd_and_args )
{
   return p_impl->execute( cmd_and_args );
}

void `{`$full_class_name`}::clear( )
{
`{`(`?`$parent_class`)\
   parent_class_type::clear( );\
`}
   p_impl->clear( );
}

void `{`$full_class_name`}::validate( unsigned state, bool is_internal )
{
`{`(`?`$parent_class`)\
   parent_class_type::validate( state, is_internal );\
`}
   p_impl->validate( state, is_internal, &validation_errors );
}

void `{`$full_class_name`}::after_fetch( )
{
`{`(`?`$parent_class`)\
   parent_class_type::after_fetch( );\
`}
   p_impl->after_fetch( );
}

void `{`$full_class_name`}::finalise_fetch( )
{
`{`(`?`$parent_class`)\
   parent_class_type::finalise_fetch( );\
`}
   p_impl->finalise_fetch( );
}

void `{`$full_class_name`}::at_create( )
{
`{`(`?`$parent_class`)\
   parent_class_type::at_create( );\
`}
   p_impl->at_create( );
}

void `{`$full_class_name`}::to_store( bool is_create, bool is_internal )
{
`{`(`?`$parent_class`)\
   parent_class_type::to_store( is_create, is_internal );\
`}
   p_impl->to_store( is_create, is_internal );
}

void `{`$full_class_name`}::for_store( bool is_create, bool is_internal )
{
`{`(`?`$parent_class`)\
   parent_class_type::for_store( is_create, is_internal );\
`}
   p_impl->for_store( is_create, is_internal );
}

void `{`$full_class_name`}::after_store( bool is_create, bool is_internal )
{
`{`(`?`$parent_class`)\
   parent_class_type::after_store( is_create, is_internal );\
`}
   p_impl->after_store( is_create, is_internal );
}

bool `{`$full_class_name`}::can_destroy( bool is_internal )
{
`{`(`?`$parent_class`)\
   if( !parent_class_type::can_destroy( is_internal ) )
      return false;\
`}
   return p_impl->can_destroy( is_internal );
}

void `{`$full_class_name`}::for_destroy( bool is_internal )
{
   p_impl->for_destroy( is_internal );
`{`(`?`$parent_class`)\
   parent_class_type::for_destroy( is_internal );\
`}
}

void `{`$full_class_name`}::after_destroy( bool is_internal )
{
   p_impl->after_destroy( is_internal );
`{`(`?`$parent_class`)\
   parent_class_type::after_destroy( is_internal );\
`}
}

void `{`$full_class_name`}::set_default_values( )
{
`{`(`?`$parent_class`)\
   parent_class_type::set_default_values( );\
`}
   p_impl->set_default_values( );
}

bool `{`$full_class_name`}::is_filtered( const set< string >& filters ) const
{
`{`(`?`$parent_class`)\
   if( parent_class_type::is_filtered( filters ) )
      return true;\
`}
   return p_impl->is_filtered( filters );
}

const char* `{`$full_class_name`}::get_field_id(
 const string& name, bool* p_sql_numeric, string* p_type_name ) const
{
`{`(`?`$parent_class`)\
   const char* p_id( parent_class_type::get_field_id( name, p_sql_numeric, p_type_name ) );
   if( p_id )
      return p_id;\
`,\
   const char* p_id( 0 );\
`}

   if( name.empty( ) )
      throw runtime_error( "unexpected empty field name for get_field_id" );
`{`?`$all_fields`[`$all_fields`%,`,\
   else if( name == c_field_name_\0 )
   {
      p_id = c_field_id_\0;

      if( p_type_name )
         *p_type_name = "\1";

      if( p_sql_numeric )
         *p_sql_numeric = `{`?`$sql_numeric_fields`&`@in`(`'\0`'`,`$sql_numeric_fields`)true`,false`};
   }\
`+\n`]`}

   return p_id;
}

const char* `{`$full_class_name`}::get_field_name(
 const string& id, bool* p_sql_numeric, string* p_type_name ) const
{
`{`(`?`$parent_class`)\
   const char* p_name( parent_class_type::get_field_name( id, p_sql_numeric, p_type_name ) );

   if( p_name )
      return p_name;\
`,\
   const char* p_name( 0 );\
`}

   if( id.empty( ) )
      throw runtime_error( "unexpected empty field id for get_field_name" );
`{`?`$all_fields`[`$all_fields`%,`,\
   else if( id == c_field_id_\0 )
   {
      p_name = c_field_name_\0;

      if( p_type_name )
         *p_type_name = "\1";

      if( p_sql_numeric )
         *p_sql_numeric = `{`?`$sql_numeric_fields`&`@in`(`'\0`'`,`$sql_numeric_fields`)true`,false`};
   }\
`+\n`]`}

   return p_name;
}

string `{`$full_class_name`}::get_field_display_name( const string& id ) const
{
`{`(`?`$parent_class`)\
   string display_name( parent_class_type::get_field_display_name( id ) );
   if( !display_name.empty( ) )
      return display_name;\
`,\
   string display_name;\
`}

   if( id.empty( ) )
      throw runtime_error( "unexpected empty field id for get_field_display_name" );
`{`?`$all_fields`[`$all_fields`%,`,\
   else if( id == c_field_id_\0 )
      display_name = get_module_string( c_field_display_name_\0 );\
`+\n`]`}

   return display_name;
}

void `{`$full_class_name`}::clear_foreign_key( const string& field )
{
`{`(`?`$parent_class`)\
   if( has_field( field ) )
      p_impl->clear_foreign_key( field );
   else
      parent_class_type::clear_foreign_key( field );\
`,\
   p_impl->clear_foreign_key( field );\
`}
}

void `{`$full_class_name`}::set_foreign_key_value( const string& field, const string& value )
{
`{`(`?`$parent_class`)\
   if( has_field( field ) )
      p_impl->set_foreign_key_value( field, value );
   else
      parent_class_type::set_foreign_key_value( field, value );\
`,\
   p_impl->set_foreign_key_value( field, value );\
`}
}

const string& `{`$full_class_name`}::get_foreign_key_value( const string& field )
{
`{`(`?`$parent_class`)\
   if( has_field( field ) )
      return p_impl->get_foreign_key_value( field );
   else
      return parent_class_type::get_foreign_key_value( field );\
`,\
   return p_impl->get_foreign_key_value( field );\
`}
}

void `{`$full_class_name`}::get_foreign_key_values( foreign_key_data_container& foreign_key_values ) const
{
`{`(`?`$parent_class`)\
   parent_class_type::get_foreign_key_values( foreign_key_values );\
`}
   p_impl->get_foreign_key_values( foreign_key_values );
}
`{`?`$parent_types`[`$parent_types`,
void `{`$full_class_name`}::setup_foreign_key( \$& o, const string& value )
{
   static_cast< \$& >( o ).set_key( value );
}`+\n`]`}
`{`?`$child_types`[`$child_types`,
void `{`$full_class_name`}::setup_graph_parent( \$& o, const string& foreign_key_field )
{
   static_cast< \$& >( o ).set_graph_parent( this, foreign_key_field );
}`+\n`]`}
`{`?`$parent_types`[`$parent_types`,
void `{`$full_class_name`}::setup_graph_parent(
 \$& o, const string& foreign_key_field, const string& init_value )
{
   static_cast< \$& >( o ).set_graph_parent( this, foreign_key_field, true );
   static_cast< \$& >( o ).set_key( init_value );
}`+\n`]`}

size_t `{`$full_class_name`}::get_total_child_relationships( ) const
{
   return p_impl->total_child_relationships;
}

void `{`$full_class_name`}::set_total_child_relationships( size_t new_total_child_relationships ) const
{
   p_impl->total_child_relationships = new_total_child_relationships;
}

size_t `{`$full_class_name`}::get_num_foreign_key_children( bool is_internal ) const
{
`{`(`?`$parent_class`)\
   size_t rc;
   if( is_internal )
      rc = `{`(`?`$child_info`)`{`@count`(`$child_info`)`}`,0`};
   else
      rc = `{`$parent_class`}::get_num_foreign_key_children( )`{`!`@eq`(`$is_alias`,`'true`'`)`&`(`?`$child_info`) + `{`@count`(`$child_info`)`}`};
`,\
   size_t rc = `{`!`(`?`$child_info`)0`,`{`@count`(`$child_info`)`}`};
`}
   if( !is_internal )
   {
      g_external_aliases_lookup.clear( );

      for( external_aliases_const_iterator
       eaci = g_external_aliases.begin( ), end = g_external_aliases.end( ); eaci != end; ++eaci )
      {
         size_t num_extra = eaci->second->get_num_foreign_key_children( true );

         if( num_extra )
         {
            eaci->second->set_key( get_key( ) );
            eaci->second->copy_all_field_values( *this );

            g_external_aliases_lookup.insert( make_pair( rc, eaci->second ) );

            rc += num_extra;
         }
      }
   }

   set_total_child_relationships( rc );

   return rc;
}

class_base* `{`$full_class_name`}::get_next_foreign_key_child(
 size_t child_num, string& next_child_field, cascade_op op, bool is_internal )
{
   class_base* p_class_base = 0;

`{`!`(`?`$child_info`)\
`{`(`?`$parent_class`)\
   p_class_base = `{`$parent_class`}::get_next_foreign_key_child( child_num, next_child_field, op );\
`,\
   ( void )child_num;
   ( void )next_child_field;
   ( void )op;\
`}`,\
`{`(`?`$parent_class`)\
   size_t num_parent_children = is_internal ? 0 : `{`$parent_class`}::get_total_child_relationships( );

   if( child_num < num_parent_children )
      p_class_base = `{`$parent_class`}::get_next_foreign_key_child( child_num, next_child_field, op );
   else
   {
      if( child_num >= num_parent_children + `{`@count`(`$child_info`)`} )
      {
         external_aliases_lookup_const_iterator ealci = g_external_aliases_lookup.lower_bound( child_num );
         if( ealci == g_external_aliases_lookup.end( ) || ealci->first > child_num )
            --ealci;

         p_class_base = ealci->second->get_next_foreign_key_child( child_num - ealci->first, next_child_field, op, true );
      }
      else
      {
         switch( child_num - num_parent_children )
         {
`{`[`$child_info`%,`,\
            case \\\\#:
            if( op == e_cascade_op_\\\\4 )
            {
               next_child_field = "\\\\3";
               p_class_base = &\\\\0( );
            }
            break;\
`+\n\n`]`}
         }
      }
   }\
`,\
   if( child_num >= `{`@count`(`$child_info`)`} )
   {
      external_aliases_lookup_const_iterator ealci = g_external_aliases_lookup.lower_bound( child_num );
      if( ealci == g_external_aliases_lookup.end( ) || ealci->first > child_num )
         --ealci;

      p_class_base = ealci->second->get_next_foreign_key_child( child_num - ealci->first, next_child_field, op, true );
   }
   else
   {
      switch( child_num )
      {
`{`[`$child_info`%,`,\
         case \\\\#:
         if( op == e_cascade_op_\\\\4 )
         {
            next_child_field = "\\\\3";
            p_class_base = &\\\\0( );
         }
         break;\
`+\n\n`]`}
      }
   }\
`}`}

   return p_class_base;
}

const char* `{`$full_class_name`}::class_id( ) const
{
`{`@eq`(`$is_alias`,`'true`'`)\
   return parent_class_type::class_id( );\
`,\
   return static_class_id( );\
`}
}

const char* `{`$full_class_name`}::class_name( ) const
{
   return static_class_name( );
}

const char* `{`$full_class_name`}::plural_name( ) const
{
   return static_plural_name( );
}

const char* `{`$full_class_name`}::module_id( ) const
{
`{`@eq`(`$is_alias`,`'true`'`)\
   return parent_class_type::module_id( );\
`,\
   return static_module_id( );\
`}
}

const char* `{`$full_class_name`}::module_name( ) const
{
`{`@eq`(`$is_alias`,`'true`'`)\
   return parent_class_type::module_name( );\
`,\
   return static_module_name( );\
`}
}
`{`(`?`$fixed_key`)
const string& `{`$full_class_name`}::get_fixed_key( ) const
{
   return c_fixed_key_value;
}\
`}

string `{`$full_class_name`}::get_display_name( bool plural ) const
{
   string key( plural ? "plural_" : "class_" );
   key += "`{`@lower`(`$class_name`)`}";

   return get_module_string( key );
}

bool `{`$full_class_name`}::get_is_alias( ) const
{
`{`@eq`(`$is_alias`,`'true`'`)\
   return true;\
`,\
   return false;\
`}
}

void `{`$full_class_name`}::get_alias_base_info( pair< string, string >& alias_base_info ) const
{
`{`@eq`(`$is_alias`,`'true`'`)\
   alias_base_info = make_pair( `{`$parent_class`}::class_id( ), `{`$parent_class`}::class_name( ) );\
`,\
   ( void )alias_base_info;\
`}
}

void `{`$full_class_name`}::get_base_class_info( vector< pair< string, string > >& base_class_info ) const
{
`{`?`$parent_class`&`!`@eq`(`$is_alias`,`'true`'`)\
   `{`$parent_class`}::get_base_class_info( base_class_info );

   base_class_info.push_back( make_pair( `{`$parent_class`}::class_id( ), `{`$parent_class`}::class_name( ) ) );\
`,\
   ( void )base_class_info;\
`}
}

class_base& `{`$full_class_name`}::get_or_create_graph_child( const string& context )
{
   class_base* p_class_base( 0 );

   string::size_type pos = context.find( '.' );
   string sub_context( context.substr( 0, pos ) );

   if( sub_context.empty( ) )
      throw runtime_error( "unexpected empty sub-context" );
`{`?`$child_info`[`$child_info`%,`,`{`;KLUDGE: Compiler limits (for VC++) require the block depth to be <= 100`}\
   `{`!`@eq`(`'\#`'`,`'100`'`)`&`!`@eq`(`'\#`'`,`'200`'`)`&`!`@eq`(`'\#`'`,`'300`'`)else `}if( sub_context == "_\3" || sub_context == "\0" )
      p_class_base = &\0( );\
`+\n`]`}
`{`[`$parent_fields`,\
   else if( sub_context == c_field_id_\$ || sub_context == c_field_name_\$ )
      p_class_base = &\$( );\
`+\n`]`}`{`(`?`$parent_class`)\
   else
      return parent_class_type::get_or_create_graph_child( context );\
`}

   if( !p_class_base )
      throw runtime_error( "unknown sub-context '" + sub_context + "'" );

   if( pos != string::npos )
      p_class_base = &p_class_base->get_or_create_graph_child( context.substr( pos + 1 ) );

   return *p_class_base;
}

void `{`$full_class_name`}::get_sql_column_names(
 vector< string >& names, bool* p_done, const string* p_class_name ) const
{
`{`(`?`$parent_class`)\
   parent_class_type::get_sql_column_names( names, p_done, p_class_name );
`,\
`{`!`(`?`$all_fields`)\
   ( void )names;
`}`}
   if( p_done && *p_done )
      return;
`{`(`?`$non_transient_fields`)\n`}`{`?`$non_transient_fields`[`$non_transient_fields`%,`,\
   names.push_back( "C_\0" );\
`+\n`]`}

   if( p_done && p_class_name && *p_class_name == static_class_name( ) )
      *p_done = true;
}

void `{`$full_class_name`}::get_sql_column_values(
 vector< string >& values, bool* p_done, const string* p_class_name ) const
{
`{`(`?`$parent_class`)\
   parent_class_type::get_sql_column_values( values, p_done, p_class_name );
`,\
`{`!`(`?`$non_transient_fields`)\
   ( void )values;
`}`}
   if( p_done && *p_done )
      return;
`{`(`?`$non_transient_fields`)\n`}`{`?`$non_transient_fields`[`$non_transient_fields`%,`,\
`{`?`$sql_numeric_fields`&`@in`(`'\0`'`,`$sql_numeric_fields`)\
   values.push_back( to_string( \0( ) ) );\
`,\
   values.push_back( sql_quote( to_string( \0( ) ) ) );\
`}`+\n`]`}

   if( p_done && p_class_name && *p_class_name == static_class_name( ) )
      *p_done = true;
}

void `{`$full_class_name`}::get_required_field_names(
 set< string >& names, bool required_transients, set< string >* p_dependents ) const
{
   set< string > local_dependents;
`{`(`?`$parent_class`)
   parent_class_type::get_required_field_names( names,
    required_transients, p_dependents ? p_dependents : &local_dependents );
`}
   set< string >& dependents( p_dependents ? *p_dependents : local_dependents );

   get_always_required_field_names( names, required_transients, dependents );
`{`?`$all_get_required_field_names_specifications`[`$all_get_required_field_names_specifications`%,`,\
`{`@eq`(`'\1`'`,`'field_dependency`'`)
`{`#field_dependency.spec.xrep section=get_required_field_names full_class_name=$full_class_name\
 arg_field=$specification_\0_field arg_sfield=$specification_\0_sfield`}\
`,\
`@eq`(`'\1`'`,`'field_from_acyclic_path`'`)
`{`#field_from_acyclic_path.spec.xrep section=get_required_field_names\
 arg_pfield=$specification_\0_pfield arg_src_field=$specification_\0_src_field arg_dest_field=$specification_\0_dest_field`}\
`,\
`@eq`(`'\1`'`,`'field_from_field_addition`'`)
`{`#field_from_field_addition.spec.xrep section=get_required_field_names\
 arg_field=$specification_\0_field arg_sfield1=$specification_\0_sfield1 arg_sfield2=$specification_\0_sfield2`}\
`,\
`@eq`(`'\1`'`,`'field_from_search_replace`'`)`&`@eq`(`$specification_\0_transient`,`'true`'`)
`{`#field_from_search_replace.spec.xrep section=get_required_field_names class_name=$class_name module_name=$module_name\
 arg_dfield=$specification_\0_dfield arg_sfield=$specification_\0_sfield\
 arg_ofield=$specification_\0_ofield arg_field_list=$specification_\0_field_list`}\
`,\
`@eq`(`'\1`'`,`'meta_relationship_child_name`'`)
`{`#meta_relationship_child_name.spec.xrep section=get_required_field_names\
 arg_field=$specification_\0_field arg_sfield=$specification_\0_sfield\
 arg_pfield1=$specification_\0_pfield1 arg_pfield2=$specification_\0_pfield2\
 arg_pcfield1=$specification_\0_pcfield1 arg_pcfield2=$specification_\0_pcfield2`}\
`,\
`@eq`(`'\1`'`,`'transient_add_action_child_create_for_uid`'`)
`{`#transient_add_action_child_create_for_uid.spec.xrep section=get_required_field_names\
 arg_field=$specification_\0_field arg_sfield=$specification_\0_sfield`}\
`,\
`@eq`(`'\1`'`,`'transient_event_overlap`'`)
`{`#transient_event_overlap.spec.xrep section=get_required_field_names\
 arg_field=$specification_\0_field arg_user=$specification_\0_user arg_group=$specification_\0_group\
 arg_when=$specification_\0_when arg_duration=$specification_\0_duration arg_finish=$specification_\0_finish`}\
`,\
`@eq`(`'\1`'`,`'transient_field_alias`'`)
`{`#transient_field_alias.spec.xrep section=get_required_field_names\
 arg_field=$specification_\0_field arg_sfield=$specification_\0_sfield`}\
`,\
`@eq`(`'\1`'`,`'transient_field_concat`'`)
`{`#transient_field_concat.spec.xrep section=get_required_field_names\
 arg_dfield=$specification_\0_dfield arg_field1=$specification_\0_field1 arg_field2=$specification_\0_field2`}\
`,\
`@eq`(`'\1`'`,`'transient_field_from_field_addition`'`)
`{`#transient_field_from_field_addition.spec.xrep section=get_required_field_names\
 arg_field=$specification_\0_field arg_sfield1=$specification_\0_sfield1 arg_sfield2=$specification_\0_sfield2`}\
`,\
`@eq`(`'\1`'`,`'transient_permission_concat`'`)
`{`#transient_permission_concat.spec.xrep section=get_required_field_names\
 arg_field=$specification_\0_field arg_tfield=$specification_\0_tfield`}\
`,\
`@eq`(`'\1`'`,`'for_user_account`'`)
`{`#for_user_account.spec.xrep section=get_required_field_names class_name=$class_name\
 arg_owner=$specification_\0_owner arg_ufield=$specification_\0_ufield arg_display_name=$specification_\0_display_name`}\
`}`]`}

   // [<start get_required_field_names>]
`{`(`?`$user_source`)`#$user_source section=get_required_field_names`}
   // [<finish get_required_field_names>]
}

void `{`$full_class_name`}::get_always_required_field_names(
 set< string >& names, bool required_transients, set< string >& dependents ) const
{
`{`(`?`$parent_class`)
   parent_class_type::get_always_required_field_names( names, required_transients, dependents );\
`,\
   ( void )names;
   ( void )dependents;
   ( void )required_transients;\
`}
`{`?`$all_get_always_required_field_names_specifications`[`$all_get_always_required_field_names_specifications`%,`,\
`{`@eq`(`'\1`'`,`'dummy`'`)
`{`#dummy.spec.xrep section=get_always_required_field_names module_name=$module_name class_name=$class_name`}\
`,\
`@eq`(`'\1`'`,`'modifier_date_notification`'`)
`{`#modifier_date_notification.spec.xrep section=get_always_required_field_names\
 arg_field=$specification_\0_field arg_modifier=$specification_\0_modifier`}\
`,\
`@eq`(`'\1`'`,`'modifier_field_null`'`)
`{`#modifier_field_null.spec.xrep section=get_always_required_field_names\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield arg_modifier=$specification_\0_modifier`}\
`,\
`@eq`(`'\1`'`,`'modifier_field_value`'`)
`{`#modifier_field_value.spec.xrep section=get_always_required_field_names\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield arg_modifier=$specification_\0_modifier`}\
`,\
`@eq`(`'\1`'`,`'modifier_past_date_time`'`)
`{`#modifier_past_date_time.spec.xrep section=get_always_required_field_names\
 arg_dfield=$specification_\0_dfield arg_tfield=$specification_\0_tfield arg_modifier=$specification_\0_modifier`}\
`,\
`@eq`(`'\1`'`,`'move_up_and_down`'`)
`{`#move_up_and_down.spec.xrep section=get_always_required_field_names\
 arg_field=$specification_\0_field`}\
`,\
`@eq`(`'\1`'`,`'protect_equal`'`)
`{`#protect_equal.spec.xrep section=get_always_required_field_names\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield`}\
`,\
`@eq`(`'\1`'`,`'protect_not_equal`'`)
`{`#protect_not_equal.spec.xrep section=get_always_required_field_names\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield`}\
`,\
`@eq`(`'\1`'`,`'state_protect`'`)`{`;NOTE: This can be removed when modeller.exe is no longer used.`}
`{`#$specification_\0_spec_file section=get_always_required_field_names name=\0\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield`}\
`,\
`@eq`(`'\1`'`,`'unactionable_field_value`'`)
`{`#unactionable_field_value.spec.xrep section=get_always_required_field_names\
 arg_field=$specification_\0_field arg_pfield=$specification_\0_pfield arg_value=$specification_\0_value`}\
`,\
`@eq`(`'\1`'`,`'update_parent_cascade`'`)
`{`#update_parent_cascade.spec.xrep section=get_always_required_field_names\
 arg_pfield=$specification_\0_pfield`}\
`,\
`@eq`(`'\1`'`,`'for_user_account_mark`'`)
`{`#for_user_account_mark.spec.xrep section=get_always_required_field_names module_name=$module_name class_name=$class_name\
 arg_actions=$specification_\0_actions arg_lsfield=$specification_\0_lsfield arg_mark_proc=$specification_\0_mark_proc\
 arg_mfield=$specification_\0_mfield arg_owner=$specification_\0_owner arg_pfield=$specification_\0_pfield\
 arg_rfield=$specification_\0_rfield arg_ufield=$specification_\0_ufield arg_umchild=$specification_\0_umchild arg_umclass=$specification_\0_umclass`}\
`}`]`}

   // [<start get_always_required_field_names>]
`{`(`?`$user_source`)`#$user_source section=get_always_required_field_names`}
   // [<finish get_always_required_field_names>]
}

void `{`$full_class_name`}::get_transient_replacement_field_names( const string& name, vector< string >& names ) const
{
`{`(`?`$parent_class`)
   parent_class_type::get_transient_replacement_field_names( name, names );\
`,\
   ( void )name;
   ( void )names;\
`}
`{`?`$all_get_transient_replacement_field_names_specifications`[`$all_get_transient_replacement_field_names_specifications`%,`,\
`{`@eq`(`'\1`'`,`'dummy`'`)
`{`#dummy.spec.xrep section=get_transient_replacement_field_names module_name=$module_name class_name=$class_name`}\
`}`]`}

   // [<start get_transient_replacement_field_names>]
`{`(`?`$user_source`)`#$user_source section=get_transient_replacement_field_names`}
   // [<finish get_transient_replacement_field_names>]
}

void `{`$full_class_name`}::do_generate_sql( generate_sql_type type, vector< string >& sql_stmts ) const
{
`{`?`$parent_class`&`!`@eq`(`$is_alias`,`'true`'`)\
   parent_class_type::do_generate_sql( type, sql_stmts );
`}
   generate_sql( static_class_name( ), type, sql_stmts );
}

const char* `{`$full_class_name`}::static_resolved_module_id( )
{
`{`@eq`(`$is_alias`,`'true`'`)\
   return parent_class_type::static_module_id( );\
`,\
   return static_module_id( );\
`}
}

const char* `{`$full_class_name`}::static_resolved_module_name( )
{
`{`@eq`(`$is_alias`,`'true`'`)\
   return parent_class_type::static_module_name( );\
`,\
   return static_module_name( );\
`}
}

const char* `{`$full_class_name`}::static_lock_class_id( )
{
`{`(`?`$parent_class`)\
   return parent_class_type::static_lock_class_id( );\
`,\
   return "`{`$class_id`}";\
`}
}

const char* `{`$full_class_name`}::static_check_class_name( )
{
`{`(`?`$parent_class`)\
   return parent_class_type::static_check_class_name( );\
`,\
   return "`{`$class_name`}";\
`}
}

bool `{`$full_class_name`}::static_has_derivations( )
{
   return !g_derivations.empty( );
}

void `{`$full_class_name`}::static_get_class_info( class_info_container& class_info )
{
`{`(`?`$parent_class`)\
   parent_class_type::static_get_class_info( class_info );\
`}
`{`(`?`$all_fields`)\
   class_info.push_back( "`{`$module_id`}.`{`$class_id`}" );\
`}
}

void `{`$full_class_name`}::static_get_field_info( field_info_container& all_field_info )
{
`{`(`?`$parent_class`)\
   parent_class_type::static_get_field_info( all_field_info );\
`,\
`{`!`(`?`$all_fields`)\
   ( void )all_field_info;
`}`}
`{`?`$all_fields`[`$all_fields`%,`,\
   all_field_info.push_back( field_info( "\2", "\0", "\1", \
`{`?`$mandatory_parent_fields`&`@in`(`'\0`'`,`$mandatory_parent_fields`)true`,false`} ) );\
`+\n`]`}
}

void `{`$full_class_name`}::static_get_foreign_key_info( foreign_key_info_container& foreign_key_info )
{
   ( void )foreign_key_info;
`{`(`?`$parent_class`)
   parent_class_type::static_get_foreign_key_info( foreign_key_info );\
`}
`{`?`$all_fields`[`$all_fields`%,`'`'\
`{`@in`(`'\0`'`,`$parent_fields`)
   foreign_key_info.insert( foreign_key_info_value_type( c_field_id_\0, make_pair( "`{`$module_name`}.`{`$class_id`}", "\1" ) ) );\
`}`]`}
}

int `{`$full_class_name`}::static_get_num_fields( bool* p_done, const string* p_class_name )
{
`{`!`(`?`$parent_class`)\
   if( p_done && p_class_name && *p_class_name == static_class_name( ) )
      *p_done = true;

   return c_num_fields;\
`,\
   int num_fields( parent_class_type::static_get_num_fields( p_done, p_class_name ) );

   if( p_done && *p_done )
      return num_fields;

   num_fields += c_num_fields;

   if( p_done && p_class_name && *p_class_name == static_class_name( ) )
      *p_done = true;

   return num_fields;\
`}
}

bool `{`$full_class_name`}::static_is_field_transient( field_id id )
{
   return is_transient_field( static_get_field_id( id ) );
}

const char* `{`$full_class_name`}::static_get_field_id( field_id id )
{
   const char* p_id = 0;

`{`(`?`$parent_class`)\
   int num_parent_fields( parent_class_type::static_get_num_fields( ) );

   if( ( int )id < num_parent_fields )
      p_id = parent_class_type::static_get_field_id( ( parent_class_type::field_id )id );
`}
`{`(`?`$all_fields`)\
   switch( id )
   {
`{`[`$all_fields`%,`,\
      case \\+:
      p_id = "\\2";
      break;
`+\n`]`}\
   }
`}
   if( !p_id )
      throw runtime_error( "unknown field id #" + to_string( id ) + " for class `{`$class_name`}" );

   return p_id;
}

const char* `{`$full_class_name`}::static_get_field_name( field_id id )
{
   const char* p_id = 0;

`{`(`?`$parent_class`)\
   int num_parent_fields( parent_class_type::static_get_num_fields( ) );

   if( ( int )id < num_parent_fields )
      p_id = parent_class_type::static_get_field_id( ( parent_class_type::field_id )id );
`}
`{`(`?`$all_fields`)\
   switch( id )
   {
`{`[`$all_fields`%,`,\
      case \\+:
      p_id = "\\0";
      break;
`+\n`]`}\
   }
`}
   if( !p_id )
      throw runtime_error( "unknown field id #" + to_string( id ) + " for class `{`$class_name`}" );

   return p_id;
}

int `{`$full_class_name`}::static_get_field_num( const string& field )
{
`{`(`!`?`$parent_class`)\
   int rc = 0;
`,\
   int rc = parent_class_type::static_get_field_num( field );
   if( rc >= 0 )
      return rc;

   rc = parent_class_type::static_get_num_fields( );
`}
   if( field.empty( ) )
      throw runtime_error( "unexpected empty field name/id for static_get_field_num( )" );
`{`?`$all_fields`[`$all_fields`%,`,\
   else if( field == c_field_id_\0 || field == c_field_name_\0 )
      rc += \+;
`]`}
   return rc - 1;
}

procedure_info_container& `{`$full_class_name`}::static_get_procedure_info( )
{
`{`(`?`$all_procedure_info`)\
   static bool initialised = false;
`}`{`(`?`$parent_class`)\
   static procedure_info_container& procedures( parent_class_type::static_get_procedure_info( ) );
`,\
   static procedure_info_container procedures;
`}
`{`(`?`$all_procedure_info`)\
   if( !initialised )
   {
      initialised = true;
`{`[`$all_procedure_info`%,`,\
      procedures.insert( make_pair( "\\0", "\\1" ) );\
`+\n`]`}
   }
`}
   return procedures;
}

string `{`$full_class_name`}::static_get_sql_columns( )
{
   string sql_columns;

`{`!`@eq`(`$sql_columns`,`'`'`)\
   sql_columns += `{`$tmp`=`$sql_columns`/ `/~`/\n`/ `}`{`[`$tmp`,
    "`{`$tmp`=`'\\?`'`}`{`$tmp`/~`/ `}"`]`};
`}
   return sql_columns;
}

void `{`$full_class_name`}::static_get_text_search_fields( vector< string >& fields )
{
`{`(`?`$parent_class`)\
   parent_class_type::static_get_text_search_fields( fields );\
`,\
`!`(`?`$text_search_fields`)\
   ( void )fields;\
`}
`{`?`$text_search_fields`[`$text_search_fields`,\
   fields.push_back( "\$" );\
`+\n`]`}
}

void `{`$full_class_name`}::static_get_all_enum_pairs( vector< pair< string, string > >& pairs )
{
`{`(`?`$parent_class`)\
   parent_class_type::static_get_all_enum_pairs( pairs );\
`,\
`!`(`?`$all_enums`)\
   ( void )pairs;\
`}
`{`(`?`$all_enums`)`[`$all_enums`%,`,\
`{`[`$enum_\0`%=`,\
   pairs.push_back( make_pair( "enum_\0_\\0", get_enum_string_\0( `{`@eq`(`'\2`'`,`'numlit`'`)\\0`,"\\0"`} ) ) );\
`+\n`]`}`+\n\n`]`}
}

void `{`$full_class_name`}::static_get_sql_indexes( vector< string >& indexes )
{
`{`?`$parent_class`&`!`@eq`(`$is_alias`,`'true`'`)\
   parent_class_type::static_get_sql_indexes( indexes );`{`(`?`$all_sql_indexes`)\n`}\
`,\
`{`!`(`?`$all_sql_indexes`)`|`@eq`(`$all_sql_indexes`,`'`'`)\
   ( void )indexes;\
`}`}
`{`?`$all_sql_indexes`[`$all_sql_indexes`,\
   indexes.push_back( "\$" );\
`+\n`]`}
}

void `{`$full_class_name`}::static_get_sql_unique_indexes( vector< string >& indexes )
{
`{`(`?`$parent_class`)\
   parent_class_type::static_get_sql_unique_indexes( indexes );`{`(`?`$all_sql_unique_indexes`)\n`}\
`,\
`{`!`(`?`$all_sql_unique_indexes`)`|`@eq`(`$all_sql_unique_indexes`,`'`'`)\
   ( void )indexes;\
`}`}
`{`?`$all_sql_unique_indexes`[`$all_sql_unique_indexes`,\
   indexes.push_back( "\$" );\
`+\n`]`}
}

void `{`$full_class_name`}::static_insert_derivation( const string& module_and_class_id )
{
   g_derivations.insert( module_and_class_id );
}

void `{`$full_class_name`}::static_remove_derivation( const string& module_and_class_id )
{
   if( g_derivations.count( module_and_class_id ) )
      g_derivations.erase( module_and_class_id );
}

void `{`$full_class_name`}::static_insert_external_alias( const string& module_and_class_id, `{`$full_class_name`}* p_instance )
{
   g_external_aliases.insert( external_aliases_value_type( module_and_class_id, p_instance ) );
}

void `{`$full_class_name`}::static_remove_external_alias( const string& module_and_class_id )
{
   if( g_external_aliases.count( module_and_class_id ) )
   {
      delete g_external_aliases[ module_and_class_id ];
      g_external_aliases.erase( module_and_class_id );
   }
}

void `{`$full_class_name`}::static_class_init( const char* p_module_name )
{
   if( !p_module_name )
      throw runtime_error( "unexpected null module name pointer for init" );

`{`@eq`(`$is_alias`,`'true`'`)\
   `{`$parent_class`}::static_insert_external_alias( "`{`$full_class_name`}", new `{`$full_class_name`} );
`,\
`{`(`?`$parent_class`)\
   `{`$parent_class`}::static_insert_derivation( "`{`$full_class_name`}" );
`}`}
`{`(`?`$all_enums`)`[`$all_enums`%,`,\
`{`[`$enum_\0`%=`,\
   g_\0_enum.insert( `{`@eq`(`'\2`'`,`'numlit`'`)\\0`,"\\0"`} );
`]`}`]`}`{`?`$all_static_class_init_specifications`[`$all_static_class_init_specifications`%,`,\
`{`@eq`(`'\1`'`,`'dummy`'`)
`{`#dummy.spec.xrep section=static_class_init full_class_name=$full_class_name`}
`,\
`@eq`(`'\1`'`,`'for_user_account_invitation`'`)
`{`#for_user_account_invitation.spec.xrep section=static_class_init full_class_name=$full_class_name`}
`}`]`}
   // [<start static_class_init>]
`{`(`?`$user_source`)`#$user_source section=static_class_init`}
   // [<finish static_class_init>]
}

void `{`$full_class_name`}::static_class_term( const char* p_module_name )
{
   if( !p_module_name )
      throw runtime_error( "unexpected null module name pointer for term" );

`{`@eq`(`$is_alias`,`'true`'`)\
   `{`$parent_class`}::static_remove_external_alias( "`{`$full_class_name`}" );
`,\
`{`(`?`$parent_class`)\
   `{`$parent_class`}::static_remove_derivation( "`{`$full_class_name`}" );
`}`}
`{`?`$all_static_class_term_specifications`[`$all_static_class_term_specifications`%,`,\
`{`@eq`(`'\1`'`,`'dummy`'`)
`{`#dummy.spec.xrep section=static_class_term full_class_name=$full_class_name`}
`}`]`}
   // [<start static_class_term>]
`{`(`?`$user_source`)`#$user_source section=static_class_term`}
   // [<finish static_class_term>]
}

