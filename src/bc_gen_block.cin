; Copyright (c) 2021-2023 CIYAM Developers
;
; Distributed under the MIT/X11 software license, please refer to the file license.txt
; in the root project directory or http://www.opensource.org/licenses/mit-license.php.
;
ERROR=
@ifeq "$1" ""
ERROR=1
@endif
@ifeq "$2" ""
ERROR=1
@endif
;
@ifeq "$ERROR" "1"
#Usage: bc_gen_block.cin <ident> <height> [<tree>]
@else
;
IDENT=$1
HEIGHT=$2
;
TREE=$3
;
DEMO=
@ifeq "$IDENT" "6b24210e8"
DEMO=1
@endif
@ifeq "$IDENT" "6f2680b40"
DEMO=1
@endif
;
TEST_CHAIN=
@ifeq "$IDENT" "eb1a95a3b"
TEST_CHAIN=1
@endif
@ifeq "$IDENT" "b3a59a1be"
TEST_CHAIN=1
@endif
;
SHARED=
.system_variable @blockchain_shared_identity
@ifdef $OUTPUT
@ifeq "$IDENT" "$OUTPUT"
SHARED=1
@endif
@endif
;
PEER_HUB=
OPL_FILE_HASH_ENC=
.system_variable @blockchain_peer_hub_identity
@ifdef $OUTPUT
@ifeq "$IDENT" "$OUTPUT"
PEER_HUB=1
.file_hash bc.$IDENT.$HEIGHT.opl
@ifdef $ERROR
@label END
@endif
@skip
.encode $OUTPUT
OPL_FILE_HASH_ENC=$OUTPUT
@endif
@endif
;
CHANNEL=
@ifndef $SHARED
@ifndef $PEER_HUB
.system_variable @blockchain_backup_identity
@ifndef $OUTPUT
ERROR=No backup blockchain identity was found.
#Error: $ERROR
@label END
@endif
@skip
@ifneq "$IDENT" "$OUTPUT"
CHANNEL=1
@endif
@endif
@endif
;
.session_variable @blockchain_identity $IDENT
;
@ifndef $TEST_CHAIN
MULTIPLE=50
UTIME=@unix:
@else
HRS_01=3600
HRS_24=@$HRS_01*24
;
HRS_HEIGHT=@$HRS_24*$HEIGHT
;
MULTIPLE=5
UTIME=@1635400000+$HRS_HEIGHT
@endif
;
SQUARED=@$MULTIPLE*$MULTIPLE
;
@ifeq "$HEIGHT" "0"
#Error: Height must be greater than zero.
@else
;
.session_variable @uuid
UUID=$OUTPUT
;
.file_hash bc.$IDENT.0.blk
@ifdef $ERROR
@label END
@endif
@skip
;
@ifdef $DEMO
HEIGHT_IDENTITY=$IDENT
@else
.crypto_hash $OUTPUT-$HEIGHT
HEIGHT_IDENTITY=@substr:0,9:$OUTPUT
@endif
;
@ifndef $TREE
@ifndef $PEER_HUB
.file_tags -i=ciyam
@ifdef $OUTPUT
TREE=ciyam
@endif
@endif
@endif
;
LAST=@$HEIGHT-1
LAST_BLOCK_HEIGHT=$LAST
;
.file_hash bc.$IDENT.$LAST_BLOCK_HEIGHT.blk
@ifdef $ERROR
@label END
@endif
@skip
;
LAST_BLOCK_HASH=$OUTPUT
.encode $LAST_BLOCK_HASH
LAST_BLOCK_HASH_ENC=$OUTPUT
;
MODULUS=@$HEIGHT#$MULTIPLE
;
@ifeq "$MODULUS" "0"
LAST_BLOCK_HEIGHT=@$HEIGHT-$MULTIPLE
.file_hash bc.$IDENT.$LAST_BLOCK_HEIGHT.blk
@ifdef $ERROR
@label END
@endif
@skip
.encode $OUTPUT
LAST_BLOCK_HASH_ENC=$LAST_BLOCK_HASH_ENC,$OUTPUT
@endif
;
MODULUS=@$HEIGHT#$SQUARED
;
@ifeq "$MODULUS" "0"
LAST_BLOCK_HEIGHT=@$HEIGHT-$SQUARED
.file_hash bc.$IDENT.$LAST_BLOCK_HEIGHT.blk
@ifdef $ERROR
@label END
@endif
@skip
.encode $OUTPUT
LAST_BLOCK_HASH_ENC=$LAST_BLOCK_HASH_ENC,$OUTPUT
@endif
;
.file_hash bc.$IDENT.$HEIGHT.pub
@ifdef $ERROR
@label END
@endif
@skip
;
.encode $OUTPUT
PUB_KEY_HASH_ENC=$OUTPUT
;
MODULUS=@$HEIGHT#$MULTIPLE
;
@ifeq "$MODULUS" "0"
NEXT_HEIGHT=@$HEIGHT+$MULTIPLE
NEXT_HEIGHT=@$NEXT_HEIGHT-1
.file_hash bc.$IDENT.$NEXT_HEIGHT.pub
@ifdef $ERROR
@label END
@endif
@skip
.encode $OUTPUT
PUB_KEY_HASH_ENC=$PUB_KEY_HASH_ENC,$OUTPUT
@endif
;
MODULUS=@$HEIGHT#$SQUARED
;
@ifeq "$MODULUS" "0"
NEXT_HEIGHT=@$HEIGHT+$SQUARED
NEXT_HEIGHT=@$NEXT_HEIGHT-1
.file_hash bc.$IDENT.$NEXT_HEIGHT.pub
@ifdef $ERROR
@label END
@endif
@skip
.encode $OUTPUT
PUB_KEY_HASH_ENC=$PUB_KEY_HASH_ENC,$OUTPUT
@endif
;
.file_hash bc.$IDENT.$LAST.key
@ifdef $ERROR
@label END
@endif
@skip
;
.crypto_hash @sid -s=$IDENT.$HEIGHT
.crypto_chain 1440 -b64 -hind $OUTPUT
HIND_HASH_ENC=$OUTPUT
;
.file_crypt -decrypt -cipher=cc bc.$IDENT.$LAST.key @sid
.file_get bc.$IDENT.$LAST.key $UUID.key
.file_crypt -encrypt -cipher=cc bc.$IDENT.$LAST.key @sid
;
.file_get bc.$IDENT.$LAST.pub $UUID.pub
;
@ifndef $TREE
;
@ifndef $PEER_HUB
.file_raw -core blob blk:h=$HEIGHT,i=$HEIGHT_IDENTITY,n=0,v=1\n\
h:$HIND_HASH_ENC\n\
l:$LAST_BLOCK_HASH_ENC\n\
p:$PUB_KEY_HASH_ENC\n\
u:$UTIME bc.$IDENT.$HEIGHT.blk
@else
.file_raw -core blob blk:h=$HEIGHT,i=$HEIGHT_IDENTITY,n=0,v=1\n\
h:$HIND_HASH_ENC\n\
l:$LAST_BLOCK_HASH_ENC\n\
o:$OPL_FILE_HASH_ENC\n\
p:$PUB_KEY_HASH_ENC\n\
u:$UTIME bc.$IDENT.$HEIGHT.blk
@endif
;
@else
;
.file_hash $TREE
@ifdef $ERROR
@label END
@endif
@skip
.encode $OUTPUT
TREE_ROOT_HASH_ENC=$OUTPUT
.session_variable @totals_exclude_hidden_blobs 1
.file_info -total_items $TREE
NUM_TREE_ITEMS=$OUTPUT
;
CIPHER_EXTRA=
@ifdef $CIYAM_STREAM_CIPHER
CIPHER_EXTRA=,s=$CIYAM_STREAM_CIPHER
@endif
TARGET_EXTRA=
@ifdef $ENCRYPTED_PASSWORD
.system_variable $ENCRYPTED_PASSWORD
.session_variable @encrypted_password "$OUTPUT"
@ifdef $CHANNEL
NUM_ROUNDS=1
@else
NUM_ROUNDS=1000000
@endif
.crypto_hash -x=$NUM_ROUNDS @encrypted_password -s=$HEIGHT
TARGET=@substr:0,9:$OUTPUT
TARGET_EXTRA=,t=$TARGET
.session_variable @encrypted_password ""
@endif
;
.file_raw -core blob blk:h=$HEIGHT,i=$HEIGHT_IDENTITY,n=$NUM_TREE_ITEMS$CIPHER_EXTRA$TARGET_EXTRA,v=1\n\
h:$HIND_HASH_ENC\n\
l:$LAST_BLOCK_HASH_ENC\n\
p:$PUB_KEY_HASH_ENC\n\
t:$TREE_ROOT_HASH_ENC\n\
u:$UTIME bc.$IDENT.$HEIGHT.blk
;
@endif
;
BLOCK_HASH=$OUTPUT
;
.crypto_lamport -sign $UUID:$BLOCK_HASH
.file_put $UUID.sig bc.$IDENT.$LAST.sig
.file_hash bc.$IDENT.$LAST.sig
;
.system_variable @os
@ifeq "$OUTPUT" "Linux"
~shred $UUID.key
@endif
~rm $UUID.key $UUID.pub $UUID.sig
;
@ifndef $ERROR
.file_tag $BLOCK_HASH bc.$IDENT.zenith
.file_tag -unlink bc.$IDENT.$LAST.key
;
.system_variable @blockchain_backup_identity
@ifeq "$OUTPUT" "$IDENT"
.system_variable >@blockchain_backup_height $HEIGHT
@endif
;
.system_variable @blockchain_shared_identity
@ifeq "$OUTPUT" "$IDENT"
.system_variable >@blockchain_shared_height $HEIGHT
@endif
;
.system_variable @blockchain_peer_hub_identity
@ifeq "$OUTPUT" "$IDENT"
.system_variable >@blockchain_peer_hub_height $HEIGHT
@endif
@endif
;
@:END
;
@endif
@endif
