`{`@eq`(`'procedure`'`,`$section`)\
   // [(start for_clone)] `{`$arg_id`}
`{`$i`=`'`'`}`{`@eq`(`$arg_use_trans`,`'true`'`)`$i`=`'   `'`}\
`{`@eq`(`$arg_use_trans`,`'true`'`)\
   transaction_start( );
   try
   {
`}\
`{`$suffix`=`'_C`'`}`{`!`@eq`(`$arg_key_suffix`,`'`'`)`$suffix`=`$arg_key_suffix`}\
`{`@eq`(`$arg_proc_arg_is_key_suffix`,`'true`'`)`$suffix`=`'_`'`}\
`{`@eq`(`$arg_sfield`,`'`'`)`|`@eq`(`$arg_clone_only`,`'true`'`)\
`{`$i`}   get_obj( ).begin_review( );
`,\
`{`$i`}   get_obj( ).op_update( );
`}`{`!`@eq`(`$arg_spfield`,`'`'`)`&`@eq`(`$arg_use_proc_arg_for_source`,`'true`'`)
`{`$i`}   string key_source_info( FIELD_ID( `{`$module_name`}, `{`$arg_spclass`}, `{`$arg_scfield`} ) );
`{`$i`}   key_source_info += "#1 " + search_replace( `{`$arg_proc_arg`}, ",", "\\\\\\\\," );

`{`$i`}   class_pointer< `{`$module_name`}_`{`$arg_spclass`} > cp_key_source( e_create_instance );

`{`$i`}   cp_key_source->perform_fetch( key_source_info );
`}`{`!`@eq`(`$arg_spfield`,`'`'`)`&`@eq`(`$arg_use_proc_arg_for_source`,`'`'`)
`{`$i`}   get_obj( ).`{`$arg_spfield`}( ).op_update( );
`{`$i`}   int next_copy_num = get_obj( ).`{`$arg_spfield`}( ).`{`$arg_scfield`}( );

`{`$i`}   string key_info( construct_key_from_int( get_obj( ).get_key( ) + "`{`$suffix`}"\
`{`!`@eq`(`$arg_proc_arg_is_key_suffix`,`'`'`) + `{`!`@eq`(`$arg_spfield`,`'`'`)`&`@eq`(`$arg_use_proc_arg_for_source`,`'true`'`)\
cp_key_source->get_key( )`,`{`$arg_proc_arg`}`}`}, next_copy_num ) );
`{`$i`}   key_info += " " + get_obj( ).get_key( );

`{`$i`}   get_obj( ).`{`$arg_spfield`}( ).`{`$arg_scfield`}( next_copy_num + 1 );
`{`$i`}   get_obj( ).`{`$arg_spfield`}( ).op_apply( );
`,
`{`$i`}   string key_info( get_obj( ).get_key( ) + "`{`$suffix`}"\
`{`!`@eq`(`$arg_proc_arg_is_key_suffix`,`'`'`) + `{`!`@eq`(`$arg_spfield`,`'`'`)`&`@eq`(`$arg_use_proc_arg_for_source`,`'true`'`)\
cp_key_source->get_key( )`,`{`$arg_proc_arg`}`}`} + string( " " ) + get_obj( ).get_key( ) );
`}
`{`@eq`(`$arg_fldval`,`'`'`)\
`{`$i`}   class_pointer< `{`$full_class_name`} > cp_source( e_create_instance );

`{`$i`}   cp_source->op_create( key_info );
`{`!`@eq`(`$arg_tfield`,`'`'`)\
`{`$i`}   cp_source->`{`$arg_tfield`}( "" );
`}\
`{`$i`}   cp_source->`{`$arg_field`}( `{`$arg_value`} );
`{`!`@eq`(`$arg_spfield`,`'`'`)`&`@eq`(`$arg_use_proc_arg_for_source`,`'true`'`)\
`{`$i`}   cp_source->`{`$arg_spfield`}( cp_key_source->get_key( ) );
`}\
`{`!`@eq`(`$arg_sfield`,`'`'`)`&`@eq`(`$arg_clone_only`,`'true`'`)\
`{`$i`}   cp_source->`{`$arg_sfield`}( get_obj( ).`{`$arg_svalue`}( ) );
`}\
`{`$i`}   cp_source->op_apply( );
`,\
`{`$i`}   set_session_variable( get_special_var_name( e_special_var_key_info ), key_info );
`{`!`@eq`(`$arg_extra`,`'`'`)\
`{`$i`}   set_session_variable( get_special_var_name( e_special_var_extra_info ), cp_key_source->`{`$arg_extra`}( ) );
`}\

`{`$i`}   get_obj( ).`{`$arg_fldval`}( to_string( c_field_id_`{`$arg_field`} ) + "=" + to_string( "`{`$arg_value`}" ) );
`{`!`@eq`(`$arg_tfield`,`'`'`)\
`{`$i`}   get_obj( ).`{`$arg_fldval`}( get_obj( ).`{`$arg_fldval`}( ) + "," + to_string( c_field_id_`{`$arg_tfield`} ) + "=" );
`}\
`{`!`@eq`(`$arg_spfield`,`'`'`)`&`@eq`(`$arg_use_proc_arg_for_source`,`'true`'`)\

`{`$i`}   get_obj( ).`{`$arg_fldval`}( get_obj( ).`{`$arg_fldval`}( ) + ","
`{`$i`}    + to_string( c_field_id_`{`$arg_spfield`} ) + "=" + cp_key_source->get_key( ) );
`}\
`}\

`{`@eq`(`$arg_sfield`,`'`'`)`|`@eq`(`$arg_clone_only`,`'true`'`)\
`{`$i`}   get_obj( ).finish_review( );
`,\
`{`$i`}   get_obj( ).`{`$arg_sfield`}( get_obj( ).`{`$arg_svalue`}( ) );
`{`@eq`(`$arg_clone_only`,`'`'`)\
`{`$i`}   get_obj( ).op_apply( );
`}`}\
`{`@eq`(`$arg_use_trans`,`'true`'`)\

      transaction_commit( );

`}\
`{`!`@eq`(`$arg_proc_arg`,`'`'`)`&`@eq`(`$arg_proc_arg_is_key_suffix`,`'`'`)\
      // FUTURE: The return message itself should be a module string.
`{`@eq`(`$arg_use_proc_name`,`'`'`)\
`{`$i`}   `{`$arg_proc_arg`} = "Created New " + get_obj( ).get_display_name( );
`,\
`{`$i`}   `{`$arg_proc_arg`} = get_obj( ).get_display_name( ) + " "
`{`$i`}    + get_module_string( "procedure_" + string( c_procedure_id_`{`$arg_procedure`} ) ) + " completed.";
`}`}\
`{`@eq`(`$arg_use_trans`,`'true`'`)\
   }
   catch( ... )
   {
`{`@eq`(`$arg_sfield`,`'`'`)\
      get_obj( ).finish_review( );
`,\
      get_obj( ).op_cancel( );
`}\
      transaction_rollback( );
      throw;
   }
`}\
   // [(finish for_clone)] `{`$arg_id`}
`}
