<sio/>
# Copyright (c) 2004-2012 CIYAM Pty. Ltd. ACN 093 704 539
# Copyright (c) 2012-2014 CIYAM Developers
#
# Distributed under the MIT/X11 software license, please refer to the file license.txt
# in the root project directory or http://www.opensource.org/licenses/mit-license.php.
 <groups/>
#comment test 1...
#comment test 2...
#comment test 3...
  <group/>
   <name>test_bundle
#comment test 4...
#comment test 5...
   <tests/>
#comment test 6...
#comment test 7...
    <test/>
#comment test 8...
#comment test 9...
     <name>1
#comment test 10...
#comment test 11...
     <description>Create and update and verify contents of a base64 encoded bundle.
     <kill>test.bun
     <kill>~temp.jpg
     <kill>~temp.png
#comment test 12...
#comment test 13...
     <test_step/>
#comment test 14...
#comment test 15...
      <name>a
      <exec>bundle -q -b64 -ngz test test.png
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>print test.bun
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>c
      <exec>bundle -q -b64 -ngz test test.jpg
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>d
      <exec>print test.bun
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>e
      <exec>bundle -q -b64 -ngz test test.jpg
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>f
      <exec>print test.bun
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>g
      <exec>copy test.jpg ~temp.jpg
      <input>false
      <output>none
     </test_step>
     <test_step/>
      <name>h
      <exec>bundle -q -b64 -ngz test ~temp.jpg
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>i
      <exec>print test.bun
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>j
      <exec>copy test.png ~temp.png
      <input>false
      <output>none
     </test_step>
     <test_step/>
      <name>k
      <exec>bundle -q -b64 -ngz test ~temp.png
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>l
      <exec>print test.bun
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>m
      <exec>bundle -q -b64 -ngz test test.jpg
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>n
      <exec>print test.bun
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>o
      <exec>bundle -q -b64 -ngz test test.png
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>p
      <exec>unbundle -l -q test
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>q
      <exec>print test.bun
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>r
      <exec>bundle -d -q -b64 -ngz test test.jpg
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>s
      <exec>print test.bun
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>t
      <exec>bundle -d -q -b64 -ngz test test.png
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>u
      <exec>print test.bun
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>v
      <exec>unbundle -l -q test
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>w
      <exec>unbundle -o -q test
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>x
      <exec>bundle -q -b64 -ngz test ~temp.jpg
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>y
      <exec>bundle -q -b64 -ngz test ~temp.png
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>z
      <exec>print test.bun
      <input>false
      <output>generate
     </test_step>
    </test>
   </tests>
  </group>
  <group/>
   <name>xrep
   <tests/>
    <test/>
     <name>1
     <description>Perform basic xrep functionality tests.
     <test_step/>
      <name>a
      <exec>xrep @xrep_1_a.xrep
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>xrep @xrep_1_a.xrep include=xrep_1_b.xrep
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>c
      <exec>xrep @xrep_1_c.xrep field=Field field_list=Source separator=, section=for_test
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>d
      <exec>xrep @xrep_1_c.xrep field=Field field_list=@xrep_1_d.lst separator=, section=for_test
      <input>false
      <output>generate
     </test_step>
    </test>
   </tests>
  </group>
  <group/>
   <name>test_cache
   <tests/>
    <test/>
     <name>1
     <description>Populate cache data and perform basic single region tests.
     <kill>test_cache.dat
     <test_step/>
      <name>a
      <exec>test_cache -quiet 5 10
      <input>true
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>
      <input>false
      <output>automatic
     </test_step>
     <test_step/>
      <name>c
      <exec>
      <input>false
      <output>automatic
     </test_step>
     <test_step/>
      <name>d
      <exec>
      <input>false
      <output>automatic
     </test_step>
     <test_step/>
      <name>e
      <exec>
      <input>false
      <output>automatic
     </test_step>
    </test>
    <test/>
     <name>2
     <description>Perform various tests using multiple regions.
     <test_step/>
      <name>a
      <exec>test_cache -quiet 20 10 4
      <input>true
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>
      <input>false
      <output>automatic
     </test_step>
     <test_step/>
      <name>c
      <exec>
      <input>false
      <output>automatic
     </test_step>
     <test_step/>
      <name>d
      <exec>
      <input>false
      <output>automatic
     </test_step>
     <test_step/>
      <name>e
      <exec>
      <input>false
      <output>automatic
     </test_step>
     <test_step/>
      <name>f
      <exec>
      <input>false
      <output>automatic
     </test_step>
    </test>
    <test/>
     <name>3
     <description>Perform various maximum limit tests.
     <test_step/>
      <name>a
      <exec>test_cache -quiet 65536 65536
      <input>true
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>
      <input>false
      <output>automatic
     </test_step>
     <test_step/>
      <name>c
      <exec>
      <input>false
      <output>automatic
     </test_step>
     <test_step/>
      <name>d
      <exec>
      <input>false
      <output>automatic
     </test_step>
     <test_step/>
      <name>e
      <exec>
      <input>false
      <output>automatic
     </test_step>
     <test_step/>
      <name>f
      <exec>
      <input>false
      <output>automatic
     </test_step>
    </test>
   </tests>
  </group>
  <group/>
   <name>test_diff
   <tests/>
    <test/>
     <name>1
     <description>Perform "rcs" diff operations between variations of "diff0.txt".
     <test_step/>
      <name>a
      <exec>diff -q -rcs diff0.txt diff0.0.txt
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>diff -q -rcs diff0.txt diff0.1.txt
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>c
      <exec>diff -q -rcs diff0.txt diff0.2.txt
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>d
      <exec>diff -q -rcs diff0.txt diff0.3.txt
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>e
      <exec>diff -q -rcs diff0.txt diff0.4.txt
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>f
      <exec>diff -q -rcs diff0.txt diff0.5.txt
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>g
      <exec>diff -q -rcs diff0.txt diff0.6.txt
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>h
      <exec>diff -q -rcs diff0.txt diff0.7.txt
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>i
      <exec>diff -q -rcs diff0.txt diff0.8.txt
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>j
      <exec>diff -q -rcs diff0.txt diff0.9.txt
      <input>false
      <output>generate
     </test_step>
    </test>
    <test/>
     <name>2
     <description>Perform "rcs" diff operations between variations of "diff1.txt".
     <test_step/>
      <name>a
      <exec>diff -q -rcs diff1.txt diff1.0.txt
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>diff -q -rcs diff1.txt diff1.1.txt
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>c
      <exec>diff -q -rcs diff1.txt diff1.2.txt
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>d
      <exec>diff -q -rcs diff1.txt diff1.3.txt
      <input>false
      <output>generate
     </test_step>
    </test>
    <test/>
     <name>3
     <description>Perform three-way merges between "rcs" diffs and "diff0.txt" base.
     <test_step/>
      <name>a
      <exec>!diffp -q diff0.txt test_diff_1_a.tst test_diff_1_b.tst
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>!diffp -q diff0.txt test_diff_1_b.tst test_diff_1_c.tst
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>c
      <exec>!diffp -q diff0.txt test_diff_1_c.tst test_diff_1_d.tst
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>d
      <exec>!diffp -q diff0.txt test_diff_1_d.tst test_diff_1_e.tst
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>e
      <exec>!diffp -q diff0.txt test_diff_1_e.tst test_diff_1_f.tst
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>f
      <exec>!diffp -q diff0.txt test_diff_1_f.tst test_diff_1_g.tst
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>g
      <exec>!diffp -q diff0.txt test_diff_1_g.tst test_diff_1_h.tst
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>h
      <exec>!diffp -q diff0.txt test_diff_1_h.tst test_diff_1_i.tst
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>i
      <exec>!diffp -q diff0.txt test_diff_1_i.tst test_diff_1_j.tst
      <input>false
      <output>generate
     </test_step>
    </test>
    <test/>
     <name>4
     <description>Perform three-way merges between "rcs" diffs and "diff1.txt" base.
     <test_step/>
      <name>a
      <exec>!diffp -q diff1.txt test_diff_2_a.tst test_diff_2_b.tst
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>!diffp -q diff1.txt test_diff_2_b.tst test_diff_2_c.tst
      <input>false
      <output>generate
     </test_step>
    </test>
   </tests>
  </group>
  <group/>
   <name>test_hash_chain
   <tests/>
    <test/>
     <name>1
     <description>Perform hash chain tests.
     <test_step/>
      <name>a
      <exec>test_hash_chain
      <input>false
      <output>generate
     </test_step>
    </test>
   </tests>
  </group>
  <group/>
   <name>test_numeric
   <tests/>
    <test/>
     <name>1
     <description>Perform various basic numeric operations.
     <test_step/>
      <name>a
      <exec>test_numeric -quiet -echo
      <input>true
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>test_numeric -quiet -echo
      <input>true
      <output>generate
     </test_step>
     <test_step/>
      <name>c
      <exec>test_numeric -quiet -echo
      <input>true
      <output>generate
     </test_step>
     <test_step/>
      <name>d
      <exec>test_numeric -quiet -echo
      <input>true
      <output>generate
     </test_step>
    </test>
   </tests>
  </group>
  <group/>
   <name>test_ods
   <tests/>
    <test/>
     <name>1
     <description>Populate DB using nested transactions.
     <kill>test_ods.dat
     <kill>test_ods.idx
     <kill>test_ods.hdr
     <kill>test_ods.dat.lck
     <kill>test_ods.idx.lck
     <test_step/>
      <name>a
      <exec>test_ods -quiet -x
      <input>true
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>dump test_ods
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>c
      <exec>dump all test_ods
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>d
      <exec>dump -d all test_ods
      <input>false
      <output>generate
     </test_step>
    </test>
    <test/>
     <name>2
     <description>Test a couple of larger capacity transactions.
     <kill>test_ods.dat
     <kill>test_ods.idx
     <kill>test_ods.hdr
     <kill>test_ods.dat.lck
     <kill>test_ods.idx.lck
     <test_step/>
      <name>a
      <exec>test_ods -quiet -x
      <input>true
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>dump test_ods
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>c
      <exec>dump -d 0 test_ods
      <input>false
      <output>generate
     </test_step>
    </test>
    <test/>
     <name>3
     <description>Test DB compress operation.
     <test_step/>
      <name>a
      <exec>test_ods -quiet -x
      <input>true
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>dump test_ods
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>c
      <exec>dump -d 0 test_ods
      <input>false
      <output>generate
     </test_step>
    </test>
   </tests>
  </group>
  <group/>
   <name>test_parser
   <tests/>
    <test/>
     <name>1
     <description>Perform command syntax and usage tests.
     <kill>~webdir_test
     <test_step/>
      <name>a
      <exec>test_parser /test
      <input>false
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>gen_webdir_test
      <input>false
      <output>none
     </test_step>
     <test_step/>
      <name>c
      <exec>test_parser /quiet < ~webdir_test
      <input>false
      <output>generate
     </test_step>
    </test>
   </tests>
  </group>
  <group/>
   <name>test_server
   <tests/>
    <test/>
     <name>1
     <description>Test version, license and encrypt server operations.
     <test_step/>
      <name>*init*
      <exec>*ciyam_server -quiet
      <input>false
      <output>none
     </test_step>
     <test_step/>
      <name>a
      <exec>ciyam_client -echo -quiet
      <input>true
      <output>generate
     </test_step>
    </test>
    <test/>
     <name>2
     <description>Test loading the Meta model, viewing various artifacts and performing basic object operations.
     <test_step/>
      <name>a
      <exec>ciyam_client -echo -quiet
      <input>true
      <output>generate
     </test_step>
     <test_step/>
      <name>b
      <exec>ciyam_client -echo -quiet
      <input>true
      <output>generate
     </test_step>
     <test_step/>
      <name>c
      <exec>$touch ciyam_server.stop
      <input>false
      <output>none
     </test_step>
    </test>
#comment test 16...
   </tests>
#comment test 17...
  </group>
#comment test 18...
#comment test 19...
 </groups>
#comment test 20...
</sio>
