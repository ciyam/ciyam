; Copyright (c) 2016-2018 CIYAM Developers
;
; Distributed under the MIT/X11 software license, please refer to the file license.txt
; in the root project directory or http://www.opensource.org/licenses/mit-license.php.
;
; CIYAM Bitcoin test script for ACCT using either a CLTV or secret reveal redemption tx
; -------------------------------------------------------------------------------------
;
; NOTE: In order to utilise the following script you will first need to install Bitcoin
; into the directory where CIYAM has been compiled or else set the TBITCOIN environment
; variable accordingly (check the 'tbitcoin' script to work out how to do this and when
; doing this don't forget the '-regtest' option). Check that there is no 'regtest' data
; before starting 'bitcoind' and then running this script.
;
;SECRET=1234567890
;USE_SECRET_REVEAL=1
;
;LOCK=128
;USE_SECRET_REVEAL=
;USE_UNIX_TIMESTAMP=
;
;SECS=5
;USE_SECRET_REVEAL=
;USE_UNIX_TIMESTAMP=1
;
<std.fissile
;
@ifndef $LOCK
LOCK=128
@endif
;
@ifndef $USE_SECRET_REVEAL
#Redeeming using CLTV refund...
@ifndef $USE_UNIX_TIMESTAMP
#(via block number)
#$LOCK
;
; Function to reverse endian (using some std functions).
*@reverse_hex=$@^x=$!split.n?2,_@^x+@?_!^x_!reverse.set_!join_@?
;
; Functions to determine the maximum signed hex value that has the same number of digits as its input.
*@hexmaxs.loop=$?^y!!_<^z,^y_@^x+$f_!hexmaxs.loop
*@hexmaxs=$@^x=$7_@^y=@?_@^z=_<^z,^y_!hexmaxs.loop_@^x
@else
#(via unix timestamp)
UNIX=@unix
@ifndef $SECS
SECS=5
@endif
#$SECS seconds
@endif
@else
@ifndef $SECRET
SECRET=1234567890
@endif
#Redeeming using secret reveal...
#($SECRET)
@endif
#Generating a spendable amount...
NUL=@~tbitcoin generate 101
;
; Define an address and matching WIF private key for testing.
;
ADDR=mp7zjTrEszZezRBM1cUmTvaK2zf3MuDAHt
WKEY=cPR4DC5NXVkR37wEbCuUVuvuFxSozsMr8SHYteB2iqG8yV3uHdFR
;
; To simplify testing just uses the same address for redemption
;
crypto_addr_hash $ADDR
PKHS=$OUTPUT
PKHR=$OUTPUT
;
; Send some funds to the address of the newly imported private key.
;
~tbitcoin importprivkey $WKEY
TXID=@~tbitcoin sendtoaddress $ADDR 50
;
; Setup an ACCT P2SH script and then get its address and script hash.
;
SCTH=@sha256:$SECRET
@ifndef $USE_UNIX_TIMESTAMP
BLKH=*!dec2hex?$LOCK
HMAX=*!hexmaxs?$BLKH
;
; Function to output 00 if its first hex value arg is greater than its second.
*@gt00=$@^u=_@^v=_@^w=_@^x=_@^y=$@^w=#16#_@^z=$@^x=#16#_<<^u_@^y+@^u_<<^v_@^z+@^v_!^y_!^z_?>^w,^x_`00
PREF=*!gt00?$BLKH,$HMAX
FULL=$PREF$BLKH
;
*@size.loop=$?@^x!!_<^z,^x_@^s+#1_!size.loop
*@size=$@^s=#0_@^x=@?_@^z=_!size.loop_@^s/#2_`0_@^s
SIZE=*!size?$FULL
BLKR=*!reverse_hex?$FULL
BLKI=$SIZE$BLKR
;
SCRIPT=76a820%SCTH%87637576a914%PKHS%88ac67%BLKI%b17576a914%PKHR%88ac68
@else
TIME=@$UNIX+$SECS
HTME=@hexlit:$TIME
LTME=@substr:0,8:$HTME
SCRIPT=76a820%SCTH%87637576a914%PKHS%88ac6704%LTME%b17576a914%PKHR%88ac68
@endif
;
crypto_p2sh_addr TBTC $SCRIPT
P2SH_ADDR=$OUTPUT
crypto_addr_hash $P2SH_ADDR
P2SH_HASH=$OUTPUT
;
; Now send funds to the P2SH address.
;
NUL=@~tbitcoin generate 3
TXID=@~tbitcoin sendtoaddress $P2SH_ADDR 50
OLD_TX=@~tbitcoin getrawtransaction $TXID
~tbitcoin decoderawtransaction $OLD_TX
;
; (check that the VOUT matches or change the next line)
; (also verify the P2SH scriptPubKey's script and hash)
;
VOUT=0
#$P2SH_HASH
NUL=@~tbitcoin generate 3
;
@ifdef $USE_UNIX_TIMESTAMP
LOCK=$TIME
@endif
@ifndef $USE_SECRET_REVEAL
crypto_p2sh_redeem $TXID $VOUT $SCRIPT $ADDR 50.0 $WKEY $LOCK
@else
HEX_SCRT=@aschex:$SECRET
crypto_p2sh_redeem $TXID $VOUT $SCRIPT $ADDR 50.0 $WKEY -e=$HEX_SCRT
@endif
RAW_TX=$OUTPUT
~tbitcoin decoderawtransaction $RAW_TX
~tbitcoin signrawtransaction $RAW_TX
@ifndef $USE_SECRET_REVEAL
@ifdef $USE_UNIX_TIMESTAMP
;
; Wait for SECS seconds to then redeem the funds from the P2SH UTXO.
;
; NOTE: When running with testnet/regtest it seems that when using a
; unix timestamp (instead of a block number) then the tx is accepted
; before the actual time so this delay is just to ensure that the tx
; will appear confirmed after the final generate).
;
MILI=@$SECS*1000
#wait $MILI
.wait $MILI
@else
;
; Note this attempt will fail due to being non-final (i.e. locktime).
;
~tbitcoin getblockcount
~tbitcoin sendrawtransaction $RAW_TX
;
; Increase the block height then redeem the funds from the P2SH UTXO.
;
NEED=@$LOCK-107
NUL=@~tbitcoin generate $NEED
~tbitcoin getblockcount
@endif
@endif
TXID=@~tbitcoin sendrawtransaction $RAW_TX
NEW_TX=@~tbitcoin getrawtransaction $TXID
~tbitcoin decoderawtransaction $NEW_TX
NUL=@~tbitcoin generate 1
