`{`@eq`(`'includes`'`,`$section`)\
// [(start for_auto_code_user)] `{`$arg_id`}
#include "`{`$module_name`}_`{`$arg_auto_class`}.h"
// [(finish for_auto_code_user)] `{`$arg_id`}
`}
`{`@eq`(`'value_will_be_provided`'`,`$section`)\
   // [(start for_auto_code_user)] `{`$arg_id`}
   if( field_name == "`{`$arg_field`}" )
      return true;
   // [(finish for_auto_code_user)] `{`$arg_id`}
`}
`{`@eq`(`'for_store`'`,`$section`)\
   // [(start for_auto_code_user)] `{`$arg_id`}
`{`@eq`(`$arg_inc_clones`,`'`'`)\
   if( is_create && is_null( get_obj( ).`{`$arg_field`}( ) ) )\
`,\
   if( is_create
    && ( !get_obj( ).get_clone_key( ).empty( ) || is_null( get_obj( ).`{`$arg_field`}( ) ) ) )\
`}
   {
      class_pointer< `{`$module_name`}_`{`$arg_auto_class`} > cp_auto_code( e_create_instance );

`{`@eq`(`$arg_key`,`'`'`)`{`;NOTE: This can be removed when modeller.exe is no longer used.`}\
      string key( get_obj( ).get_lock_class_id( ) );
      key += "X" + to_string( c_field_id_`{`$arg_field`} );

      cp_auto_code->set_instance( key );\
`,\
      cp_auto_code->set_instance( "`{`$arg_key`}" );\
`}

      string next_value;
      cp_auto_code->`{`$arg_inc_proc`}( next_value );
      if( next_value.empty( ) ) // FUTURE: The error message itself should be a module string.
         throw runtime_error( "Unable to automatically generate value for `{`$arg_field`/_`/ `}" );

      get_obj( ).`{`$arg_field`}( next_value );
   }
   // [(finish for_auto_code_user)] `{`$arg_id`}
`}
