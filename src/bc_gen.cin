; Copyright (c) 2021-2023 CIYAM Developers
;
; Distributed under the MIT/X11 software license, please refer to the file license.txt
; in the root project directory or http://www.opensource.org/licenses/mit-license.php.
;
<std.fissile
;
HUB=
DEMO=
SEED=$2
IDENT=
OTHER=
BACKUP=
SHARED=
CHANNEL=
TEST_CHAIN=
;
@ifeq "$1" "-hub"
HUB=1
@else
@ifeq "$1" "-shared"
SHARED=1
@else
@ifeq "$1" "-backup"
BACKUP=1
@else
OTHER=$1
CHANNEL=1
@endif
@endif
@endif
;
@ifeq "$SEED" ""
#Usage: bc_gen.cin -hub|-backup|-shared|<[alias:]other_ident> <seed>
@else
ERROR=
;
@label NEXT
;
@ifdef $HUB
.system_variable @blockchain_peer_hub_identity
@ifdef $OUTPUT
ERROR=Hub identity already exists.
#Error: $ERROR
@label END
@endif
@endif
@skip
@:NEXT
;
@ifdef $BACKUP
.system_variable @blockchain_backup_identity
@ifdef $OUTPUT
ERROR=Backup identity already exists.
#Error: $ERROR
@label END
@endif
@endif
@skip
@:NEXT
;
@ifdef $SHARED
.system_variable @blockchain_shared_identity
@ifdef $OUTPUT
ERROR=Shared identity already exists.
#Error: $ERROR
@label END
@endif
@endif
@skip
@:NEXT
;
@ifdef $OTHER
SPLIT=@repstr:\:/\n:$OTHER
@ifdef %SPLIT:2%
IDENT=%SPLIT:1%
OTHER=%SPLIT:2%
@endif
@endif
;
@ifeq "$OTHER" "6b24210e8"
DEMO=1
@endif
@ifeq "$OTHER" "6f2680b40"
DEMO=1
@endif
;
@ifeq "$SEED" "de604cee0755a3d81944ea96aed12681"
MULTIPLE=5
TEST_CHAIN=1
@else
MULTIPLE=50
.identity -raw
@ifeq "$OUTPUT" "17b4687afd135573a47f1e64ff43de0b4a3c53be"
DEMO=1
@endif
@ifeq "$OUTPUT" "c38bb12065f512ef119022f56c22dce665afe8a0"
DEMO=1
@endif
@endif
;
SQUARED=@$MULTIPLE*$MULTIPLE
;
MULTIPLE=@$MULTIPLE-1
SQUARED=@$SQUARED-1
;
.session_variable @uuid
UUID=$OUTPUT
;
@ifdef $CHANNEL
@ifndef $IDENT
.system_variable @blockchain_backup_identity
@ifndef $OUTPUT
ERROR=No backup blockchain identity was found.
#Error: $ERROR
@label END
@else
IDENT=$OUTPUT
@endif
@endif
@endif
@skip
@:NEXT
;
@ifdef $CHANNEL
<channel_identity.cin $IDENT $OTHER
IDENT=$COMBINED
@endif
;
@ifndef $HUB
@ifndef $SHARED
@ifndef $CHANNEL
.crypto_hash $SEED -s=-0
ENTROPY_HASH_PRIMARY=$OUTPUT
;
.crypto_hash $SEED -s=-$MULTIPLE
ENTROPY_HASH_SECONDARY=$OUTPUT
;
.crypto_hash $SEED -s=-$SQUARED
ENTROPY_HASH_TERTIARY=$OUTPUT
@else
.crypto_hash $SEED -s=%IDENT%0
ENTROPY_HASH_PRIMARY=$OUTPUT
;
.crypto_hash $SEED -s=$IDENT$MULTIPLE
ENTROPY_HASH_SECONDARY=$OUTPUT
;
.crypto_hash $SEED -s=$IDENT$SQUARED
ENTROPY_HASH_TERTIARY=$OUTPUT
@endif
@else
.crypto_hash $SEED -s=+0
ENTROPY_HASH_PRIMARY=$OUTPUT
;
.crypto_hash $SEED -s=+$MULTIPLE
ENTROPY_HASH_SECONDARY=$OUTPUT
;
.crypto_hash $SEED -s=+$SQUARED
ENTROPY_HASH_TERTIARY=$OUTPUT
@endif
@else
.crypto_hash $SEED -s=#0
ENTROPY_HASH_PRIMARY=$OUTPUT
;
.crypto_hash $SEED -s=#$MULTIPLE
ENTROPY_HASH_SECONDARY=$OUTPUT
;
.crypto_hash $SEED -s=#$SQUARED
ENTROPY_HASH_TERTIARY=$OUTPUT
@endif
;
.crypto_lamport primary $ENTROPY_HASH_PRIMARY
.crypto_lamport secondary $ENTROPY_HASH_SECONDARY
.crypto_lamport tertiary $ENTROPY_HASH_TERTIARY
;
.file_put primary.key bc.$UUID.0.key
.file_put primary.pub bc.$UUID.0.pub
.file_put secondary.key bc.$UUID.$MULTIPLE.key
.file_put secondary.pub bc.$UUID.$MULTIPLE.pub
.file_put tertiary.key bc.$UUID.$SQUARED.key
.file_put tertiary.pub bc.$UUID.$SQUARED.pub
;
.file_crypt -encrypt -cipher=cc bc.$UUID.0.key @sid
.file_crypt -encrypt -cipher=cc bc.$UUID.$MULTIPLE.key @sid
.file_crypt -encrypt -cipher=cc bc.$UUID.$SQUARED.key @sid
;
.system_variable @os
@ifeq "$OUTPUT" "Linux"
~shred primary.key
~shred secondary.key
~shred tertiary.key
@endif
~rm primary.key secondary.key tertiary.key primary.pub secondary.pub tertiary.pub
;
.file_hash bc.$UUID.0.pub
PRIMARY_PUBKEY_HASH=$OUTPUT
;
.encode $PRIMARY_PUBKEY_HASH
PRIMARY_PUBKEY_HASH_ENC=$OUTPUT
;
.file_hash bc.$UUID.0.key
PRIMARY_PRIVKEY_HASH=$OUTPUT
;
.file_hash bc.$UUID.$MULTIPLE.pub
SECONDARY_PUBKEY_HASH=$OUTPUT
;
.file_hash bc.$UUID.$MULTIPLE.key
SECONDARY_PRIVKEY_HASH=$OUTPUT
;
.file_hash bc.$UUID.$SQUARED.pub
TERTIARY_PUBKEY_HASH=$OUTPUT
;
.file_hash bc.$UUID.$SQUARED.key
TERTIARY_PRIVKEY_HASH=$OUTPUT
;
@ifndef $SHARED
@ifndef $CHANNEL
.crypto_hash $PRIMARY_PUBKEY_HASH$SECONDARY_PUBKEY_HASH$TERTIARY_PUBKEY_HASH
IDENTITY_HASH=$OUTPUT
;
IDENT=@substr:0,9:$IDENTITY_HASH
;
;NOTE: If identity is palindromic then increment (or zero) the last character.
;
REVERSE=*!reverse?$IDENT
;
@ifeq "$IDENT" "$REVERSE"
LAST=@substr:8,1:$IDENT
DEC=@hexdec:$LAST
DEC=@$DEC+1
@ifeq "$DEC" "16"
DEC=0
@endif
HEX=@dechex:$DEC
START=@substr:0,8:$IDENT
IDENT=$START$HEX
@endif
@endif
;
@else
.system_variable @blockchain_backup_identity
@ifndef $OUTPUT
ERROR=No backup blockchain identity was found.
#Error: $ERROR
@else
IDENT=*!reverse?$OUTPUT
@endif
@endif
;
.session_variable @blockchain_identity $IDENT
;
@ifndef $ERROR
.file_tag -remove bc.$UUID.0.pub
.file_tag $PRIMARY_PUBKEY_HASH bc.$IDENT.0.pub
;
.file_tag -remove bc.$UUID.0.key
.file_tag $PRIMARY_PRIVKEY_HASH bc.$IDENT.0.key
;
.file_tag -remove bc.$UUID.$MULTIPLE.pub
.file_tag $SECONDARY_PUBKEY_HASH bc.$IDENT.$MULTIPLE.pub
;
.file_tag -remove bc.$UUID.$MULTIPLE.key
.file_tag $SECONDARY_PRIVKEY_HASH bc.$IDENT.$MULTIPLE.key
;
.file_hash bc.$IDENT.$MULTIPLE.pub
.encode $OUTPUT
SECONDARY_PUBKEY_HASH_ENC=$OUTPUT
;
.file_tag -remove bc.$UUID.$SQUARED.pub
.file_tag $TERTIARY_PUBKEY_HASH bc.$IDENT.$SQUARED.pub
;
.file_tag -remove bc.$UUID.$SQUARED.key
.file_tag $TERTIARY_PRIVKEY_HASH bc.$IDENT.$SQUARED.key
;
.file_hash bc.$IDENT.$SQUARED.pub
.encode $OUTPUT
TERTIARY_PUBKEY_HASH_ENC=$OUTPUT
;
@ifndef $HUB
@ifndef $SHARED
@ifndef $CHANNEL
.file_raw -core blob blk:h=0,i=$IDENT\n\
p:$PRIMARY_PUBKEY_HASH_ENC,$SECONDARY_PUBKEY_HASH_ENC,$TERTIARY_PUBKEY_HASH_ENC bc.$IDENT.0.blk
@else
.file_raw -core blob blk:h=0,i=$IDENT,t=@peer_user\n\
p:$PRIMARY_PUBKEY_HASH_ENC,$SECONDARY_PUBKEY_HASH_ENC,$TERTIARY_PUBKEY_HASH_ENC bc.$IDENT.0.blk
@endif
@else
.file_raw -core blob blk:h=0,i=$IDENT,t=$IDENT\n\
p:$PRIMARY_PUBKEY_HASH_ENC,$SECONDARY_PUBKEY_HASH_ENC,$TERTIARY_PUBKEY_HASH_ENC bc.$IDENT.0.blk
@endif
@else
.file_raw -core blob blk:h=0,i=$IDENT,t=@peer_hub\n\
p:$PRIMARY_PUBKEY_HASH_ENC,$SECONDARY_PUBKEY_HASH_ENC,$TERTIARY_PUBKEY_HASH_ENC bc.$IDENT.0.blk
@endif
;
BLOCK_HASH=$OUTPUT
;
.file_hash -q bc.$IDENT.zenith
@ifndef "$OUTPUT"
.file_tag $BLOCK_HASH bc.$IDENT.zenith
@ifndef $CHANNEL
@ifndef $HUB
@ifndef $SHARED
.system_variable >@blockchain_backup_height 0
.system_variable >@blockchain_backup_initial $BLOCK_HASH
.system_variable >@blockchain_backup_identity $IDENT
@else
.system_variable >@blockchain_shared_height 0
.system_variable >@blockchain_shared_initial $BLOCK_HASH
.system_variable >@blockchain_shared_identity $IDENT
@endif
@else
.system_variable >@blockchain_peer_hub_height 0
.system_variable >@blockchain_peer_hub_initial $BLOCK_HASH
.system_variable >@blockchain_peer_hub_identity $IDENT
@endif
@endif
;
HUB_OR_TEST_CHAIN=
@ifdef $HUB
HUB_OR_TEST_CHAIN=1
@endif
@ifdef $TEST_CHAIN
HUB_OR_TEST_CHAIN=1
@endif
;
@ifndef $HUB_OR_TEST_CHAIN
.system_variable @files_area_dir
FILES_AREA_DIR=$OUTPUT
;
@ifdef $DEMO
BACKUP_SIZE=10GB
SHARED_SIZE=1GB
CHANNEL_SIZE=100MB
@else
BACKUP_SIZE=100GB
SHARED_SIZE=10GB
CHANNEL_SIZE=1GB
@endif
;
~mkdir $FILES_AREA_DIR/$IDENT
@ifdef $CHANNEL
~mkdir $FILES_AREA_DIR/$REVERSED
.file_archive -add $FILES_AREA_DIR/$IDENT $CHANNEL_SIZE $IDENT
.file_archive -add $FILES_AREA_DIR/$REVERSED $CHANNEL_SIZE $REVERSED
@else
@ifdef $SHARED
.file_archive -add $FILES_AREA_DIR/$IDENT $SHARED_SIZE $IDENT
.system_variable >@blockchain_shared_archive $FILES_AREA_DIR/$IDENT
@else
.file_archive -add $FILES_AREA_DIR/$IDENT $BACKUP_SIZE $IDENT
@ifndef $ERROR
.system_variable >@blockchain_backup_archive $FILES_AREA_DIR/$IDENT
@endif
@endif
@endif
@endif
@endif
;
@ifndef $ERROR
@ifdef $HUB
#Created keys and genesis block for identity '$IDENT'.
@else
@ifndef $CHANNEL
#Created keys, genesis block and file archive for identity '$IDENT'.
@else
#Created keys, genesis block and file archives for identity '$IDENT' (and '$REVERSED').
@endif
@endif
@endif
;
@endif
;
@:END
;
@endif
