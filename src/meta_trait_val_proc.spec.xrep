`{`@eq`(`'procedure`'`,`$section`)\
   // [(start meta_trait_val_proc)] `{`$arg_id`}
`{`$enum_name`=`$arg_field`}`{`$enum_name`=`@lower`(`$enum_name`)`}\
`{`$field_name`=`$class_name`}`{`$field_name`^`'_`'`}`{`$field_name`^`$arg_field`}`{`$field_name`=`@lower`(`$field_name`)`}\
`{`@eq`(`$arg_field`,`'Field_type`'`)\
   if( get_obj( ).`{`$arg_field`}( ) != c_enum_`{`$enum_name`}_Any_Type )
   {
      if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Any_Primitive )
      {
         if( !`{`$arg_parent_arg`}.empty( ) )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a primitive"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Any_Relationship )
      {
         if( `{`$arg_parent_arg`}.empty( ) )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a relationship"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Self_Relationship )
      {
         if( `{`$arg_parent_arg`}.empty( ) || `{`$arg_parent_arg`} != `{`$arg_class_arg`} )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a self-relationship"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Non_Self_Relationship )
      {
         if( `{`$arg_parent_arg`}.empty( ) || `{`$arg_parent_arg`} == `{`$arg_class_arg`} )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a (non-self) relationship"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Any_Text_Type )
      {
         if( Primitive == c_enum_`{`$enum_name`}_bool
          || Primitive == c_enum_`{`$enum_name`}_int || Primitive == c_enum_`{`$enum_name`}_numeric )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a text type"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Any_Scalar_Type )
      {
         bool in_error = true;
         if( `{`$arg_parent_arg`}.empty( ) )
         {
            if( Primitive == c_enum_`{`$enum_name`}_datetime
             || Primitive == c_enum_`{`$enum_name`}_date || Primitive == c_enum_`{`$enum_name`}_time
             || Primitive == c_enum_`{`$enum_name`}_numeric || Primitive == c_enum_`{`$enum_name`}_int || Primitive == c_enum_`{`$enum_name`}_bool )
               in_error = false;
         }

         if( in_error )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a scalar type"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Any_Math_Type )
      {
         bool in_error = true;
         if( `{`$arg_parent_arg`}.empty( ) )
         {
            if( Primitive == c_enum_`{`$enum_name`}_numeric
             || Primitive == c_enum_`{`$enum_name`}_int || Primitive == c_enum_`{`$enum_name`}_bool )
               in_error = false;
         }

         if( in_error )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a math type"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Calendar_Type )
      {
         bool in_error = true;
         if( `{`$arg_parent_arg`}.empty( ) )
         {
            if( Primitive == c_enum_`{`$enum_name`}_datetime || Primitive == c_enum_`{`$enum_name`}_date )
               in_error = false;
         }

         if( in_error )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a calendar type"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) < c_enum_`{`$enum_name`}_Any_Text_Type ) // i.e. all primitives
      {
         if( !`{`$arg_parent_arg`}.empty( )
          || ( `{`$arg_primitive_arg`} >= 0 && `{`$arg_primitive_arg`} != get_obj( ).`{`$arg_field`}( ) ) )
         {
            string primitive_name;

            if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_string )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_string ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_datetime )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_datetime ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_date )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_date ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_time )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_time ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_numeric )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_numeric ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_int )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_int ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_bool )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_bool ) );

            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a " + primitive_name + " primitive"; // FUTURE: Should be in module_strings...
         }
      }
      else
         throw runtime_error( "unexpected `{`$arg_field`} value " + to_string( get_obj( ).`{`$arg_field`}( ) ) + " in `{`$arg_procedure`}" );
   }
`,\
`@eq`(`$arg_field`,`'Source_type`'`)\
   if( `{`$arg_primitive_arg`} >= 0 && get_obj( ).`{`$arg_field`}( ) != c_enum_`{`$enum_name`}_Any_Type )
   {
      if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Any_Text_Type )
      {
         if( `{`$arg_primitive_arg`} >= c_enum_`{`$enum_name`}_numeric )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a text type"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Any_Conditional )
      {
         if( `{`$arg_primitive_arg`} < c_enum_`{`$enum_name`}_int || `{`$arg_primitive_arg`} > c_enum_`{`$enum_name`}_bool )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a conditional type"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) < c_enum_`{`$enum_name`}_Any_Text_Type ) // i.e. all primitives
      {
         if( `{`$arg_primitive_arg`} != get_obj( ).`{`$arg_field`}( ) )
         {
            string primitive_name;

            if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_string )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_string ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_datetime )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_datetime ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_date )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_date ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_time )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_time ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_numeric )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_numeric ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_int )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_int ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_bool )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_bool ) );

            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a " + primitive_name + " primitive"; // FUTURE: Should be in module_strings...
         }
      }
      else
         throw runtime_error( "unexpected `{`$arg_field`} value " + to_string( get_obj( ).`{`$arg_field`}( ) ) + " in `{`$arg_procedure`}" );
   }
`,\
`@eq`(`$arg_field`,`'Test_Field_type`'`)\
   if( `{`$arg_primitive_arg`} >= 0 && get_obj( ).`{`$arg_field`}( ) != c_enum_`{`$enum_name`}_Any_Type )
   {
      if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Any_Text_Type )
      {
         if( `{`$arg_primitive_arg`} >= c_enum_`{`$enum_name`}_numeric )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a text type"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Any_Conditional )
      {
         if( `{`$arg_primitive_arg`} < c_enum_`{`$enum_name`}_int || `{`$arg_primitive_arg`} > c_enum_`{`$enum_name`}_bool )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a conditional type"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Any_Value_Or_Conditional )
      {
         if( `{`$arg_test_value_arg`}.empty( )
          && ( `{`$arg_primitive_arg`} < c_enum_`{`$enum_name`}_int || `{`$arg_primitive_arg`} > c_enum_`{`$enum_name`}_bool ) )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a conditional type if no value provided"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Any_Scalar_Type )
      {
         bool in_error = true;

         if( `{`$arg_primitive_arg`} == c_enum_`{`$enum_name`}_datetime
          || `{`$arg_primitive_arg`} == c_enum_`{`$enum_name`}_date || `{`$arg_primitive_arg`} == c_enum_`{`$enum_name`}_time
          || `{`$arg_primitive_arg`} == c_enum_`{`$enum_name`}_numeric || `{`$arg_primitive_arg`} == c_enum_`{`$enum_name`}_int || `{`$arg_primitive_arg`} == c_enum_`{`$enum_name`}_bool )
            in_error = false;

         if( in_error )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a scalar type"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) < c_enum_`{`$enum_name`}_Any_Text_Type ) // i.e. all primitives
      {
         if( `{`$arg_primitive_arg`} != get_obj( ).`{`$arg_field`}( ) )
         {
            string primitive_name;

            if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_string )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_string ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_datetime )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_datetime ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_date )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_date ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_time )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_time ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_numeric )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_numeric ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_int )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_int ) );
            else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_bool )
               primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_bool ) );

            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a " + primitive_name + " primitive"; // FUTURE: Should be in module_strings...
         }
      }
      else
         throw runtime_error( "unexpected `{`$arg_field`} value " + to_string( get_obj( ).`{`$arg_field`}( ) ) + " in `{`$arg_procedure`}" );
   }
`,\
`@eq`(`$arg_field`,`'Source_Parent_type`'`)\
   if( get_obj( ).`{`$arg_field`}( ) != c_enum_`{`$enum_name`}_Any_Relationship )
   {
      if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Self_Relationship )
      {
         if( !`{`$arg_parent_arg`}.empty( ) && `{`$arg_parent_arg`} != `{`$arg_class_arg`} )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a self-relationship"; // FUTURE: Should be in module_strings...
      }
      else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_Non_Self_Relationship )
      {
         if( !`{`$arg_parent_arg`}.empty( ) && `{`$arg_parent_arg`} == `{`$arg_class_arg`} )
            `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a (non-self) relationship"; // FUTURE: Should be in module_strings...
      }
      else
         throw runtime_error( "unexpected `{`$arg_field`} value " + to_string( get_obj( ).`{`$arg_field`}( ) ) + " in `{`$arg_procedure`}" );
   }
`,\
`@eq`(`$arg_field`,`'Procedure_Arg_primitive`'`)\
   if( get_obj( ).`{`$arg_field`}( ) != c_enum_`{`$enum_name`}_Any_Primitive )
   {
      if( `{`$arg_proc_arg_type_arg`} != get_obj( ).`{`$arg_field`}( ) )
      {
         string primitive_name;

         if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_string )
            primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_string ) );
         else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_datetime )
            primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_datetime ) );
         else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_date )
            primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_date ) );
         else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_time )
            primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_time ) );
         else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_numeric )
            primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_numeric ) );
         else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_int )
            primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_int ) );
         else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_bool )
            primitive_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_bool ) );

         `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be a " + primitive_name + " primitive"; // FUTURE: Should be in module_strings...
      }
   }
`,\
`@eq`(`$arg_field`,`'Procedure_Arg_type`'`)\
   if( get_obj( ).`{`$arg_field`}( ) != c_enum_`{`$enum_name`}_Any_Type )
   {
      if( `{`$arg_proc_arg_class_arg`} != get_obj( ).`{`$arg_field`}( ) )
      {
         string type_name;

         if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_in )
            type_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_in ) );
         else if( get_obj( ).`{`$arg_field`}( ) == c_enum_`{`$enum_name`}_out )
            type_name = GMS( get_enum_string_field_type( c_enum_`{`$enum_name`}_out ) );

         `{`$arg_error_arg`} = GMS( "field_`{`@lower`(`$class_name`)`}_`{`@lower`(`$arg_field`)`}" ) + " must be type " + type_name; // FUTURE: Should be in module_strings...
      }
   }
`,\
#error Unexpected field name `{`$arg_field`} for `{`$arg_procedure`}...
`}\
   // [(finish meta_trait_val_proc)] `{`$arg_id`}
`}
