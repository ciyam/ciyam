; Copyright (c) 2021-2022 CIYAM Developers
;
; Distributed under the MIT/X11 software license, please refer to the file license.txt
; in the root project directory or http://www.opensource.org/licenses/mit-license.php.
;
ERROR=
@ifeq "$1" ""
ERROR=1
@endif
@ifeq "$2" ""
ERROR=1
@endif
;
@ifeq "$ERROR" "1"
#Usage: bc_gen_data.cin <ident> <height> [<tree>]
@else
;
IDENT=$1
HEIGHT=$2
;
TREE=$3
;
@ifneq "$IDENT" "bc139fc15"
MULTIPLE=100
UTIME=@unix:
@else
HRS_01=3600
HRS_24=@$HRS_01*24
;
HRS_HEIGHT=@$HRS_24*$HEIGHT
;
MULTIPLE=10
UTIME=@1635400000+$HRS_HEIGHT
@endif
;
@ifeq "$HEIGHT" "0"
#Error: Height must be greater than zero.
@else
;
@ifndef $TREE
.file_tags -i=ciyam
@ifdef $OUTPUT
TREE=ciyam
@else
@endif
@endif
;
MODULUS=@$HEIGHT#$MULTIPLE
;
NEED_SECONDARY=
SEC_PUB_KEY_HASH_ENC=
;
@ifeq "$MODULUS" "0"
.file_hash bc.$IDENT.s$HEIGHT.pub
.encode $OUTPUT
SEC_PUB_KEY_HASH_ENC=$OUTPUT
@endif
;
@ifeq "$HEIGHT" "$MULTIPLE"
NEED_SECONDARY=1
@else
SQUARED=@$MULTIPLE*$MULTIPLE
MODULUS=@$HEIGHT#$SQUARED
@ifeq "$MODULUS" "0"
NEED_SECONDARY=1
@endif
@endif
;
@ifdef $NEED_SECONDARY
.file_hash bc.$IDENT.t$HEIGHT.pub
.encode $OUTPUT
SEC_PUB_KEY_HASH_ENC=$SEC_PUB_KEY_HASH_ENC,$OUTPUT
@endif
;
LAST=@$HEIGHT-1
;
.file_hash bc.$IDENT.p$HEIGHT.pub
@ifndef $ERROR
.encode $OUTPUT
PUB_KEY_HASH_ENC=$OUTPUT
;
.crypto_hash @sid -s=#%HEIGHT%
.crypto_chain 1440 -b64 $OUTPUT
HIND_HASH_ENC=%OUTPUT:1440%
;
@ifeq "$LAST" "0"
@ifndef $TREE
.file_raw -core blob dat:h=$HEIGHT,i=$IDENT,n=0,v=1\n\
h:$HIND_HASH_ENC\n\
p:$PUB_KEY_HASH_ENC\n\
u:$UTIME bc.$IDENT.$HEIGHT.dat
@else
.file_hash $TREE
@ifndef $ERROR
.encode $OUTPUT
TREE_ROOT_HASH_ENC=$OUTPUT
.file_info -total_items $TREE
NUM_TREE_ITEMS=$OUTPUT
;
.file_raw -core blob dat:h=$HEIGHT,i=$IDENT,n=$NUM_TREE_ITEMS,v=1\n\
h:$HIND_HASH_ENC\n\
p:$PUB_KEY_HASH_ENC\n\
t:$TREE_ROOT_HASH_ENC\n\
u:$UTIME bc.$IDENT.$HEIGHT.dat
@endif
@endif
@else
.file_hash bc.$IDENT.$LAST.dat
@ifndef $ERROR
.encode $OUTPUT
LAST_HASH_ENC=$OUTPUT
;
@ifndef $TREE
@ifndef $SEC_PUB_KEY_HASH_ENC
.file_raw -core blob dat:h=$HEIGHT,i=$IDENT,n=0,v=1\n\
h:$HIND_HASH_ENC\n\
l:$LAST_HASH_ENC\n\
p:$PUB_KEY_HASH_ENC\n\
u:$UTIME bc.$IDENT.$HEIGHT.dat
@else
.file_raw -core blob dat:h=$HEIGHT,i=$IDENT,n=0,v=1\n\
h:$HIND_HASH_ENC\n\
l:$LAST_HASH_ENC\n\
p:$PUB_KEY_HASH_ENC\n\
s:$SEC_PUB_KEY_HASH_ENC\n\
u:$UTIME bc.$IDENT.$HEIGHT.dat
@endif
@else
.file_hash $TREE
@ifndef $ERROR
.encode $OUTPUT
TREE_ROOT_HASH_ENC=$OUTPUT
.file_info -total_items $TREE
NUM_TREE_ITEMS=$OUTPUT
;
@ifndef $SEC_PUB_KEY_HASH_ENC
.file_raw -core blob dat:h=$HEIGHT,i=$IDENT,n=$NUM_TREE_ITEMS,v=1\n\
h:$HIND_HASH_ENC\n\
l:$LAST_HASH_ENC\n\
p:$PUB_KEY_HASH_ENC\n\
t:$TREE_ROOT_HASH_ENC\n\
u:$UTIME bc.$IDENT.$HEIGHT.dat
@else
.file_raw -core blob dat:h=$HEIGHT,i=$IDENT,n=$NUM_TREE_ITEMS,v=1\n\
h:$HIND_HASH_ENC\n\
l:$LAST_HASH_ENC\n\
p:$PUB_KEY_HASH_ENC\n\
s:$SEC_PUB_KEY_HASH_ENC\n\
t:$TREE_ROOT_HASH_ENC\n\
u:$UTIME bc.$IDENT.$HEIGHT.dat
@endif
@endif
@endif
@endif
@endif
@endif
;
@endif
;
@endif
