`{`#makefile.vars.xrep @`}
##
## Usage:
##  make [<target1> [<target2>] [...]]
##
##  where:
##  <target>   is:                  to:
##             all                  make all targets
##             dtm                  creates make.dtm
##             clean                clean all targets
##             usage                display this output
##
`{`[`$libs`;20`,##             \? make \$.lib target`+\n`]`}
`{`[`$dyn_libs`;20`,##             \? make \$.dll target`+\n`]`}
`{`[`$executables`;20`,##             \? make \$.exe target`+\n`]`}
##

.autodepend

!ifndef BCCDIR
! error Need to set BCCDIR environment variable (e.g. C:\Borland\BCC55)
!endif

BCB=$(BCCDIR)

# Flags for tools...
THREADS_SINGLE=-tWM-
THREADS_MULTIPLE=-tWM

DYNAMIC_LIBRARY=-WD
DYNAMIC_RUNTIME=-D_RTLDLL

!ifdef DEBUG
DEBUG_CFLAGS=-D_DEBUG -v -y -Od -r- -vi-
DEBUG_LFLAGS=-v
DEBUG_AFLAGS=/P512
!else
DEBUG_CFLAGS=-O2
DEBUG_LFLAGS=
DEBUG_AFLAGS=/P64
!endif

!ifdef CODEGUARD
CODEGUARD_CFLAGS=-vG
CODEGUARD_LIBRARY=cg32.lib
!else
CODEGUARD_CFLAGS=
CODEGUARD_LIBRARY=
!endif

CPPFLAGS=-w-8004 -I. $(CFLAGS) $(DEBUG_CFLAGS) $(CODEGUARD_CFLAGS)
BINDFLAGS=$(DEBUG_AFLAGS)
LINKFLAGS=-q $(DEBUG_LFLAGS)
EXPORTFLAGS=-w

# Libraries and object files...
CONSOLE_RTOBJS=c0x32.obj
CONSOLE_LFLAGS=-ap -Tpe

DYNAMIC_RTOBJS=c0d32.obj
DYNAMIC_LFLAGS=-Tpd

RTL_STATIC_STHREAD=cw32.lib
RTL_STATIC_MTHREAD=cw32mt.lib

RTL_DYNAMIC_STHREAD=cw32i.lib
RTL_DYNAMIC_MTHREAD=cw32mti.lib

COMMON_LIBS=import32.lib $(CODEGUARD_LIBRARY)

WINSOCK_LIBS=$(BCB)\Lib\Psdk\wsock32.lib $(BCB)\Lib\Psdk\iphlpapi.lib
OPENSSL_LIBS=libeay32.lib ssleay32.lib

LIBFCGI_LIBS=libfcgi.lib

LIBHARU_LIBS=libhpdf.lib

LIBICONV_LIBS=iconv.lib

MYSQL_LIBS=libmysql.lib

ZLIB_LIBS=zlib1.lib

# Tools and implicit rules...
CPP=bcc32.exe

BIND=@echo Binding $&............... &tlib
LINK=@echo Linking $&............... &ilink32
EXPORT=@echo Exporting $&............... &implib

# Remove implicit .cpp to .exe rule to ensure correct linkage.
.cpp.exe:

# Change implicit .cpp to .obj rule to support multiple source file compilation.
.cpp.obj:
 @compile.bat {$< }
# @test_compile.bat {$< }

# Custom rule to generate command definitions.
.cms.cmh:
 @generate_commands $&.cms

#CPP_NORMAL_OPT=STATIC_RTL_SINGLE_THREAD
#CPP_NORMAL_OPT=STATIC_RTL_MULTIPLE_THREADS
#CPP_NORMAL_OPT=DYNAMIC_RTL_SINGLE_THREAD
CPP_NORMAL_OPT=DYNAMIC_RTL_MULTIPLE_THREADS

#CPP_DYNAMIC_OPT=DYNAMIC_RTL_SINGLE_THREAD
CPP_DYNAMIC_OPT=DYNAMIC_RTL_MULTIPLE_THREADS

CPP_NORMAL_SRTL_ST=@$(CPP) -q $(CPPFLAGS) $(THREADS_SINGLE) -H=$&.csm -Hc -c
CPP_NORMAL_SRTL_MT=@$(CPP) -q $(CPPFLAGS) $(THREADS_MULTIPLE) -H=$&.csm -Hc -c

CPP_NORMAL_DRTL_ST=@$(CPP) -q $(CPPFLAGS) $(DYNAMIC_RUNTIME) $(THREADS_SINGLE) -H=$&.csm -Hc -c
CPP_NORMAL_DRTL_MT=@$(CPP) -q $(CPPFLAGS) $(DYNAMIC_RUNTIME) $(THREADS_MULTIPLE) -H=$&.csm -Hc -c

CPP_DYNAMIC_DRTL_ST=@$(CPP) -q $(CPPFLAGS) $(DYNAMIC_LIBRARY) $(DYNAMIC_RUNTIME) $(THREADS_SINGLE) -H=$&.csm -Hc -c
CPP_DYNAMIC_DRTL_MT=@$(CPP) -q $(CPPFLAGS) $(DYNAMIC_LIBRARY) $(DYNAMIC_RUNTIME) $(THREADS_MULTIPLE) -H=$&.csm -Hc -c

BIND_NORMAL=$(BINDFLAGS) $@

LINK_NORMAL_SRTL_ST=$(LINKFLAGS) $(CONSOLE_LFLAGS) $** $(CONSOLE_RTOBJS), $&.exe, ,$(COMMON_LIBS) $(RTL_STATIC_STHREAD)
LINK_NORMAL_SRTL_MT=$(LINKFLAGS) $(CONSOLE_LFLAGS) $** $(CONSOLE_RTOBJS), $&.exe, ,$(COMMON_LIBS) $(RTL_STATIC_MTHREAD)

LINK_NORMAL_DRTL_ST=$(LINKFLAGS) $(CONSOLE_LFLAGS) $** $(CONSOLE_RTOBJS), $&.exe, ,$(COMMON_LIBS) $(RTL_DYNAMIC_STHREAD)
LINK_NORMAL_DRTL_MT=$(LINKFLAGS) $(CONSOLE_LFLAGS) $** $(CONSOLE_RTOBJS), $&.exe, ,$(COMMON_LIBS) $(RTL_DYNAMIC_MTHREAD)

LINK_DYNAMIC_DRTL_ST=$(LINKFLAGS) $(DYNAMIC_LFLAGS) $** $(DYNAMIC_RTOBJS), $&.dll, ,$(COMMON_LIBS) $(RTL_DYNAMIC_STHREAD)
LINK_DYNAMIC_DRTL_MT=$(LINKFLAGS) $(DYNAMIC_LFLAGS) $** $(DYNAMIC_RTOBJS), $&.dll, ,$(COMMON_LIBS) $(RTL_DYNAMIC_MTHREAD)

!if $(CPP_NORMAL_OPT) == STATIC_RTL_SINGLE_THREAD
CPP_NORMAL=$(CPP_NORMAL_SRTL_ST)
LINK_NORMAL=$(LINK_NORMAL_SRTL_ST)
!elif $(CPP_NORMAL_OPT) == STATIC_RTL_MULTIPLE_THREADS
CPP_NORMAL=$(CPP_NORMAL_SRTL_MT)
LINK_NORMAL=$(LINK_NORMAL_SRTL_MT)
!elif $(CPP_NORMAL_OPT) == DYNAMIC_RTL_SINGLE_THREAD
CPP_NORMAL=$(CPP_NORMAL_DRTL_ST)
LINK_NORMAL=$(LINK_NORMAL_DRTL_ST)
!elif $(CPP_NORMAL_OPT) == DYNAMIC_RTL_MULTIPLE_THREADS
CPP_NORMAL=$(CPP_NORMAL_DRTL_MT)
LINK_NORMAL=$(LINK_NORMAL_DRTL_MT)
!else
! error Unexpected CPP_NORMAL_OPT value $(CPP_NORMAL_OPT)
!endif

!if $(CPP_DYNAMIC_OPT) == DYNAMIC_RTL_SINGLE_THREAD
CPP_DYNAMIC=$(CPP_DYNAMIC_DRTL_ST)
LINK_DYNAMIC=$(LINK_DYNAMIC_DRTL_ST)
!elif $(CPP_DYNAMIC_OPT) == DYNAMIC_RTL_MULTIPLE_THREADS
CPP_DYNAMIC=$(CPP_DYNAMIC_DRTL_MT)
LINK_DYNAMIC=$(LINK_DYNAMIC_DRTL_MT)
!else
! error Unexpected CPP_DYNAMIC_OPT value $(CPP_DYNAMIC_OPT)
!endif

`{`[`$libs`,\
TARGET_\^=\$.lib
TARGET_\^_OBJECTS=`{`[`$\$_cpps`/.cpp`/.obj`,\\?`+\\\\\\n `]`}
TARGET_\^_ERRFILE=\$.err
`+
`]`}
`{`[`$dyn_libs`,\
TARGET_\^=\$.dll
TARGET_\^_EXPORT=\$.lib
TARGET_\^_OBJECTS=`{`[`$\$_cpps`/.cpp`/.obj`,\\?`+\\\\\\n `]`}\
`{`?`$\$_cmss`[`$\$_cmss`/.cms`/.cmh`'\\nTARGET_\^_COMMANDS=`'\\?`+\\\\\\\n `]`}
TARGET_\^_ERRFILE=\$.err
`+
`]`}
`{`[`$executables`,\
TARGET_\^=\$.exe
TARGET_\^_OBJECTS=`{`[`$\$_cpps`/.cpp`/.obj`,\\?`+\\\\\\n `]`}
`{`?`$\$_cmss`[`$\$_cmss`/.cms`/.cmh`'TARGET_\^_COMMANDS=`'\\?`+\\\\\\\n `]\\n`}`+
`]`}
`{`[`$dlink_targets`,\
TARGET_\^=\$.dll
`]`}
ALL_TARGETS=\
`{`[`$all_targets`, $(TARGET_\^)`+\\
`]`}

ALL_EXPORTS=\
`{`[`$dyn_libs`, $(TARGET_\^_EXPORT)`+\\
`]`}

ALL_OBJECTS=\
`{`[`$all_targets`, $(TARGET_\^_OBJECTS)`+\\
`]`}

`{`$all_cms_targets`=`'`'`}
`{`[`$all_targets`,`{`(`?`$\$_cmss`)`$all_cms_targets`=`$all_cms_targets`+`'\$`'`}`]`}
ALL_COMMANDS=\
`{`[`$all_cms_targets`, $(TARGET_\^_COMMANDS)`+\\
`]`}

usage: make_usage

all: $(ALL_TARGETS)

`{`[`$libs`,\$: $(TARGET_\^)`+\n`]`}
`{`[`$dyn_libs`,\$: $(TARGET_\^)`+\n`]`}
`{`[`$executables`,\$: $(TARGET_\^)`+\n`]`}

dtm:
 @echo %date% %time%>make.dtm

make_usage:
 @usage.bat makefile.bcb

`{`[`$libs`,\
$(TARGET_\^:.lib=.compile):
`{`@eq`(`'\$`'`,`'ciyam_base`'`)\
 @echo if not exist "sid.enc.chk" goto skip >compile.bat
 @echo call touch.bat sid.enc.flg >>compile.bat
 @echo crypt -t sid.enc >>compile.bat
 @echo :skip >>compile.bat
 @echo $(CPP_NORMAL) %* >>compile.bat
 @echo if not exist sid.enc.flg goto end >>compile.bat
 @echo crypt -c -t sid.enc >>compile.bat
 @echo del sid.enc.flg >>compile.bat
 @echo :end >>compile.bat`,
 @echo $(CPP_NORMAL) %* >compile.bat`}

$(TARGET_\^):: $(TARGET_\^:.lib=.compile)

$(TARGET_\^):: $(TARGET_\^_OBJECTS)
 @$(BIND) $(BIND_NORMAL) @&&!
-+$(?: = &^
-+)
! >$(TARGET_\^_ERRFILE)
 @filter -r "^-+" "^TLIB " "^Warning: '.*' not found in library$" <$(TARGET_\^_ERRFILE)
 @del $(TARGET_\^_ERRFILE)
`+
`]`}
`{`[`$dyn_libs`,\
$(TARGET_\^:.dll=.compile):
 @echo $(CPP_DYNAMIC) %* >compile.bat

$(TARGET_\^)::\
`{`?`$\$_libs`[`$\$_libs`, $(TARGET_\\^)`]`}\
`{`?`$\$_dylk`[`$\$_dylk`, $(TARGET_\\^)`]`}\
`{`(`?`$\$_cmss`) $(TARGET_GENERATE_COMMANDS) $(TARGET_\^_COMMANDS)`} $(TARGET_\^:.dll=.compile)

$(TARGET_\^):: $(TARGET_\^_OBJECTS)\
`{`?`$\$_libs`[`$\$_libs`, $(TARGET_\\^)`]`}\
`{`?`$\$_dylk`[`$\$_dylk`, $(TARGET_\\^:.dll=.lib)`]`}
 $(LINK) @&&!
 $(LINK_DYNAMIC)`{`(`?`$\$_issk`) $(WINSOCK_LIBS)`}`{`(`?`$\$_ossl`) $(OPENSSL_LIBS)`}\
`{`(`?`$\$_haru`) $(LIBHARU_LIBS)`}`{`(`?`$\$_icnv`) $(LIBICONV_LIBS)`}`{`(`?`$\$_msql`) $(MYSQL_LIBS)`}`{`(`?`$\$_zlib`) $(ZLIB_LIBS)`}
!
 $(EXPORT) $(EXPORTFLAGS) $(TARGET_\^:.dll=.lib) $(TARGET_\^) >$(TARGET_\^_ERRFILE)
 @filter -r "^$" "^Borland Implib" <$(TARGET_\^_ERRFILE)
 @del $(TARGET_\^_ERRFILE)
`+
`]`}
`{`[`$executables`,\
$(TARGET_\^:.exe=.compile):
`{`@eq`(`'\$`'`,`'ciyam_interface`'`)\
 @echo if not exist "sid.enc.chk" goto skip >compile.bat
 @echo call touch.bat sid.enc.flg >>compile.bat
 @echo crypt -t sid.enc >>compile.bat
 @echo :skip >>compile.bat
 @echo $(CPP_NORMAL) %* >>compile.bat
 @echo if not exist sid.enc.flg goto end >>compile.bat
 @echo crypt -c -t sid.enc >>compile.bat
 @echo del sid.enc.flg >>compile.bat
 @echo :end >>compile.bat`,
 @echo $(CPP_NORMAL) %* >compile.bat`}

$(TARGET_\^)::\
`{`?`$\$_libs`[`$\$_libs`, $(TARGET_\\^)`]`}\
`{`?`$\$_dylk`[`$\$_dylk`, $(TARGET_\\^)`]`}\
`{`(`?`$\$_cmss`) $(TARGET_GENERATE_COMMANDS) $(TARGET_\^_COMMANDS)`} $(TARGET_\^:.exe=.compile)

$(TARGET_\^):: $(TARGET_\^_OBJECTS)\
`{`?`$\$_libs`[`$\$_libs`, $(TARGET_\\^)`]`}\
`{`?`$\$_dylk`[`$\$_dylk`, $(TARGET_\\^:.dll=.lib)`]`}
 $(LINK) @&&!
 $(LINK_NORMAL)`{`(`?`$\$_issk`) $(WINSOCK_LIBS)`}`{`(`?`$\$_ossl`) $(OPENSSL_LIBS)`}\
`{`(`?`$\$_fcgi`) $(LIBFCGI_LIBS)`}`{`(`?`$\$_haru`) $(LIBHARU_LIBS)`}`{`(`?`$\$_icnv`) $(LIBICONV_LIBS)`}`{`(`?`$\$_msql`) $(MYSQL_LIBS)`}`{`(`?`$\$_zlib`) $(ZLIB_LIBS)`}
!`{`(`?`$\$_gext`)`[`$\$_gext`!
 @if exist *.\\$ del *.\\$`]`}
`+
`]`}
clean::
 @killfiles $(ALL_TARGETS)
 @killfiles $(ALL_TARGETS:.exe=.csm)
 @killfiles $(ALL_TARGETS:.dll=.csm)
 @killfiles $(ALL_TARGETS:.lib=.csm)
 @killfiles $(ALL_TARGETS:.exe=.^#*)
 @killfiles $(ALL_TARGETS:.dll=.^#*)
 @killfiles $(ALL_TARGETS:.lib=.^#*)
 @killfiles $(ALL_TARGETS:.exe=.ilc)
 @killfiles $(ALL_TARGETS:.dll=.ilc)
 @killfiles $(ALL_TARGETS:.exe=.ild)
 @killfiles $(ALL_TARGETS:.dll=.ild)
 @killfiles $(ALL_TARGETS:.exe=.ilf)
 @killfiles $(ALL_TARGETS:.dll=.ilf)
 @killfiles $(ALL_TARGETS:.exe=.ils)
 @killfiles $(ALL_TARGETS:.dll=.ils)
 @killfiles $(ALL_TARGETS:.exe=.map)
 @killfiles $(ALL_TARGETS:.dll=.map)
 @killfiles $(ALL_TARGETS:.exe=.tds)
 @killfiles $(ALL_TARGETS:.dll=.tds)
 @killfiles $(ALL_EXPORTS)
 @killfiles $(ALL_OBJECTS)
 @killfiles $(ALL_COMMANDS)

