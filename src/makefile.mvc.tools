##
## Usage:
##  make [<target1> [<target2>] [...]]
##
##  where:
##  <target>   is:                  to:
##             all                  make all targets
##             dtm                  creates make.dtm
##             clean                clean all targets
##             usage                display this output
##
##             base                 make base.lib target
##             xrep                 make xrep.exe target
##             xvars                make xvars.exe target
##

# Flags for tools...
!ifdef DEBUG
DEBUG_CFLAGS=/Zi /Od
DEBUG_LFLAGS=/DEBUG
DEBUG_AFLAGS=
DEBUG_SUFFIX=d
!else
DEBUG_CFLAGS=/O2
DEBUG_LFLAGS=
DEBUG_AFLAGS=
DEBUG_SUFFIX=
!endif

CPPFLAGS=/nologo /Zc:forScope,wchar_t /EHa /GR /Gy /wd4068 /wd4355 /D_CRT_SECURE_NO_DEPRECATE /I. $(CFLAGS) $(DEBUG_CFLAGS)
BINDFLAGS=/NOLOGO $(DEBUG_AFLAGS)
# The ignore is to stop the "all references to 'xxx' discarded by /OPT:REF" linker warning.
LINKFLAGS=/NOLOGO $(DEBUG_LFLAGS) /IGNORE:4089 shell32.lib
# Remove incremental linking for now due to quick and dirty manifest embedding (need to rework to use incremental linking).
#LINKFLAGS=/NOLOGO /INCREMENTAL $(DEBUG_LFLAGS) /IGNORE:4089 shell32.lib

# Libraries and object files...
CONSOLE_LIBS=ole32.lib oleaut32.lib
CONSOLE_RTOBJS=
CONSOLE_LFLAGS=

DYNAMIC_LIBS=ole32.lib
DYNAMIC_RTOBJS=
DYNAMIC_LFLAGS=/DLL

COMMON_LIBS=psapi.lib rpcrt4.lib advapi32.lib

# Tools and implicit rules...
CPP=cl.exe

BIND=@echo Binding $*............... &lib
LINK=@echo Linking $*............... &link

MANIFEST=manifest

.SUFFIXES: .cpp .cms

# Remove implicit .cpp to .exe rule to ensure correct linkage.
.cpp.exe:

# Change implicit .cpp to .obj rule to support multiple source file compilation.
.cpp.obj::
 @compile.bat $<
# @test_compile.bat $<

# Custom rule to generate command definitions.
.cms.cmh:
 @generate_commands $*.cms

#CPP_NORMAL_OPT=STATIC_RTL_SINGLE_THREAD
#CPP_NORMAL_OPT=STATIC_RTL_MULTIPLE_THREADS
CPP_NORMAL_OPT=DYNAMIC_RTL_MULTIPLE_THREADS

CPP_DYNAMIC_OPT=DYNAMIC_RTL_MULTIPLE_THREADS

CPP_NORMAL_SRTL_ST=@$(CPP) $(CPPFLAGS) /ML$(DEBUG_SUFFIX) /c
CPP_NORMAL_SRTL_MT=@$(CPP) $(CPPFLAGS) /MT$(DEBUG_SUFFIX) /c
CPP_NORMAL_DRTL_MT=@$(CPP) $(CPPFLAGS) /MD$(DEBUG_SUFFIX) /c

CPP_DYNAMIC_DRTL_MT=$(CPP_NORMAL_DRTL_MT)

BIND_NORMAL=$(BINDFLAGS) /NOLOGO /OUT:$@

LINK_NORMAL=$(LINKFLAGS) /SUBSYSTEM:CONSOLE $(CONSOLE_LFLAGS) $** $(CONSOLE_RTOBJS) /LIBPATH:"$(LIB)" /OUT:$*.exe
LINK_DYNAMIC=$(LINKFLAGS) /SUBSYSTEM:CONSOLE $(DYNAMIC_LFLAGS) $** $(DYNAMIC_RTOBJS) /LIBPATH:"$(LIB)" /OUT:$*.dll

!if "$(CPP_NORMAL_OPT)" == "STATIC_RTL_SINGLE_THREAD"
CPP_NORMAL=$(CPP_NORMAL_SRTL_ST)
!elseif "$(CPP_NORMAL_OPT)" == "STATIC_RTL_MULTIPLE_THREADS"
CPP_NORMAL=$(CPP_NORMAL_SRTL_MT)
!elseif "$(CPP_NORMAL_OPT)" == "DYNAMIC_RTL_MULTIPLE_THREADS"
CPP_NORMAL=$(CPP_NORMAL_DRTL_MT)
!else
! error Unexpected CPP_NORMAL_OPT value $(CPP_NORMAL_OPT)
!endif

!if "$(CPP_DYNAMIC_OPT)" == "DYNAMIC_RTL_MULTIPLE_THREADS"
CPP_DYNAMIC=$(CPP_DYNAMIC_DRTL_MT)
!else
! error Unexpected CPP_DYNAMIC_OPT value $(CPP_DYNAMIC_OPT)
!endif

TARGET_BASE=base.lib
TARGET_BASE_INCLUDE=base.inc
TARGET_BASE_OBJECTS=console.obj sio.obj utilities.obj

TARGET_XREP=xrep.exe
TARGET_XREP_INCLUDE=xrep.inc
TARGET_XREP_OBJECTS=xrep.obj

TARGET_XVARS=xvars.exe
TARGET_XVARS_INCLUDE=xvars.inc
TARGET_XVARS_OBJECTS=xvars.obj

ALL_TARGETS=\
 $(TARGET_BASE)\
 $(TARGET_XREP)\
 $(TARGET_XVARS)

ALL_INCLUDES=\
 $(TARGET_BASE_INCLUDE)\
 $(TARGET_XREP_INCLUDE)\
 $(TARGET_XVARS_INCLUDE)

ALL_OBJECTS=\
 $(TARGET_BASE_OBJECTS)\
 $(TARGET_XREP_OBJECTS)\
 $(TARGET_XVARS_OBJECTS)

usage: make_usage

all: $(ALL_TARGETS)

base: $(TARGET_BASE)
xrep: $(TARGET_XREP)
xvars: $(TARGET_XVARS)

dtm:
 @echo %date% %time%>make.dtm

make_usage:
 @usage.bat makefile.mvc

touch_incs:
 @touch.bat base.inc
 @touch.bat xrep.inc
 @touch.bat xvars.inc

!ifndef NO_INC_FILES
! include $(TARGET_BASE_INCLUDE)
!endif

$(TARGET_BASE:.lib=.compile):
 @echo @call gendeps.bat %* >compile.bat
 @echo $(CPP_NORMAL) %* >>compile.bat
 @geninc $(TARGET_BASE_OBJECTS:.obj=) >$(TARGET_BASE_INCLUDE)

$(TARGET_BASE):: $(TARGET_BASE:.lib=.compile)
 @

$(TARGET_BASE):: $(TARGET_BASE_OBJECTS)
 $(BIND) @<<
 $(BIND_NORMAL) $(TARGET_BASE_OBJECTS)
<<

!ifndef NO_INC_FILES
! include $(TARGET_XREP_INCLUDE)
!endif

$(TARGET_XREP:.exe=.compile):
 @echo @call gendeps.bat %* >compile.bat

 @echo $(CPP_NORMAL) %* >>compile.bat

 @geninc $(TARGET_XREP_OBJECTS:.obj=) >$(TARGET_XREP_INCLUDE)

$(TARGET_XREP):: $(TARGET_BASE) $(TARGET_XREP:.exe=.compile)
 @

$(TARGET_XREP):: $(TARGET_XREP_OBJECTS) $(TARGET_BASE)
 $(LINK) @<<
 $(LINK_NORMAL) $(COMMON_LIBS)
<<
!ifdef MANIFEST
 @$(MANIFEST) $(TARGET_XREP)
!endif

!ifndef NO_INC_FILES
! include $(TARGET_XVARS_INCLUDE)
!endif

$(TARGET_XVARS:.exe=.compile):
 @echo @call gendeps.bat %* >compile.bat

 @echo $(CPP_NORMAL) %* >>compile.bat

 @geninc $(TARGET_XVARS_OBJECTS:.obj=) >$(TARGET_XVARS_INCLUDE)

$(TARGET_XVARS):: $(TARGET_BASE) $(TARGET_XVARS:.exe=.compile)
 @

$(TARGET_XVARS):: $(TARGET_XVARS_OBJECTS) $(TARGET_BASE)
 $(LINK) @<<
 $(LINK_NORMAL) $(COMMON_LIBS)
<<
!ifdef MANIFEST
 @$(MANIFEST) $(TARGET_XVARS)
!endif

clean::
 @killfiles $(ALL_TARGETS)
 @killfiles $(ALL_TARGETS:.exe=.ilk)
 @killfiles $(ALL_TARGETS:.exe=.map)
 @killfiles $(ALL_TARGETS:.exe=.pdb)
 @killfiles $(ALL_TARGETS:.dll=.ilk)
 @killfiles $(ALL_TARGETS:.dll=.map)
 @killfiles $(ALL_TARGETS:.dll=.exp)
 @killfiles $(ALL_TARGETS:.dll=.pdb)
 @killfiles $(ALL_INCLUDES)
 @killfiles $(ALL_OBJECTS)
 @killfiles $(ALL_OBJECTS:.obj=.dep)

