`{`@eq`(`'after_fetch`'`,`$section`)\
   // [(start for_email_contact)]
   if( get_obj( ).get_variable( "@trigger" ).empty( )
    && get_session_variable( c_field_id_`{`$arg_belongs`} ).empty( ) )
   {
      set_session_variable( c_field_id_`{`$arg_belongs`}, "true" );
      if( get_obj( ).child_`{`$arg_group_contacts`}( ).iterate_forwards( ) )
      {
         set< string > groups;
         do
         {
            groups.insert( get_obj( ).child_`{`$arg_group_contacts`}( ).`{`$arg_email_group`}( ).`{`$arg_group_name`}( ) );

         } while( get_obj( ).child_`{`$arg_group_contacts`}( ).iterate_next( ) );

         string all_groups;
         for( set< string >::iterator i = groups.begin( ); i!= groups.end( ); ++i )
         {
            if( !all_groups.empty( ) )
               all_groups += "\\t";
            all_groups += *i;
         }

         get_obj( ).`{`$arg_belongs`}( all_groups );
      }
      set_session_variable( c_field_id_`{`$arg_belongs`}, "" );
   }
   // [(finish for_email_contact)]
`}
`{`@eq`(`'to_store`'`,`$section`)\
   // [(start for_email_contact)]
   if( is_create && get_obj( ).`{`$arg_from`}( ).empty( ) && !is_null( get_obj( ).`{`$arg_from_email`}( ) ) )
      get_obj( ).`{`$arg_from`}( get_obj( ).`{`$arg_from_email`}( ).`{`$arg_from_from`}( ) );

   if( is_create && !get_obj( ).`{`$arg_from`}( ).empty( ) && get_obj( ).`{`$arg_name`}( ).empty( ) )
   {
      string name, email;
      parse_email_address( get_obj( ).`{`$arg_from`}( ), name, email );

      get_obj( ).`{`$arg_email`}( email );

      if( name != email )
      {
         string::size_type pos = email.find( '@' );
         if( pos != string::npos )
            name += " (" + email.substr( pos + 1 ) + ")";
      }
      get_obj( ).`{`$arg_name`}( name );
   }

   if( !is_null( get_obj( ).`{`$arg_add_to_group`}( ) ) )
   {
      set< string > group_names;
      split_string( get_obj( ).`{`$arg_belongs`}( ), group_names, '\\t' );

      class_pointer< `{`$module_name`}_`{`$arg_group_class`} > cp_group( e_create_instance );
      cp_group->perform_fetch( get_obj( ).`{`$arg_add_to_group`}( ) );

      if( !group_names.count( cp_group->`{`$arg_group_name`}( ) ) )
      {
         set< string > remove_from_groups;
         split_string( get_obj( ).`{`$arg_remove_from_groups`}( ), remove_from_groups );

         if( remove_from_groups.count( get_obj( ).`{`$arg_add_to_group`}( ) ) )
         {
            string new_remove_from_groups;
            remove_from_groups.erase( get_obj( ).`{`$arg_add_to_group`}( ) );
            for( set< string >::iterator i = remove_from_groups.begin( ); i != remove_from_groups.end( ); ++i )
            {
               if( !new_remove_from_groups.empty( ) )
                  new_remove_from_groups += ",";
               new_remove_from_groups += *i;
            }

            get_obj( ).`{`$arg_remove_from_groups`}( new_remove_from_groups );
         }
         else
         {
            string add_to_groups( get_obj( ).`{`$arg_add_to_groups`}( ) );

            if( !add_to_groups.empty( ) )
               add_to_groups += ",";

            add_to_groups += get_obj( ).`{`$arg_add_to_group`}( );

            get_obj( ).`{`$arg_add_to_groups`}( add_to_groups );
         }

         group_names.insert( get_obj( ).`{`$arg_add_to_group`}( ).`{`$arg_group_name`}( ) );

         string belongs_to_groups;
         for( set< string >::iterator i = group_names.begin( ); i != group_names.end( ); ++i )
         {
            if( !belongs_to_groups.empty( ) )
               belongs_to_groups += '\\t';

            belongs_to_groups += *i;
         }

         get_obj( ).`{`$arg_belongs`}( belongs_to_groups );
      }

      get_obj( ).`{`$arg_add_to_group`}( "" );
   }

   if( !is_null( get_obj( ).`{`$arg_remove_from_group`}( ) ) )
   {
      set< string > group_names;
      split_string( get_obj( ).`{`$arg_belongs`}( ), group_names, '\\t' );

      class_pointer< `{`$module_name`}_`{`$arg_group_class`} > cp_group( e_create_instance );
      cp_group->perform_fetch( get_obj( ).`{`$arg_remove_from_group`}( ) );

      if( group_names.count( cp_group->`{`$arg_group_name`}( ) ) )
      {
         set< string > add_to_groups;
         split_string( get_obj( ).`{`$arg_add_to_groups`}( ), add_to_groups );

         if( add_to_groups.count( get_obj( ).`{`$arg_remove_from_group`}( ) ) )
         {
            string new_add_to_groups;
            add_to_groups.erase( get_obj( ).`{`$arg_remove_from_group`}( ) );
            for( set< string >::iterator i = add_to_groups.begin( ); i != add_to_groups.end( ); ++i )
            {
               if( !new_add_to_groups.empty( ) )
                  new_add_to_groups += ",";
               new_add_to_groups += *i;
            }

            get_obj( ).`{`$arg_add_to_groups`}( new_add_to_groups );
         }
         else
         {
            string remove_from_groups( get_obj( ).`{`$arg_remove_from_groups`}( ) );

            if( !remove_from_groups.empty( ) )
               remove_from_groups += ",";

            remove_from_groups += get_obj( ).`{`$arg_remove_from_group`}( );

            get_obj( ).`{`$arg_remove_from_groups`}( remove_from_groups );
         }

         group_names.erase( get_obj( ).`{`$arg_remove_from_group`}( ).`{`$arg_group_name`}( ) );

         string belongs_to_groups;
         for( set< string >::iterator i = group_names.begin( ); i != group_names.end( ); ++i )
         {
            if( !belongs_to_groups.empty( ) )
               belongs_to_groups += '\\t';

            belongs_to_groups += *i;
         }

         get_obj( ).`{`$arg_belongs`}( belongs_to_groups );
      }

      get_obj( ).`{`$arg_remove_from_group`}( "" );
   }

   if( ( is_create && get_obj( ).`{`$arg_display_as`}( ).empty( ) )
    || ( !is_create && get_obj( ).has_field_changed( c_field_id_`{`$arg_name`} ) ) )
   {
      string name( get_obj( ).`{`$arg_name`}( ) );

      string::size_type pos = name.find( '(' );
      while( pos != string::npos && pos > 0 && name[ pos - 1 ] == ' ' )
         --pos;

      if( pos != string::npos )
         name.erase( pos );

      pos = name.find( ',' );
      if( pos != string::npos )
      {
         string surname = name.substr( 0, pos );
         name.erase( 0, pos + 1 );

         name += " " + surname;
      }

      get_obj( ).`{`$arg_display_as`}( name );
   }

   if( ( is_create && get_obj( ).`{`$arg_surname`}( ).empty( ) )
    || ( !is_create && get_obj( ).has_field_changed( c_field_id_`{`$arg_name`} ) ) )
   {
      string name( get_obj( ).`{`$arg_name`}( ) );

      string::size_type pos = name.find( '(' );
      while( pos != string::npos && pos > 0 && name[ pos - 1 ] == ' ' )
         --pos;

      if( pos != string::npos )
         name.erase( pos );

      pos = name.find( ' ' );
      string::size_type rpos = name.find( ',' );

      if( pos != string::npos )
      {
         string str;

         if( rpos != string::npos )
            str = name.substr( 0, rpos );
         else
            str = name.substr( pos + 1 );

         if( rpos == string::npos )
         {
            pos = str.find_last_of( ' ' );

            if( pos != string::npos )
               str.erase( 0, pos + 1 );
         }

         get_obj( ).`{`$arg_surname`}( str );
      }
   }

   if( ( is_create && get_obj( ).`{`$arg_first_name`}( ).empty( ) )
    || ( !is_create && get_obj( ).has_field_changed( c_field_id_`{`$arg_name`} ) ) )
   {
      string name( get_obj( ).`{`$arg_name`}( ) );

      string::size_type pos = name.find( '(' );
      while( pos != string::npos && pos > 0 && name[ pos - 1 ] == ' ' )
         --pos;

      if( pos != string::npos )
         name.erase( pos );

      if( pos != string::npos )
         name.erase( pos );

      pos = name.find( ' ' );
      string::size_type rpos = name.find( ',' );

      if( pos != string::npos )
      {
         string str;

         if( rpos != string::npos )
            str = name.substr( pos + 1 );
         else
            str = name.substr( 0, pos );

         pos = str.find( ' ' );
         if( pos != string::npos )
            str.erase( pos );

         get_obj( ).`{`$arg_first_name`}( str );
      }
      else
         get_obj( ).`{`$arg_first_name`}( name );
   }
   // [(finish for_email_contact)]
`}
`{`@eq`(`'after_store`'`,`$section`)\
   // [(start for_email_contact)]
   if( !get_obj( ).`{`$arg_add_to_groups`}( ).empty( ) )
   {
      vector< string > new_groups;
      split_string( get_obj( ).`{`$arg_add_to_groups`}( ), new_groups );

      class_pointer< `{`$module_name`}_`{`$arg_group_contact_class`} > cp_group_contact( e_create_instance );

      for( size_t i = 0; i < new_groups.size( ); i++ )
      {
         cp_group_contact->op_create( get_dtm( ) + to_string( i ) );

         cp_group_contact->`{`$arg_email_contact`}( get_obj( ).get_key( ) );
         cp_group_contact->`{`$arg_email_group`}( new_groups[ i ] );

         cp_group_contact->op_apply( );
      }
   }

   if( !get_obj( ).`{`$arg_remove_from_groups`}( ).empty( ) )
   {
      set< string > old_groups;
      split_string( get_obj( ).`{`$arg_remove_from_groups`}( ), old_groups );

      if( get_obj( ).child_`{`$arg_group_contacts`}( ).iterate_forwards( ) )
      {
         do
         {
            if( old_groups.count( get_obj( ).child_`{`$arg_group_contacts`}( ).`{`$arg_email_group`}( ) ) )
            {
               get_obj( ).child_`{`$arg_group_contacts`}( ).op_destroy( );
               get_obj( ).child_`{`$arg_group_contacts`}( ).op_apply( );
            }
         } while( get_obj( ).child_`{`$arg_group_contacts`}( ).iterate_next( ) );
      }
   }
   // [(finish for_email_contact)]
`}
