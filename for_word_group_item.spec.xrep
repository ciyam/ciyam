`{`@eq`(`'pick_procedure`'`,`$section`)\
   // [(start for_word_group_item)]
   `{`$arg_pick_output`} = `{`$arg_pick_source`};

   string options( get_obj( ).`{`$arg_pick_from_trans`}( ) );
   if( !options.empty( ) )
   {
      vector< string > words;
      split_string( `{`$arg_pick_output`}, words, " / " );

      if( options.find( "@replace" ) == 0 )
      {
         `{`$arg_pick_output`}.erase( );
         if( options.length( ) > strlen( "@replace" ) )
            `{`$arg_pick_output`} = options.substr( strlen( "@replace" ) + 1 );
      }
      else
      {
         set< string > word_options;
         split_string( options, word_options, " / " );

         if( !words.empty( ) )
         {
            bool found = false;
            map< string, string > all_plurals, all_singulars;
            for( size_t i = 0; i < words.size( ); i++ )
            {
               string word( words[ i ] );

               string::size_type pos = word.find( " (" );
               if( pos != string::npos )
                  word.erase( pos );
               else if( !word.empty( ) && word[ 0 ] == '(' )
                  word.erase( );

               if( !word.empty( ) )
               {
                  string next_word( word );

                  if( next_word[ next_word.length( ) - 1 ] == ',' )
                     next_word.erase( next_word.length( ) - 1 );

                  vector< string > all_words;
                  all_words.push_back( word );

                  string extras;
                  pos = next_word.find( ' ' );
                  if( pos != string::npos )
                  {
                     extras = next_word.substr( pos );
                     next_word.erase( pos );
                  }

                  bool had_opts = false;
                  while( true )
                  {
                     string::size_type pos = next_word.find( '/' );
                     if( pos == string::npos )
                     {
                        if( had_opts )
                        {
                           words.push_back( next_word + extras );
                           all_words.push_back( next_word + extras );
                        }
                        break;
                     }

                     had_opts = true;
                     words.push_back( next_word.substr( 0, pos ) + extras );
                     all_words.push_back( next_word.substr( 0, pos ) + extras );

                     next_word.erase( 0, pos + 1 );
                  }

                  for( size_t i = 0; i < all_words.size( ); i++ )
                  {
                     string next( all_words[ i ] );
                     string::size_type pos = next.find( '(' );
                     if( pos != string::npos )
                     {
                        string prefix( next.substr( 0, pos ) );
                        if( !word_options.count( "@plural" ) )
                        {
                           words.push_back( prefix );
                           all_singulars.insert( make_pair( next_word, prefix ) );
                        }

                        if( word_options.count( prefix ) )
                           found = true;

                        string::size_type npos = next.find( ')', pos + 1 );
                        if( npos != string::npos )
                        {
                           string suffix = next.substr( pos + 1, npos - pos - 1 );
                           string plural( prefix + suffix );

                           if( suffix.length( ) > 3 && suffix[ 0 ] == next[ 0 ] )
                              plural = suffix;

                           if( word_options.count( plural ) )
                              found = true;

                           if( !word_options.count( "@singular" ) )
                           {
                              words.push_back( plural );
                              all_plurals.insert( make_pair( next_word, plural ) );
                           }
                        }
                     }
                  }

                  if( word_options.count( word ) )
                  {
                     `{`$arg_pick_output`} = word;
                     break;
                  }
               }
            }

            if( !found )
            {
               if( word_options.count( "@plural" ) && all_plurals.count( `{`$arg_pick_output`} ) )
                  `{`$arg_pick_output`} = all_plurals[ `{`$arg_pick_output`} ];

               if( word_options.count( "@singular" ) && all_singulars.count( `{`$arg_pick_output`} ) )
                  `{`$arg_pick_output`} = all_singulars[ `{`$arg_pick_output`} ];
            }
         }
      }
   }
   // [(finish for_word_group_item)]
`}
`{`@eq`(`'after_fetch`'`,`$section`)\
   // [(start for_word_group_item)]
   // NOTE: Empty code block for scope purposes.
   {
      string pinyin, chinese, translation;

      if( get_obj( ).`{`$arg_was_skipped`}( ) )
      {
         pinyin += "|";
         chinese += "|";
         translation += "|";
      }
      else if( get_obj( ).`{`$arg_was_not_skipped`}( ) )
      {
         pinyin += "&";
         chinese += "&";
         translation += "&";
      }

      if( get_obj( ).`{`$arg_can_skip`}( ) )
      {
         pinyin += "[";
         chinese += "[";
         translation += "[";
      }
      else if( get_obj( ).`{`$arg_was_skipped`}( )
       || get_obj( ).`{`$arg_was_not_skipped`}( ) )
      {
         pinyin += "(";
         chinese += "(";
         translation += "(";
      }

      if( !get_obj( ).`{`$arg_ppinyin`}( ).empty( ) )
         pinyin += get_obj( ).`{`$arg_ppinyin`}( ) + " ";

      if( !get_obj( ).`{`$arg_pchinese`}( ).empty( ) )
         chinese += get_obj( ).`{`$arg_pchinese`}( );

      if( !get_obj( ).`{`$arg_ptranslation`}( ).empty( ) )
         translation += get_obj( ).`{`$arg_ptranslation`}( ) + " ";

      if( !get_obj( ).`{`$arg_only_as_words`}( ) )
      {
         pinyin += "{";
         chinese += "{";
         translation += "{";
      }

      if( !is_null( get_obj( ).`{`$arg_option1`}( ) ) )
      {
         pinyin += get_obj( ).`{`$arg_option1`}( ).`{`$arg_opinyin`}( );
         chinese += get_obj( ).`{`$arg_option1`}( ).`{`$arg_ochinese`}( );

         string next_translation;
         get_obj( ).`{`$arg_pick_proc`}( get_obj( ).`{`$arg_option1`}( ).`{`$arg_otranslation`}( ), next_translation );

         string::size_type pos = next_translation.find( " (" );
         if( pos != string::npos )
            next_translation.erase( pos );
         else if( !next_translation.empty( ) && next_translation[ 0 ] == '(' )
            next_translation.erase( );

         translation += next_translation;
      }

      string sep( "|" );
      string csep( sep );
      if( get_obj( ).`{`$arg_as_phrase`}( ) )
      {
         sep = " ";
         csep.erase( );
      }

      bool is_replace = ( get_obj( ).`{`$arg_pick_from_trans`}( ).find( "@replace" ) == 0 );

      if( !is_null( get_obj( ).`{`$arg_option2`}( ) ) )
      {
         pinyin += sep + get_obj( ).`{`$arg_option2`}( ).`{`$arg_opinyin`}( );
         chinese += csep + get_obj( ).`{`$arg_option2`}( ).`{`$arg_ochinese`}( );

         if( !is_replace )
         {
            string next_translation;
            get_obj( ).`{`$arg_pick_proc`}( get_obj( ).`{`$arg_option2`}( ).`{`$arg_otranslation`}( ), next_translation );

            string::size_type pos = next_translation.find( " (" );
            if( pos != string::npos )
               next_translation.erase( pos );
            else if( !next_translation.empty( ) && next_translation[ 0 ] == '(' )
               next_translation.erase( );

            translation += sep + next_translation;
         }
      }

      if( !is_null( get_obj( ).`{`$arg_option3`}( ) ) )
      {
         pinyin += sep + get_obj( ).`{`$arg_option3`}( ).`{`$arg_opinyin`}( );
         chinese += csep + get_obj( ).`{`$arg_option3`}( ).`{`$arg_ochinese`}( );

         if( !is_replace )
         {
            string next_translation;
            get_obj( ).`{`$arg_pick_proc`}( get_obj( ).`{`$arg_option3`}( ).`{`$arg_otranslation`}( ), next_translation );

            string::size_type pos = next_translation.find( " (" );
            if( pos != string::npos )
               next_translation.erase( pos );
            else if( !next_translation.empty( ) && next_translation[ 0 ] == '(' )
               next_translation.erase( );

            translation += sep + next_translation;
         }
      }

      if( !is_null( get_obj( ).`{`$arg_option4`}( ) ) )
      {
         pinyin += sep + get_obj( ).`{`$arg_option4`}( ).`{`$arg_opinyin`}( );
         chinese += csep + get_obj( ).`{`$arg_option4`}( ).`{`$arg_ochinese`}( );

         if( !is_replace )
         {
            string next_translation;
            get_obj( ).`{`$arg_pick_proc`}( get_obj( ).`{`$arg_option4`}( ).`{`$arg_otranslation`}( ), next_translation );

            string::size_type pos = next_translation.find( " (" );
            if( pos != string::npos )
               next_translation.erase( pos );
            else if( !next_translation.empty( ) && next_translation[ 0 ] == '(' )
               next_translation.erase( );

            translation += sep + next_translation;
         }
      }

      if( !get_obj( ).`{`$arg_only_as_words`}( ) )
      {
         pinyin += "}";
         chinese += "}";
         translation += "}";
      }

      if( !get_obj( ).`{`$arg_spinyin`}( ).empty( ) )
      {
         if( !pinyin.empty( ) )
            pinyin += " ";
         pinyin += get_obj( ).`{`$arg_spinyin`}( );
      }

      chinese += get_obj( ).`{`$arg_schinese`}( );

      if( !get_obj( ).`{`$arg_stranslation`}( ).empty( ) )
      {
         string suffix( get_obj( ).`{`$arg_stranslation`}( ) );

         if( !translation.empty( )
          && suffix[ 0 ] != ',' && suffix[ 0 ] != '.' && suffix[ 0 ] != '?' && suffix[ 0 ] != '!' )
            translation += " ";

         if( suffix.size( ) > 2 && suffix[ 0 ] == '!' && suffix[ 1 ] != ' ' )
            suffix.erase( 0, 1 );

         translation += suffix;
      }

      if( get_obj( ).`{`$arg_can_skip`}( ) )
      {
         pinyin += "]";
         chinese += "]";
         translation += "]";
      }
      else if( get_obj( ).`{`$arg_was_skipped`}( )
       || get_obj( ).`{`$arg_was_not_skipped`}( ) )
      {
         pinyin += ")";
         chinese += ")";
         translation += ")";
      }

      if( get_obj( ).`{`$arg_with_next`}( ) )
      {
         pinyin += "+";
         chinese += "+";
         translation += "+";
      }

      get_obj( ).`{`$arg_pinyin`}( pinyin );
      get_obj( ).`{`$arg_chinese`}( chinese );
      get_obj( ).`{`$arg_translation`}( translation );
   }
   // [(finish for_word_group_item)]
`}
`{`@eq`(`'get_required_field_names`'`,`$section`)\
   // [(start for_word_group_item)]
   if( needs_field_value( "`{`$arg_pinyin`}", dependents )
    || needs_field_value( "`{`$arg_chinese`}", dependents )
    || needs_field_value( "`{`$arg_translation`}", dependents ) )
   {
      dependents.insert( "`{`$arg_option1`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_option1`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_option1`} ) ) )
         names.insert( "`{`$arg_option1`}" );

      dependents.insert( "`{`$arg_option2`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_option2`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_option2`} ) ) )
         names.insert( "`{`$arg_option2`}" );

      dependents.insert( "`{`$arg_option3`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_option3`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_option3`} ) ) )
         names.insert( "`{`$arg_option3`}" );

      dependents.insert( "`{`$arg_option4`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_option4`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_option4`} ) ) )
         names.insert( "`{`$arg_option4`}" );

      dependents.insert( "`{`$arg_can_skip`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_can_skip`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_can_skip`} ) ) )
         names.insert( "`{`$arg_can_skip`}" );

      dependents.insert( "`{`$arg_with_next`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_with_next`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_with_next`} ) ) )
         names.insert( "`{`$arg_with_next`}" );

      dependents.insert( "`{`$arg_as_phrase`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_as_phrase`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_as_phrase`} ) ) )
         names.insert( "`{`$arg_as_phrase`}" );

      dependents.insert( "`{`$arg_only_as_words`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_only_as_words`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_only_as_words`} ) ) )
         names.insert( "`{`$arg_only_as_words`}" );

      dependents.insert( "`{`$arg_was_skipped`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_was_skipped`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_was_skipped`} ) ) )
         names.insert( "`{`$arg_was_skipped`}" );

      dependents.insert( "`{`$arg_was_not_skipped`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_was_not_skipped`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_was_not_skipped`} ) ) )
         names.insert( "`{`$arg_was_not_skipped`}" );

      dependents.insert( "`{`$arg_ppinyin`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_ppinyin`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_ppinyin`} ) ) )
         names.insert( "`{`$arg_ppinyin`}" );

      dependents.insert( "`{`$arg_pchinese`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_pchinese`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_pchinese`} ) ) )
         names.insert( "`{`$arg_pchinese`}" );

      dependents.insert( "`{`$arg_ptranslation`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_ptranslation`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_ptranslation`} ) ) )
         names.insert( "`{`$arg_ptranslation`}" );

      dependents.insert( "`{`$arg_spinyin`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_spinyin`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_spinyin`} ) ) )
         names.insert( "`{`$arg_spinyin`}" );

      dependents.insert( "`{`$arg_schinese`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_schinese`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_schinese`} ) ) )
         names.insert( "`{`$arg_schinese`}" );

      dependents.insert( "`{`$arg_stranslation`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_stranslation`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_stranslation`} ) ) )
         names.insert( "`{`$arg_stranslation`}" );

      dependents.insert( "`{`$arg_pick_from_trans`}" );

      if( ( required_transients && is_field_transient( e_field_id_`{`$arg_pick_from_trans`} ) )
       || ( !required_transients && !is_field_transient( e_field_id_`{`$arg_pick_from_trans`} ) ) )
         names.insert( "`{`$arg_pick_from_trans`}" );
   }
   // [(finish for_word_group_item)]
`}
