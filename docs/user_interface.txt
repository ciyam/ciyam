User Interface Technical Design and Implementation
--------------------------------------------------

The UI (beyond the the console only "ciyam_client") is provided by the FCGI server "ciyam_interface" which is
suitable for any web server that supports FCGI. For a development environment only use an FCGI implementation
that will launch the FCGI server "on demand" (such as "mod_fcgid" for Apache).

Static Content
--------------

A basic tenet of the technical design itself is that all content that is "seen" is loaded via what is usually
referred to as an AJAX request (although the request itself is not performed asynchronously and all data that
is requested in this manner is returned in the form of HTML).

So at any point a "View Source" will display something very similar to the following:

<!DOCTYPE html
 PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
 
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 
<head>
<title>Sample Beta</title>
 
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<meta name="copyright" content="Copyright 2013 CIYAM Open Developers"/>
 
<meta http-equiv="Expires" content="0"/>
<meta http-equiv="Pragma" content="no-cache"/>
<meta http-equiv="Cache-Control" content="no-cache"/>
<meta http-equiv="Cache-Control" content="no-store"/>
 
<script language="JavaScript" type="text/javascript" src="sha1.js"></script>
<script language="JavaScript" type="text/javascript" src="sha2.js"></script>
<script language="JavaScript" type="text/javascript" src="base64.js"></script>
 
<script language="javascript" type="text/javascript">var module = 'module=Sample';</script>
 
<link rel="stylesheet" href="ciyam_interface.css" type="text/css"/>
<link rel="stylesheet" href="css/pikaday.css" type="text/css"/>
<script language="javascript" type="text/javascript" src="ciyam_interface.js"></script>
<script language="javascript" type="text/javascript" src="pikaday.js"> 
</script>
<script language="javascript" type="text/javascript" src="scripts/wysiwyg.js"></script>
<script language="javascript" type="text/javascript" src="scripts/wysiwyg-settings.js"></script>
</head>
 
<body onload="load( )">
<noscript>
   <div class="noscript">
       <p><strong>JavaScript seem to be disabled in your browser.</strong></p>
       <p>You must have JavaScript enabled in your browser in order to use this website.</p>
   </div>
</noscript>
 
<div id="content">
</div>
 
<div id="auto_progress" class="invisible"><img src="auto_progress.gif" alt="auto_progress"/></div>
<div id="load_progress" class="invisible"><img src="load_progress.gif" alt="load_progress"/></div>
 
<iframe src="javascript:false;"
 name="hidden_frame" frameborder="0" width="1" height="1" marginheight="0" marginwidth="0">
</iframe>
 
</body>
</html>

So the page includes various .js files and style sheets but the "content" is always an empty "div" which will
only be expanded after the call to "load". Another couple of "divs" are used for displaying "progress" images
(animated .gif files) and a "hidden frame" that is used for file uploading (which are actually performed with
a separate "upload" FCGI server).

Dynamic Content
---------------

As using "View Source" will never show anything other that the "static content" shown above a special "debug"
variable exists in "ciyam_interface.js" (called "debugDynamicContent") which, when set to true, allows one to
view the injected HTML "source code" at the bottom of the page.

The basic skeleton of injected HTML comes from the file "ciyam_interface.htms" and is as follows:

<div id="extra_content">
<!-- @@extra_content -->
</div>

with the "@@extra_content" comment line being replaced with the content generated by the FCGI interface. What
that content will be depends entirely upon the current state of the session and the URL query string. With no
query string the "home" page will be displayed the appearance of which depends upon whether an application is
allowing anonymous access.

Home Page
---------

Assuming that primary application model does not permit anonymous access then the "extra content" should look
similar to the following:

-------------------------------------------------------------------------------------------------------------

<div id="normal_content" class="menubar_background">

<div id="header">
   <img src="Sample.jpg" alt="Header"/>
   <div id="navband">
   </div>
</div>
<div id="loginbox">
   <div id="loginform">
...
   </div>
</div>

</div>
<br class=\"clear\"/>
<div id="footer">
   <p class="footer" align="center">&copy; 2012-2013 CIYAM Open Developers</p>
   <br/>
</div>

<input type="hidden" value="document.cookie = 'session=,keep=,dtmoff=,gmtoff=;
 Expires=Thu, 01-Jan-1970 00:00:01 UTC; path=/'; serverId = 'f32e0805a4ea54774208';
 uniqueId = '7a71f32377a795b3dc5a3a3763050d11cd7fa0481b8b304e2e90b1218898a58e';" id="extra_content_func"/>

-------------------------------------------------------------------------------------------------------------

The "loginform" div of course would contain the actual login form HTML (omitted here for brevity). The use of
the "normal_content" div is standard for all injected HTML (with the class set to "sidebar_background" if the
application is using a "sidebar" rather than a "menubar" and one exists to be displayed which is not going to
be the case for the login form).

If the primary application model does permit anonymous access the the "extra content" would instead look more
like the following:

-------------------------------------------------------------------------------------------------------------

<div id="normal_content" class="sidebar_background">
<div id="remainder">

<div id="header">
   <img src="Sample.jpg" alt="Header"/>
   <div id="navband">
      <div id="nav">
         <div id="minilogin">
...
         </div>
...
         </div>
      </div >
   </div>
</div>

<div id="sidebar">
   <ul>
     <li class="sidebar_selected">Home</li>
...
   </ul>
</div>

<div id="main" class="sidebar_width">
<h2>Welcome to Sample Beta</h2>
...
</div>

<br class=\"clear\"/>
<div id="footer">
   <p class="footer" align="center">&copy; 2012-2013 CIYAM Open Developers</p>
   <br/>
</div>

</div>
</div>
<input type="hidden"
 value="document.cookie = 'session=,keep=,dtmoff=,gmtoff=; Expires=Thu, 01-Jan-1970 00:00:01 UTC; path=/';
...
</div>

-------------------------------------------------------------------------------------------------------------

Note that the above is for an application that uses a "sidebar". For an application that uses a "menubar" the
content injected would instead look more like this:

-------------------------------------------------------------------------------------------------------------

<div id="extra_content">

<div id="normal_content" class="menubar_background">
<div id="remainder">

<div id="header">
   <img src="Sample.jpg" alt="Header"/>
   <div id="navband">
      <div id="nav">
         <div id="minilogin">
...
         </div>
...
         </div>
      </div >
   </div>
</div>

<div id="menuband">
   <ul id="menubar">
     <li class=""><a href="#">Home</a></li>
...
   </ul>
</div>

<div id="main" class="menubar_width">
<h2>Welcome to Sample Beta</h2>
...
</div>

<br class=\"clear\"/>
<div id="footer">
   <p class="footer" align="center">&copy; 2012-2013 CIYAM Open Developers</p>
   <br/>
</div>

</div>
</div>
<input type="hidden"
value="document.cookie = 'session=,keep=,dtmoff=,gmtoff=; Expires=Thu, 01-Jan-1970 00:00:01 UTC; path=/';
...
</div>

-------------------------------------------------------------------------------------------------------------

The "hidden" input that is always found at the bottom of the injected content is where .js code that will end
up being "eval" executed when the page is being rendered.

Whether using a "sidebar" or a "menubar" one can see an image ("Sample.jpg") was included in the HTML that is
being injected (rather than using CSS for this). This can be removed by either removing or renaming the image
file (i.e. it is just being used in order to create a "stock" look).

