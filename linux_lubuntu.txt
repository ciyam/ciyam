Linux Lubuntu Specific Instructions
===================================

https://cdimage.ubuntu.com/lubuntu/releases/noble/release/
(download the ISO image to use as the VM's install CD/DVD)

Creating VirtualBox Machine
---------------------------

Create a new New machine in VirtualBox typing its Name and then using the ISO Image
Image drop list to select "Other..." then locate the ISO image that was downloaded.
Click on Hardware to select a "Base Memory" size of 4096 MB then click on Hard Disk
and in "Create a Virtual Hard Disk" select a size no less than 510 GB. Click Finish
but before starting up this new VM first click on the Settings button and then from
General -> Advanced select the Shared Clipboard as bidirectional and then in System
remove Floppy from the Boot Order. Lastly in Storage -> Devices -> Controller: SATA
check the "Use Host I/O Cache" option (for a huge difference to DB performance).

Port Forwarding to access the VM from its Host
----------------------------------------------
(Network -> Advanced -> Port Forwarding)
CIYAM    TCP   127.0.0.1   12021    10.0.2.15   12021
HTTP     TCP   127.0.0.1   8888     10.0.2.15   80
SSH      TCP   127.0.0.1   2222     10.0.2.15   22

It should be noted the "localhost" port numbers (other than CIYAM) have been set to
values that are different to the standard ones and can be changed if they are being
used already (although examples below are assuming the values chosen above).

Starting OS Installation
------------------------

Click the green arrow Start in VirutalBox and then hit enter (or just wait a while)
at the initial text menu and then click the "Install Lubuntu" button in the GUI.

The language selection should next be performed and then the Region and Locale need
to be chosen (if wanting to approximate "UTC" then select "Atlantic/Reykjavik" then
depending upon date and number formatting one of "en_SG.UTF-8" or "en_US.UTF-8").

Create the user "admin" when installing (with an initial password as just "linux").

After the Restart select System Tools -> QTerminal to perform all remaining steps.

Install Guest Additions
-----------------------
NOTE: Unfortunately this first "apt install" needs to be manually typed in order to
provide the bidirectional clipboard (which should function after rebooting the VM).

sudo apt install virtualbox-guest-x11 -y

sudo reboot

Use sudo without a password
---------------------------

sudo update-alternatives --config editor
(use this to select the default editor)

sudo visudo
(add the following line at the bottom of the file)
admin ALL=(ALL) NOPASSWD:ALL

If you had selected "Allow Login Without Password" to later prevent that:
sudo vi /etc/sddm.conf
(comment out the AutoLogin lines)

(to disable "smart indenting" in vim)
sudo mv /usr/share/vim/vim91/indent.vim /usr/share/vim/vim91/indent.vim.sav

(and to ensure that auto-commenting doesn't occur in vim either)
echo "set fo-=ro" >>.vimrc

Update to latest version (should reboot immediately after this):

sudo apt update

sudo reboot

To prevent unattended upgrades and stop annoying notifications
--------------------------------------------------------------

sudo systemctl disable --now unattended-upgrades

Preferences -> LXQt Settings -> Desktop Notifications
 (check Do Not Disturb)

Preferences -> LXQt Settings -> Session Settings : Auto Start
 (unselect the "Lubuntu Update Autostart" option)
 (and "Geoclue Demo agent" if this is not wanted)

Install all required packages for CIYAM Software Manufacturing
--------------------------------------------------------------

sudo apt install git -y
sudo apt install qrencode -y
(these should already be installed)

sudo apt install libpng-dev -y
sudo apt install libhpdf-dev -y

sudo apt-get install make -y
sudo apt-get install build-essential -y

sudo apt install apache2 libapache2-mod-fcgid -y
sudo apt install mariadb-server libmariadb-dev -y

sudo apt-get install libreadline-dev -y
sudo apt-get install libmysqlclient-dev -y

Next install and start/restart required services and extras
-----------------------------------------------------------

sudo apt install xclip
sudo apt install openssh-server -y

sudo apt autoremove

sudo systemctl enable ssh
sudo systemctl enable mysql
sudo systemctl enable apache2

Apache2 configuration for FCGI support
--------------------------------------

sudo vi /etc/apache2/apache2.conf
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
...
#ServerRoot "/etc/apache2"
*** add the following line after the above line  ***
ServerName localhost
...
<Directory /var/www/>
   Options Indexes FollowSymLinks
*** change the above line and add the second line ***
   Options ExecCGI FollowSymLinks
   AddHandler fcgid-script .fcgi
...
   AllowOverride None
*** change the above line to become the following ***
   AllowOverride All
...
</Directory>

*** add all of the following lines here ***
<IfModule fcgid_module>
   MaxProcessCount               10
   MaxRequestLen                 10485760
   IdleTimeOut                   3600
   IPCConnectTimeout             20
   IPCCommTimeout                300
   DefaultMaxClassProcessCount   1
   DefaultMinClassProcessCount   1
</IfModule>
...
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo systemctl start mysql
sudo systemctl restart apache2

sudo vi /etc/ssh/sshd_config
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
...
*** uncomment out the following line ***
PasswordAuthentication yes
...
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo systemctl start ssh

sudo systemctl enable ufw

sudo ufw allow ssh
sudo ufw allow http
sudo ufw allow 12021

git clone https://github.com/ciyam/fcgi.git

cd fcgi
./configure
make
sudo make install
sudo cp libfcgi/.libs/libfcgi.so /usr/lib64
sudo ln -s /usr/lib64/libfcgi.so /usr/lib64/libfcgi.so.0
sudo ln -s /usr/lib64/libfcgi.so /usr/lib64/libfcgi.so.0.0.0
cd ..

Export CIYAM environment variables now and for future sesisons
--------------------------------------------------------------
export WEBDIR=/var/www/html
echo "export WEBDIR=$WEBDIR" >> .bashrc

export CIYAM_USER=admin
echo "export CIYAM_USER=$CIYAM_USER" >> .bashrc

export CIYAM_GROUP=www-data
echo "export CIYAM_GROUP=$CIYAM_GROUP" >> .bashrc

export CIYAM_MYSQL="sudo mariadb"
echo "export CIYAM_MYSQL=\"$CIYAM_MYSQL\"" >> .bashrc

Change default group to "www-data" and add the "ciyam" group
------------------------------------------------------------
sudo usermod -g www-data admin
newgrp - www-data

sudo groupadd ciyam
sudo usermod -a -G ciyam admin

Confirm groups by logging out and back in then and type the following:
groups

sudo chmod a+rx /home/admin

sudo chmod g+w $WEBDIR
sudo chown www-data:www-data $WEBDIR

(if initially created may want to remove the following folders)
rmdir Documents
rmdir Downloads
rmdir Music
rmdir Pictures
rmdir Public
rmdir Videos
rmdir Templates

Create backup staging area ext4 file system and automount entry
---------------------------------------------------------------
sudo fallocate -l 10M backup.img
sudo mkfs.ext4 backup.img

sudo vi /etc/fstab
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
...
*** append the following line ***
/home/admin/backup.img  /home/admin/backup ext4 loop 0 0
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo mkdir backup
sudo mount backup.img backup
(ignore hint about modified fstab)

sudo mkdir backup/.ciyam
sudo mkdir backup/.system
sudo mv backup/lost+found backup/.system

sudo chown -R admin:www-data backup

sudo umount backup

Create opened staging area ext4 file system and automount entry
---------------------------------------------------------------
sudo fallocate -l 10M opened.img
sudo mkfs.ext4 opened.img

sudo vi /etc/fstab
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
...
*** append the following line ***
/home/admin/opened.img  /home/admin/opened ext4 loop 0 0
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo mkdir opened
sudo mount opened.img opened
(ignore hint about modified fstab)

sudo mkdir opened/.system
sudo mv opened/lost+found opened/.system

sudo chown -R admin:ciyam opened
sudo chmod g+rx /home/admin/opened

sudo umount opened

Create shared staging area ext4 file system and automount entry
---------------------------------------------------------------
sudo fallocate -l 10M shared.img
sudo mkfs.ext4 shared.img

sudo vi /etc/fstab
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
...
*** append the following line ***
/home/admin/shared.img  /home/admin/shared ext4 loop 0 0
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo mkdir shared
sudo mount shared.img shared
(ignore hint about modified fstab)

sudo mkdir shared/.system
sudo mv shared/lost+found shared/.system

sudo chown -R admin:www-data shared

sudo umount shared

Clone the CIYAM Software Manufacturing repository
-------------------------------------------------

git clone https://github.com/ciyam/ciyam

sudo cp ciyam/backup_readme.md /home/admin/backup/README.md
sudo cp ciyam/opened_readme.md /home/admin/opened/README.md
sudo cp ciyam/shared_readme.md /home/admin/shared/README.md

cd ciyam/src

To compile all targets and run all basic regression tests:

./config

./xrep @sshd_config_app.xrep user=$USER
(append output of this to the following)
sudo vi /etc/ssh/sshd_config

./xrep @ciyam_sftp.sh.xrep user=$USER > /home/$USER/ciyam_sftp.sh
chmod a+x /home/$USER/ciyam_sftp.sh

sudo systemctl restart ssh

make all

./dotests

To ensure that the Meta application will operate correctly:

./create_db ciyam .
./init Meta ciyam
./test -t=../tests Meta_tests.sio
./drop_db ciyam .

./create_db Meta .
./init Meta Meta

./install_test_fcgi

From the host OS use a browser with the following URL:

http://localhost:8888/test_fcgi.html

After clicking on the "Perform Post Request" button the following should be output:

Posted Data: name=Joe+Bloggs&age=&sex=male&submit=Perform+Post+Request...

If you go "back" to the page and then click on the button again you should now see:

Found HTTP_COOKIE: TEST=TEST_COOKIE

Posted Data: name=Joe+Bloggs&age=&sex=male&submit=Perform+Post+Request...

Assuming this has worked next execute the following to install the CIYAM IDE:

./setup Meta meta
./install_fcgi ciyam_interface meta
./install_fcgi upload meta
./install Meta meta index

rm ciyam.dat ciyam.hdr ciyam.idx ciyam.log ciyam.sql ciyam.tlg ciyam.modules.lst

Installing the CIYAM "systemd" Service
--------------------------------------

NOTE: Do this *only after* the CIYAM application server has been built and the
Meta DB has been created.

vi autoscript.sio
(uncomment out all standard scripts)

(if no ciyamd.service exists then ./init_service)
sudo cp ciyamd.service /usr/lib/systemd/system

sudo vi /usr/lib/systemd/system/ciyamd.service
(ensure that the "Environment" values matches the exported values above)

Make necessary changes (for VMs) to the "ciyam_server.sio" configuration file:

vi ciyam_server.sio
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
...
 <default_storage>Home
...
 <protocol_handler>sftp://@user@localhost:2222
 <ods_use_sync_write>false
...
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo systemctl daemon-reload
sudo systemctl enable ciyamd

sudo systemctl start ciyamd
sudo systemctl status ciyamd

Adding extra package types to Meta
----------------------------------

vi packages.lst
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
...
Blog
Forum
...
Message
...
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

./unbundle Blog.package
mv package.info Blog.package.info

./unbundle Forum.package
mv package.info Forum.package.info

./unbundle Message.package
mv package.info Message.package.info

./reconstruct_meta okay

./save_identity
./erase_identity

Adding 'ciyam.test' host (optional)
-----------------------------------

sudo vi /etc/hosts
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
...
10.0.2.2   ciyam.test
...
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

******************************** FOR NON-VM MACHINES ******************************

(determine the current external IP address)
hostname -i
***external_ip_address***

(determine the current internal IP address which needs to be static)
hostname -I | cut -d' ' -f1
***internal_ip_address***

sudo hostnamectl set-hostname ***domain_name*** --static

Installing Syncthing User Service
---------------------------------

sudo apt-get install syncthing

sudo systemctl enable syncthing@admin

sudo systemctl start syncthing@admin
sudo systemctl status syncthing@admin

In the host OS start a tunnel to access the Syncthing UI:
ssh -L 9394:127.0.0.1:8384 -p 2222 admin@localhost

Configure Syncthing from host OS using the following URL:
http://localhost:9394

Setting up an automatically renewed Let's Encrypt certificate
-------------------------------------------------------------

sudo apt-get install python3-certbot
sudo apt-get install python3-certbot-apache

sudo certbot --noninteractive --register-unsafely-without-email --agree-tos --apache -d ***domain_name***,www.***domain_name***
NOTE: Also append ",ntfy.***domain.name***" if wanting to use the "ntfy" service for self-hosted Element-X notifications.

sudo systemctl daemon-reload
sudo systemctl status certbot
sudo systemctl list-timers --all

Installing and configuring Matrix-Synapse with PostgreSQL
---------------------------------------------------------

sudo apt install -y lsb-release wget apt-transport-https
sudo wget -O /usr/share/keyrings/matrix-org-archive-keyring.gpg https://packages.matrix.org/debian/matrix-org-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/matrix-org-archive-keyring.gpg] https://packages.matrix.org/debian/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/matrix-org.list

sudo apt install matrix-synapse-py3 -y
sudo apt install postgresql -y

NOTE: Will need to type in a password twice when creating the "synapse_user".

The following is a simple way to create a random 32 character length password:

head -c 32 /dev/random | sha256sum | cut -c -32
***synapse_password***

sudo -u postgres bash
createuser --pwprompt synapse_user
createdb --encoding=UTF8 --locale=C --template=template0 --owner=synapse_user synapse
exit

sudo vi /etc/matrix-synapse/homeserver.yaml
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
...
database:
  name: psycopg2
  args:
    host: localhost
    user: synapse_user
    password: ***synapse_password***
    database: synapse
    cp_min: 5
    cp_max: 10
    cp_reconnect: true
...
registration_shared_secret: "***synapse_password***"
suppress_key_server_warning: true
retention:
 enabled: true
 default_policy:
  min_lifetime: 1d
  max_lifetime: 3d
...
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo vi /usr/lib/systemd/system/matrix-synapse.service
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
[Unit]
...
Requires=postgresql.service
After=postgresql.service
...
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo systemctl daemon-reload

sudo systemctl restart matrix-synapse
sudo systemctl status matrix-synapse

Configure Reverse Proxy for Apache2 Web Server
----------------------------------------------

sudo vi /etc/apache2/sites-available/000-default-le-ssl.conf
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
...
<VirtualHost *:443>
...
Include /etc/letsencrypt/options-ssl-apache.conf
...
(add the following)
    RequestHeader set "X-Forwarded-Proto" expr=%{REQUEST_SCHEME}
    AllowEncodedSlashes NoDecode
    ProxyPreserveHost on
    ProxyPass /_matrix http://127.0.0.1:8008/_matrix nocanon
    ProxyPassReverse /_matrix http://127.0.0.1:8008/_matrix
# NOTE: Uncomment out the following if allowing external adminstration.
#    ProxyPass /_synapse/admin http://127.0.0.1:8008/_synapse/admin nocanon
#    ProxyPassReverse /_synapse/admin http://127.0.0.1:8008/_synapse/admin
    ProxyPass /_synapse/client http://127.0.0.1:8008/_synapse/client nocanon
    ProxyPassReverse /_synapse/client http://127.0.0.1:8008/_synapse/client
...
</VirtualHost>

<VirtualHost *:8448>
    SSLEngine on
    ServerName ***domain_name***

(copy these from above)
SSLCertificateFile /etc/letsencrypt/live/mgp.ciyam.org/fullchain.pem
SSLCertificateKeyFile /etc/letsencrypt/live/mgp.ciyam.org/privkey.pem

    RequestHeader set "X-Forwarded-Proto" expr=%{REQUEST_SCHEME}
    AllowEncodedSlashes NoDecode
    ProxyPass /_matrix http://127.0.0.1:8008/_matrix nocanon
    ProxyPassReverse /_matrix http://127.0.0.1:8008/_matrix
</VirtualHost>
...
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

NOTE: To support server federation use the following:

mkdir -p /var/www/html/.well-known/matrix

vi /var/www/html/.well-known/matrix/server
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
{
    "m.server": "***domain_name***:443"
}
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo a2enmod proxy
sudo a2enmod headers
sudo a2enmod proxy_html
sudo a2enmod proxy_http

sudo apachectl configtest

sudo systemctl restart apache2
sudo systemctl status apache2

curl https://***domain_name***/_matrix/client/versions
curl https://***domain_name***/_matrix/federation/v1/version

Install and Configure a TURN server for use with Matrix-Synapse
---------------------------------------------------------------
NOTE: Not reqwuired if only using Element-Call for audio/video.

sudo apt install coturn -y

head -c 32 /dev/random | sha256sum | cut -c -32
***coturn_password***

sudo vi /etc/turnserver.conf
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
...
listening-ip=***internal_ip_address***
...
external-ip=***external_ip_address***
...
use-auth-secret
...
static-auth-secret=***coturn_password***
...
realm=***domain_name***
...
cert=/etc/coturn/certs/***domain_name***.cert
...
pkey=/etc/coturn/certs/***domain_name***.key
..
no-cli
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo ufw allow 3478
sudo ufw allow 5349

sudo mkdir -p /etc/coturn/certs
sudo chown -R turnserver:turnserver /etc/coturn/
sudo chmod -R 700 /etc/coturn/

sudo vi /etc/letsencrypt/renewal-hooks/deploy/coturn-certbot-deploy.sh
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#!/bin/bash

set -e

for domain in $RENEWED_DOMAINS; do
 case $domain in
 ***domain_name***)
  daemon_cert_root=/etc/coturn/certs

  # Make sure the certificate and private key files are
  # not world readable (even just for an instant) while
  # they are being copied.
  umask 077

  cp "$RENEWED_LINEAGE/fullchain.pem" "$daemon_cert_root/$domain.cert"
  cp "$RENEWED_LINEAGE/privkey.pem" "$daemon_cert_root/$domain.key"

  # Apply file ownership and permissions for the coturn daemon.
  chown turnserver "$daemon_cert_root/$domain.cert" "$daemon_cert_root/$domain.key"
  chmod 400 "$daemon_cert_root/$domain.cert" "$daemon_cert_root/$domain.key"

  systemctl restart coturn >/dev/null
  ;;
 esac
done
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo chmod 700 /etc/letsencrypt/renewal-hooks/deploy/coturn-certbot-deploy.sh

sudo certbot renew --force-renewal

sudo systemctl restart coturn
sudo systemctl status coturn

NOTE: If the external IP is not static then will need to add an update "cron" script.

vi coturn-external-ip
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#!/bin/bash

current_external_ip_config=$(sudo cat /etc/turnserver.conf | grep "^external-ip" | cut -d'=' -f2)
current_external_ip=$(dig +short ***domain_name***)

if [[ -n "$current_external_ip" ]] && [[ $current_external_ip_config != $current_external_ip ]]; then
 sudo sed -i "/^external-ip=/ c external-ip=$current_external_ip" /etc/turnserver.conf
 sudo systemctl restart coturn
fi
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Reconfigure Matrix-Synapse to be able to use the Coturn server
--------------------------------------------------------------

sudo vi /etc/matrix-synapse/homeserver.yaml
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
...
turn_uris:
  - "turn:***domain_name***:3478?transport=udp"
  - "turn:***domain_name***:3478?transport=tcp"
# Due to issues with LetsEncrypt certs these two may need to be omitted.
#  - "turns:***domain_name***:5349?transport=udp"
#  - "turns:***domain_name***:5349?transport=tcp"
turn_shared_secret: "***coturn_password***"
turn_user_lifetime: "1h"
turn_allow_guests: true
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo systemctl restart matrix-synapse
sudo systemctl status matrix-synapse

Install and Configure the Ntfy service for use with Apache2 and Matrix-Synapse
------------------------------------------------------------------------------

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://archive.heckel.io/apt/pubkey.txt | sudo gpg --dearmor -o /etc/apt/keyrings/archive.heckel.io.gpg
sudo apt install apt-transport-https
sudo sh -c "echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/archive.heckel.io.gpg] https://archive.heckel.io/apt debian main' > /etc/apt/sources.list.d/archive.heckel.io.list"
sudo apt update
sudo apt install ntfy
sudo systemctl enable ntfy

sudo vi /etc/ntfy/server.yml
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
...
base-url: "https://ntfy.***domain_name***"
...
listen-http: ":2586"
...
cache-file: "/var/cache/ntfy/cache.db"
cache-duration: "24h"
...
behind-proxy: true
...
attachment-cache-dir: "/var/cache/ntfy/attachments"
...
manager-interval: "1h"
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo systemctl start ntfy
sudo systemctl status ntfy

sudo vi /etc/apache2/sites-available/000-default-le-ssl.conf
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
<VirtualHost *:443>
    SSLEngine on
    ServerName ntfy.***domain_name***

    ProxyPass / http://127.0.0.1:2586/ upgrade=websocket
    ProxyPassReverse / http://127.0.0.1:2586/

    SetEnv proxy-nokeepalive 1
    SetEnv proxy-sendchunked 1

    # Higher than the max message size of 4096 bytes
    LimitRequestBody 102400

    SSLCertificateFile /etc/letsencrypt/live/***domain_name***-0001/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/***domain_name***-0001/privkey.pem
</VirtualHost>
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo systemctl restart apache2
sudo systemctl status apache2

curl -d "test..." https://ntfy.***domain_name***/test

curl https://ntfy.***domain_name***/_matrix/push/v1/notify

sudo vi /etc/matrix-synapse/homeserver.yaml
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
push:
  enabled: true
  include_content: false
  group_unread_count_by_room: false
ip_range_whitelist:
   - '***internal_ip_address***'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

sudo systemctl restart matrix-synapse
sudo systemctl status matrix-synapse

Creating new users and admin users for Matrix-Synapse
-----------------------------------------------------

sudo register_new_matrix_user -u ***user_name*** -c /etc/matrix-synapse/homeserver.yaml http://localhost:8008

sudo register_new_matrix_user -u ***admin_name*** -a -c /etc/matrix-synapse/homeserver.yaml http://localhost:8008
